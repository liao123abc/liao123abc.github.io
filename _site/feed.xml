<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ThomasLiao Blog</title>
    <description>Android Developer</description>
    <link>https://thomasliao.cn/</link>
    <atom:link href="https://thomasliao.cn/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 24 May 2021 10:11:36 +0800</pubDate>
    <lastBuildDate>Mon, 24 May 2021 10:11:36 +0800</lastBuildDate>
    <generator>Jekyll v4.2.0</generator>
    
      <item>
        <title>computer-network</title>
        <description>&lt;h1 id=&quot;computer-networks&quot;&gt;computer networks&lt;/h1&gt;

&lt;h2 id=&quot;12-network-hardware&quot;&gt;1.2 network hardware&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;taxonomy of computer networks
    &lt;ul&gt;
      &lt;li&gt;transmission technology
        &lt;ul&gt;
          &lt;li&gt;broadcast links
            &lt;ul&gt;
              &lt;li&gt;A wireless network&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;broadcasting: every machine&lt;/li&gt;
          &lt;li&gt;multicasting: subset of the machines&lt;/li&gt;
          &lt;li&gt;point-to-point links, sometimes called unicasting&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;scale
        &lt;ul&gt;
          &lt;li&gt;PANs (Personal Area Networks)
            &lt;ul&gt;
              &lt;li&gt;Bluetooth
                &lt;ul&gt;
                  &lt;li&gt;The master tells the slaves
                    &lt;ul&gt;
                      &lt;li&gt;what addresses to use,&lt;/li&gt;
                      &lt;li&gt;when they can broadcast,&lt;/li&gt;
                      &lt;li&gt;how long they can transmit,&lt;/li&gt;
                      &lt;li&gt;what frequencies they can use,and so on&lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;LAN (Local Area Network)
            &lt;ul&gt;
              &lt;li&gt;a standard for wireless LANs called IEEE 802.11, popularly known as WiFi&lt;/li&gt;
              &lt;li&gt;IEEE 802.3, popularly called Ethernet, is, by far, the most common type of wired LAN.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;MAN (Metropolitan Area Network)&lt;/li&gt;
          &lt;li&gt;WAN (Wide Area Network)&lt;/li&gt;
          &lt;li&gt;Internetworks
            &lt;ul&gt;
              &lt;li&gt;A collection of interconnected networks is called an internetwork or internet.&lt;/li&gt;
              &lt;li&gt;worldwide Internet (is one specific internet)&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;131-protocol-hierarchies&quot;&gt;1.3.1 Protocol Hierarchies&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;each layer passes data and control information to the layer immediately below it, until the lowest layer is reached.&lt;/li&gt;
  &lt;li&gt;It is common that different hosts use different implementations of the same protocol&lt;/li&gt;
  &lt;li&gt;the lower layers of a protocol hierarchy are frequently implemented in hardware or firmware&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;132-design-issues-for-the-layers&quot;&gt;1.3.2 Design Issues for the Layers&lt;/h2&gt;

&lt;h3 id=&quot;reliability&quot;&gt;Reliability&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;bits are damaged
    &lt;ul&gt;
      &lt;li&gt;errors:
        &lt;ul&gt;
          &lt;li&gt;fluke electrical noise,&lt;/li&gt;
          &lt;li&gt;random wireless signals,&lt;/li&gt;
          &lt;li&gt;hardware flaws,&lt;/li&gt;
          &lt;li&gt;software bugs and so on&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;solution: adding redundant information, used at low layers, to protect packets sent over individual links,and high layers, to check that the right contents were received
        &lt;ul&gt;
          &lt;li&gt;error detection
            &lt;ul&gt;
              &lt;li&gt;Information that is incorrectly received can then be retransmitted, until it is received correctly&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;error correction
            &lt;ul&gt;
              &lt;li&gt;where the correct message is recovered from the possibly incorrect bits that were originally received&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;finding a working path through a network
    &lt;ul&gt;
      &lt;li&gt;may be some links or routers that are broken&lt;/li&gt;
      &lt;li&gt;routing: The network should automatically make this decision&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-evolution-of-the-network&quot;&gt;the evolution of the network&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;protocol layering
    &lt;ul&gt;
      &lt;li&gt;internetworking, different network technologies often have different limitations .ex:
        &lt;ul&gt;
          &lt;li&gt;number messages
            &lt;ul&gt;
              &lt;li&gt;not all communication channels preserve the order of messages sent on them&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;differences in the maximum size of a message that the networks can transmit
            &lt;ul&gt;
              &lt;li&gt;disassembling, transmitting, and then reassembling messages&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;traffic jams&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;resource-allocation&quot;&gt;resource allocation&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;statistical multiplexing
    &lt;ul&gt;
      &lt;li&gt;share the bandwith dynamically, rather than by giving each host a fixed fraction&lt;/li&gt;
      &lt;li&gt;sharing based on the statistics of demand&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;how to keep a fast sender from swamping a slow receiver with data
    &lt;ul&gt;
      &lt;li&gt;flow control: feedback from the receiver&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;congestion: network is oversubscribed, overloading
    &lt;ul&gt;
      &lt;li&gt;too many computers want to send too much traffic&lt;/li&gt;
      &lt;li&gt;the network cannot deliver it all&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;resource
    &lt;ul&gt;
      &lt;li&gt;bandwidth&lt;/li&gt;
      &lt;li&gt;timeliness
        &lt;ul&gt;
          &lt;li&gt;live video&lt;/li&gt;
          &lt;li&gt;real-time&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;security&quot;&gt;security&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;eavesdropping[ secretly listening to the private conversation]
    &lt;ul&gt;
      &lt;li&gt;solution: provide confidentiality
        &lt;ul&gt;
          &lt;li&gt;authentication: prevent someone from impersonating someone else&lt;/li&gt;
          &lt;li&gt;integrity: prevent surreptitious changes to messages&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;133-connection-oriented-versus-connectionless-service&quot;&gt;1.3.3 Connection-Oriented Versus Connectionless Service&lt;/h2&gt;

&lt;h3 id=&quot;connection-oriented&quot;&gt;Connection-oriented&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Connection-oriented service is modeled after the telephone system.
    &lt;ul&gt;
      &lt;li&gt;establish&lt;/li&gt;
      &lt;li&gt;use&lt;/li&gt;
      &lt;li&gt;release&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;service is modeled after the telephone system.&lt;/li&gt;
  &lt;li&gt;A circuit is another name for a connection with associated resources
    &lt;ul&gt;
      &lt;li&gt;fixed bandwidth&lt;/li&gt;
      &lt;li&gt;in some case negotiation parameters
        &lt;ul&gt;
          &lt;li&gt;maximum message size&lt;/li&gt;
          &lt;li&gt;quality of service required&lt;/li&gt;
          &lt;li&gt;
            &lt;table&gt;
              &lt;tbody&gt;
                &lt;tr&gt;
                  &lt;td&gt;one side make proposal, the other accept&lt;/td&gt;
                  &lt;td&gt; &lt;/td&gt;
                  &lt;td&gt;reject&lt;/td&gt;
                  &lt;td&gt; &lt;/td&gt;
                  &lt;td&gt;make a counterproposal&lt;/td&gt;
                &lt;/tr&gt;
              &lt;/tbody&gt;
            &lt;/table&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;acts like a tube:
        &lt;ul&gt;
          &lt;li&gt;sender pushes at one end , receiver takes them at the other end&lt;/li&gt;
          &lt;li&gt;in most case the order is preserved: bits arrive in the order they were sent&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;connectionless-service&quot;&gt;Connectionless Service&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;connectionless service is modeled after the postal system
    &lt;ul&gt;
      &lt;li&gt;each msg carries the full destination address&lt;/li&gt;
      &lt;li&gt;a packet is a message at the network layer&lt;/li&gt;
      &lt;li&gt;store-and-forward switching：
        &lt;ul&gt;
          &lt;li&gt;nodes receive a message in full before sending it to the next&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;cut-through switching:
        &lt;ul&gt;
          &lt;li&gt;onward transmission of a message at a node starts before it is completely received&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;order is not consistant because of delayed&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;reliability-1&quot;&gt;reliability&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;both Connection-Oriented or Connectionless Service  can further be characterized by its reliability&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;implemented by having the receiver acknowledge the receipt of each msg&lt;/li&gt;
    &lt;li&gt;Reliable connection-oriented service has two minor variations:
      &lt;ul&gt;
        &lt;li&gt;message sequences
          &lt;ul&gt;
            &lt;li&gt;message boundaries are preserved&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;byte streams
          &lt;ul&gt;
            &lt;li&gt;no message boundaries&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Unreliable (meaning not acknowledged) connectionless service is often called datagram service
      &lt;ul&gt;
        &lt;li&gt;does not return an acknowledgement to the sender&lt;/li&gt;
        &lt;li&gt;dominant form in most networks
          &lt;ul&gt;
            &lt;li&gt;reliable communication (in our sense, that is,acknowledged) may not be available in a given layer
              &lt;ul&gt;
                &lt;li&gt;Ethernet does not provide reliable communication&lt;/li&gt;
                &lt;li&gt;many reliable services are built on top of an unreliable datagram service&lt;/li&gt;
                &lt;li&gt;the delays inherent in providing a reliable service may be unacceptable, especially in real-time applications such as multimedia&lt;/li&gt;
              &lt;/ul&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;134-service-primitives&quot;&gt;1.3.4 Service Primitives&lt;/h2&gt;

&lt;h3 id=&quot;a-service-is-formally-specified-by-a-set-of-primitives-operations-available-to-user-processes-to-access-the-service&quot;&gt;A service is formally specified by a set of primitives (operations) available to user processes to access the service&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;tell the service to perform some action or report on an action taken by a peer entity&lt;/li&gt;
  &lt;li&gt;system calls
    &lt;ul&gt;
      &lt;li&gt;cause a trap to kernel mode&lt;/li&gt;
      &lt;li&gt;send the necessary packets&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;primitives for connection-oriented service
&lt;a href=&quot;todo&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;steps&quot;&gt;steps&lt;/h3&gt;

&lt;h4 id=&quot;six-packets-are-required-to-complete-the-protocol&quot;&gt;six packets are required to complete the protocol&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;server executes LISTEN to indicate that it is prepared to accept incoming connections.
    &lt;ul&gt;
      &lt;li&gt;system call&lt;/li&gt;
      &lt;li&gt;server process blocked until a request for connection appears&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;send packets
    &lt;ul&gt;
      &lt;li&gt;1.client executes CONNECT to establish a connection with the server
        &lt;ul&gt;
          &lt;li&gt;sends a packet to the peer asking it to connect&lt;/li&gt;
          &lt;li&gt;parameter of server’s address&lt;/li&gt;
          &lt;li&gt;client suspended until a response&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;2.server can then establish the connection with the ACCEPT call
        &lt;ul&gt;
          &lt;li&gt;send a response to accept&lt;/li&gt;
          &lt;li&gt;arrival of response release the client
            &lt;ul&gt;
              &lt;li&gt;client &amp;amp;&amp;amp; server now both running and have a connection established&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;server to execute RECEIVE to prepare to accept the first request
    &lt;ul&gt;
      &lt;li&gt;block the server&lt;/li&gt;
      &lt;li&gt;when
        &lt;ul&gt;
          &lt;li&gt;normally immediately being released from the LISTEN&lt;/li&gt;
          &lt;li&gt;before the acknowledgement can get back to the client&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;send packets
    &lt;ul&gt;
      &lt;li&gt;3.client executes SEND to transmit its request
        &lt;ul&gt;
          &lt;li&gt;client: followed by execution of RECEIVE to get the reply&lt;/li&gt;
          &lt;li&gt;server: arrivial of request unblock the server to handle the request&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;4.server: use SEND to return the answer
        &lt;ul&gt;
          &lt;li&gt;client: arrivial of the packet unblock the cient&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;additional requsts can go on(if have)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;send packets
    &lt;ul&gt;
      &lt;li&gt;5.client: when done, executes DISCONNECT to terminate the connection
        &lt;ul&gt;
          &lt;li&gt;an initial DISCONNECT is a blocking call, suspending the client&lt;/li&gt;
          &lt;li&gt;sending a packet to the server saying that the connection is no longer needed&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;6.server: gets the packet
        &lt;ul&gt;
          &lt;li&gt;issues a DISCONNECT of its own&lt;/li&gt;
          &lt;li&gt;acknowledging the client and releasing the connection&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;client receive the packet
        &lt;ul&gt;
          &lt;li&gt;client process is released&lt;/li&gt;
          &lt;li&gt;connection is broken&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;issues&quot;&gt;issues&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;timing can be wrong (e.g., the CONNECT is done before the LISTEN),&lt;/li&gt;
  &lt;li&gt;packets can get lost&lt;/li&gt;
  &lt;li&gt;why not connectionless:
    &lt;ul&gt;
      &lt;li&gt;in perfect world only two packets would be needed
        &lt;ul&gt;
          &lt;li&gt;request&lt;/li&gt;
          &lt;li&gt;reply&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;but
        &lt;ul&gt;
          &lt;li&gt;large messages in either direction (e.g., a megabyte file),&lt;/li&gt;
          &lt;li&gt;transmission errors,&lt;/li&gt;
          &lt;li&gt;lost packets&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;problems-of-connectionless&quot;&gt;problems of connectionless&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;if packets lost, how would the client know if some pieces were missing?&lt;/li&gt;
  &lt;li&gt;How would the client know whether the last packet actually received was really the last packet sent?&lt;/li&gt;
  &lt;li&gt;How could it tell packet 1 from the second file from a lost packet 1 from the first file that suddenly found its way to the client?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;135-services-vs-protocols&quot;&gt;1.3.5 services vs protocols&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;todo&quot;&gt;image&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;service
    &lt;ul&gt;
      &lt;li&gt;like api&lt;/li&gt;
      &lt;li&gt;is a set of primitives that a layer provides to the layer above it&lt;/li&gt;
      &lt;li&gt;relates to an interface between two layers
        &lt;ul&gt;
          &lt;li&gt;lower layer -&amp;gt; service provider&lt;/li&gt;
          &lt;li&gt;upper layer -&amp;gt; service user&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;protocol
    &lt;ul&gt;
      &lt;li&gt;like impl&lt;/li&gt;
      &lt;li&gt;relate to the packtets&lt;/li&gt;
      &lt;li&gt;is a set of rules relate to packets
        &lt;ul&gt;
          &lt;li&gt;governing the format and meaning of
            &lt;ul&gt;
              &lt;li&gt;the packets,&lt;/li&gt;
              &lt;li&gt;or messages that are exchanged by the peer entities within a layer.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Many older protocols did not distinguish the service from the protocol
    &lt;ul&gt;
      &lt;li&gt;a typical layer might have had a service primitive SEND PACKET with the user providing a pointer to a fully assembled packet.&lt;/li&gt;
      &lt;li&gt;all changes to the protocol were immediately visible to the users —– violate the rule/ a serious blunder&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;14-osi-model--tcpip-model&quot;&gt;1.4 OSI Model &amp;amp;&amp;amp; TCP/IP Model&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;osi
    &lt;ul&gt;
      &lt;li&gt;protocols not used any more&lt;/li&gt;
      &lt;li&gt;model itself quite general &amp;amp;&amp;amp; valid&lt;/li&gt;
      &lt;li&gt;features at each layer are still very important&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;TCP/IP
    &lt;ul&gt;
      &lt;li&gt;the model itself is not of much use&lt;/li&gt;
      &lt;li&gt;the protocols are widely used.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;141-osi&quot;&gt;1.4.1 OSI&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;developed by the International Standards Organization (ISO)&lt;/li&gt;
  &lt;li&gt;ISO OSI (Open Systems Interconnection) Reference Model
    &lt;ul&gt;
      &lt;li&gt;means open for communication with other systems&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;OSI model itself is not a network architecture
    &lt;ul&gt;
      &lt;li&gt;it does not specify the exact services and protocols to be used in each layer
        &lt;ul&gt;
          &lt;li&gt;just tell what each layers should do&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;produced standards for all layers
        &lt;ul&gt;
          &lt;li&gt;these are not part of refernce model itself&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;model(in part) widely used, protocols are long forgotten&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;141-osi-model-layers&quot;&gt;1.4.1 OSI model layers&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;&quot;&gt;image&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;physical-layer&quot;&gt;physical layer&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;concerned with transmitting raw bits&lt;/li&gt;
  &lt;li&gt;Typical questions
    &lt;ul&gt;
      &lt;li&gt;what electrical signals should be used to represent a 1 and a 0,&lt;/li&gt;
      &lt;li&gt;how many nanoseconds a bit lasts,&lt;/li&gt;
      &lt;li&gt;whether transmission may proceed simultaneously in both directions,&lt;/li&gt;
      &lt;li&gt;how the initial connection is established,&lt;/li&gt;
      &lt;li&gt;how it is torn down when both sides are finished,&lt;/li&gt;
      &lt;li&gt;how many pins the network connector has, and what each pin is used for.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;data-link-layer&quot;&gt;data link layer&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;transform a raw transmission facility into a line that appears free of undetected transmission errors
    &lt;ul&gt;
      &lt;li&gt;by masking the real errors so the network layer does not see them&lt;/li&gt;
      &lt;li&gt;break up the input data into data frames
        &lt;ul&gt;
          &lt;li&gt;transmit the frames sequentially&lt;/li&gt;
          &lt;li&gt;receiver confirms each frame by sending back an acknowledgement frame.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;issues
    &lt;ul&gt;
      &lt;li&gt;how to keep a fast transmitter from drowning a slow receiver in data.&lt;/li&gt;
      &lt;li&gt;some traffic regulation mechanism want to konw when the receiver can accept more data&lt;/li&gt;
      &lt;li&gt;Broadcast networks : how to control access to the shared channel.
        &lt;ul&gt;
          &lt;li&gt;A special sublayer added: medium access control sublayer&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-network-layer&quot;&gt;the network layer&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;controls the operations of the subnet
    &lt;ul&gt;
      &lt;li&gt;determining how packets are routed from source to destination.&lt;/li&gt;
      &lt;li&gt;handling congestion&lt;/li&gt;
      &lt;li&gt;the quality of service provided (delay, transit time, jitter, etc.&lt;/li&gt;
      &lt;li&gt;allow heterogeneous networks to be interconnected
        &lt;ul&gt;
          &lt;li&gt;different network may be different
            &lt;ul&gt;
              &lt;li&gt;in addressing&lt;/li&gt;
              &lt;li&gt;packet might be too large&lt;/li&gt;
              &lt;li&gt;protocol may differ&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-transport-layer&quot;&gt;the transport layer&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;basic function
    &lt;ul&gt;
      &lt;li&gt;accept data from above it,&lt;/li&gt;
      &lt;li&gt;split it up into smaller units if need be,&lt;/li&gt;
      &lt;li&gt;pass these to the network layer,&lt;/li&gt;
      &lt;li&gt;and ensure that the pieces all arrive correctly at the other end.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;determines what type of service to provide to the session layer, and, ultimately, to the users of the network–determined when connection is established
    &lt;ul&gt;
      &lt;li&gt;most popular: error-free point-to-point channel
        &lt;ul&gt;
          &lt;li&gt;delivers messages or bytes in the order in which they were sent.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;others
        &lt;ul&gt;
          &lt;li&gt;transporting of isolated messages with no guarantee about the order of delivery&lt;/li&gt;
          &lt;li&gt;the broadcasting of messages to multiple destinations.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;true end-to-end layer
    &lt;ul&gt;
      &lt;li&gt;carries data from source to destination
        &lt;ul&gt;
          &lt;li&gt;message headers&lt;/li&gt;
          &lt;li&gt;control message&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;lower layers not end-2-end
        &lt;ul&gt;
          &lt;li&gt;each protocols is between a machine and its immediate neighbors,&lt;/li&gt;
          &lt;li&gt;not between the ultimate source and destination machines,
            &lt;ul&gt;
              &lt;li&gt;separated by many routers&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-session-layer&quot;&gt;the session layer&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;allows users on different machines to establish sessions between them.
    &lt;ul&gt;
      &lt;li&gt;dialog control
        &lt;ul&gt;
          &lt;li&gt;(keeping track of whose turn it is to transmit),&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;token management
        &lt;ul&gt;
          &lt;li&gt;(preventing two parties from attempting the same critical operation simultaneously)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;synchronization
        &lt;ul&gt;
          &lt;li&gt;(checkpointing long transmissions to allow them to pick up from where they left off in the event of a crash and subsequent recovery).&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;presentation-layer&quot;&gt;presentation layer&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;concerned with the syntax and semantics of the information transmitted.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;application-layer&quot;&gt;Application Layer&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;ex. http&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;142-the-tcpip-reference-model&quot;&gt;1.4.2 The TCP/IP Reference Model&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;&quot;&gt;image&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;history&quot;&gt;history&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;ARPANET
    &lt;ul&gt;
      &lt;li&gt;using leased telephone lines&lt;/li&gt;
      &lt;li&gt;connect hundreds of universities and government&lt;/li&gt;
      &lt;li&gt;trouble with interworking with satellite and radio networks&lt;/li&gt;
      &lt;li&gt;a new reference architecture was needed –&amp;gt; tcp/ip
        &lt;ul&gt;
          &lt;li&gt;goals
            &lt;ul&gt;
              &lt;li&gt;connect multiple networks in a seamless way&lt;/li&gt;
              &lt;li&gt;be able to survive loss of subnet hardware(Soviet Union attack)&lt;/li&gt;
              &lt;li&gt;others:
                &lt;ul&gt;
                  &lt;li&gt;transferring files&lt;/li&gt;
                  &lt;li&gt;real-time speech transmission,&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-link-layer&quot;&gt;The Link Layer&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;describes what links such as serial lines and classic Ethernet must do to meet the needs of this connectionless internet layer.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-internet-layer&quot;&gt;The Internet Layer&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;linchpin that holds the whole architecture together&lt;/li&gt;
  &lt;li&gt;deliver IP packets where they are supposed to go
    &lt;ul&gt;
      &lt;li&gt;IP (Internet Protocol): official packet format and protoco&lt;/li&gt;
      &lt;li&gt;ICMP (Internet Control Message Protocol)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;issues
    &lt;ul&gt;
      &lt;li&gt;Packet routing&lt;/li&gt;
      &lt;li&gt;congestion&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-transport-layer-1&quot;&gt;the transport layer&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;allow peer entities on the source and destination hosts to carry on a conversation
    &lt;ul&gt;
      &lt;li&gt;end-to-end transport protocols
        &lt;ul&gt;
          &lt;li&gt;TCP(Transmission Control Protocol)
            &lt;ul&gt;
              &lt;li&gt;reliable connection-oriented protocol&lt;/li&gt;
              &lt;li&gt;handles flow control to make sure a fast sender cannot swamp a slow receiver&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;UDP (User Datagram Protocol)
            &lt;ul&gt;
              &lt;li&gt;unreliable, connectionless protocol&lt;/li&gt;
              &lt;li&gt;for applications that do not want TCP’s sequencing or flow control and wish to provide their own&lt;/li&gt;
              &lt;li&gt;widely used
                &lt;ul&gt;
                  &lt;li&gt;one-shot, client-server-type request-reply queries&lt;/li&gt;
                  &lt;li&gt;applications in which prompt delivery is more important than accurate delivery
                    &lt;ul&gt;
                      &lt;li&gt;such as transmitting speech or video.&lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-application-layer&quot;&gt;The Application Layer&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;virtual terminal (TELNET),&lt;/li&gt;
  &lt;li&gt;file transfer (FTP),&lt;/li&gt;
  &lt;li&gt;and electronic mail (SMTP)&lt;/li&gt;
  &lt;li&gt;Domain Name System (DNS)&lt;/li&gt;
  &lt;li&gt;HTTP, the protocol for fetching pages on the World Wide Web,&lt;/li&gt;
  &lt;li&gt;RTP, the protocol for delivering real-time media such as voice or movies&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;144-osi-vs-tcpip-compare-in-reference-modules-not-the-corresponding-protocol-stacks&quot;&gt;1.4.4 OSI vs TCP/IP [compare in reference modules not the corresponding protocol stacks]&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;layers:
    &lt;ul&gt;
      &lt;li&gt;osi: 4 layers&lt;/li&gt;
      &lt;li&gt;tcp/ip: 7 layers&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;both: layers up through and including the transport layer provide an end-to-end, network-independent transport service to processes wishing to communicate&lt;/li&gt;
  &lt;li&gt;OSI devised before the corresponding protocols&lt;/li&gt;
  &lt;li&gt;tcp/ip:protocols come first,
    &lt;ul&gt;
      &lt;li&gt;model was really just a description of the existing protocols&lt;/li&gt;
      &lt;li&gt;no problems with protocols fitting the model, but model did not fit any other protocol stacks
        &lt;ul&gt;
          &lt;li&gt;it was not especially useful for describing other, non-TCP/IP networks.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;three-concepts-are-central-to-the-osi-model&quot;&gt;Three concepts are central to the OSI model:&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;Services.[methods , operations]
        &lt;ul&gt;
          &lt;li&gt;tells what the layer does,&lt;/li&gt;
          &lt;li&gt;not how entities above it access it or how the layer works.&lt;/li&gt;
          &lt;li&gt;It defines the layer’s semantics.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;Interfaces.[methods’ parameter &amp;amp;&amp;amp; result]
        &lt;ul&gt;
          &lt;li&gt;tells the processes above it how to access it&lt;/li&gt;
          &lt;li&gt;specific parameters&lt;/li&gt;
          &lt;li&gt;not or how the layer works.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;Protocols.[code internal]
        &lt;ul&gt;
          &lt;li&gt;the layer’s own business.&lt;/li&gt;
          &lt;li&gt;can use any protocols to finish its work&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-tcpip-model-did-not-originally-clearly-distinguish-between-services-interfaces-and-protocols&quot;&gt;The TCP/IP model did not originally clearly distinguish between services, interfaces, and protocols&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;ex. the only real services offered by the internet layer are SEND IP PACKET and RECEIVE IP PACKET&lt;/li&gt;
  &lt;li&gt;the protocols in the OSI model compare that in the TCP/IP model
    &lt;ul&gt;
      &lt;li&gt;better hidden&lt;/li&gt;
      &lt;li&gt;replaced relatively easily as the technology changes&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;connectionless-vs-connection-oriented&quot;&gt;connectionless vs connection-oriented&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;osi
    &lt;ul&gt;
      &lt;li&gt;support both in network layer&lt;/li&gt;
      &lt;li&gt;only connection-oriented in transport layer&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;tcp/ip
    &lt;ul&gt;
      &lt;li&gt;connectionless in network layer&lt;/li&gt;
      &lt;li&gt;both in transport layer
        &lt;ul&gt;
          &lt;li&gt;giving the user a choice–important for simple request-response protocols&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;145-critique-of-osi&quot;&gt;1.4.5 critique of osi&lt;/h2&gt;

&lt;h3 id=&quot;bad-timing&quot;&gt;bad timing&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;TCP/IP protocols were already in widespread use by research universities by the time the OSI protocols appeared&lt;/li&gt;
  &lt;li&gt;When OSI came around, they did not want to support a second protocol stack until they were forced to&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bad-technology&quot;&gt;bad technology&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;seven layers was more political than technical, and two of the layers
    &lt;ul&gt;
      &lt;li&gt;(session and presentation) are nearly empty,&lt;/li&gt;
      &lt;li&gt;(data link and network) are overfull.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;extraordinarily complex
    &lt;ul&gt;
      &lt;li&gt;difficult to implement and inefficient in operation&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;functions, such as addressing, flow control, and error control, reappear again and again in each layer.
    &lt;ul&gt;
      &lt;li&gt;unnecessary and inefficient.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bad-implementations&quot;&gt;bad implementations&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;implementations were huge, unwieldy, and slow.&lt;/li&gt;
  &lt;li&gt;In contrast, one of the first implementations of TCP/IP was part of Berkeley UNIX and was quite good &amp;amp;&amp;amp; free&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bad-politics&quot;&gt;bad politics&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;TCP/IP was thought as part of UNIX&lt;/li&gt;
  &lt;li&gt;osi supported by the government but not work&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;146-critique-of-tcpip&quot;&gt;1.4.6 critique of tcp/ip&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;not clearly distinguish the concepts of services, interfaces, and protocols.
    &lt;ul&gt;
      &lt;li&gt;not much of a guide for designing new networks using new technologies&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;the TCP/IP model is not at all general and is poorly suited to describing any protocol stack other than TCP/IP.
    &lt;ul&gt;
      &lt;li&gt;ex: completely impossible to use the TCP/IP model to describe Bluetooth&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;the link layer is not a layer
    &lt;ul&gt;
      &lt;li&gt;it is an interface between the network and data link layer&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;does not distinguish between the physical and data link layers.
    &lt;ul&gt;
      &lt;li&gt;physical layer:
        &lt;ul&gt;
          &lt;li&gt;copper wire, fiber optics, and wireless communication&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;data link layer:
        &lt;ul&gt;
          &lt;li&gt;delimit the start and end of frames and get them from one side to the other with the desired degree of reliability.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;some protocols are ad hoc,
    &lt;ul&gt;
      &lt;li&gt;ex. TELNET–The virtual terminal protocol
        &lt;ul&gt;
          &lt;li&gt;was designed for a ten-character-per-second mechanical Teletype terminal.&lt;/li&gt;
          &lt;li&gt;knows nothing of graphical user interfaces and mice&lt;/li&gt;
          &lt;li&gt;but still in used some 30 years later&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Ad hoc是拉丁文常用短语中的一个短语。这个短语的意思是“特设的、特定目的的（地）、即席的、临时的、将就的、专案的”。这个短语通常用来形容一些特殊的、不能用于其它方面的的，为一个特定的问题、任务而专门设定的解决方案&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;151-the-internet&quot;&gt;1.5.1 the internet&lt;/h2&gt;

&lt;h3 id=&quot;not-really-a-network-at-all&quot;&gt;not really a network at all&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;a vast collection of different networks
    &lt;ul&gt;
      &lt;li&gt;use certain common protocols&lt;/li&gt;
      &lt;li&gt;provide certain common services&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-arpanet&quot;&gt;The ARPANET&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;1950 DoD wants a command-and-control network that could survive a nuclear war.
    &lt;ul&gt;
      &lt;li&gt;telephone network&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;1960s, Baran proposed using digital packet-switching technology. AT&amp;amp;T dismissed&lt;/li&gt;
  &lt;li&gt;1957,  Soviet Union launch of the first artificial satellite, Sputnik–beat US
    &lt;ul&gt;
      &lt;li&gt;President Eisenhower–ARPA, the Advanced Research Projects Agency.
        &lt;ul&gt;
          &lt;li&gt;1967, ARPA – ARPANET (minicomputers + IMPs[Interface Message Processors])
            &lt;ul&gt;
              &lt;li&gt;first electronic storeand-forward packet-switching network&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;NPL system – National Physical Laboratory in England
            &lt;ul&gt;
              &lt;li&gt;demonstrated that packet switching could be made to work&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;an experimental network went online
    &lt;ul&gt;
      &lt;li&gt;1969 with four nodes: at UCLA, UCSB, SRI, and the University of Utah.
        &lt;ul&gt;
          &lt;li&gt;all had a large number of ARPA contracts&lt;/li&gt;
          &lt;li&gt;all had different and completely incompatible host computers (just to make it more fun).&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;ARPA also funded research on the use of satellite networks and mobile packet radio networks&lt;/li&gt;
      &lt;li&gt;demonstrated that the existing ARPANET protocols were not suitable for running over different networks
        &lt;ul&gt;
          &lt;li&gt;1974–TCP/IP was specifically designed to handle communication over internetworks&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ARPA awarded several contracts to implement TCP/IP on different computer platforms,
    &lt;ul&gt;
      &lt;li&gt;IBM, DEC, and HP systems, as well as for Berkeley UNIX.&lt;/li&gt;
      &lt;li&gt;Berkeley UNIX–rewrote TCP/IP with a new programming interface called sockets for the upcoming 4.2BSD release of Berkeley UNIX&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;1980s, additional networks, especially LANs, connected to the ARPANET
    &lt;ul&gt;
      &lt;li&gt;DNS(Domain Name System) was created&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;nsfnet&quot;&gt;NSFNET&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;1970s,  NSF (the U.S. National Science Foundation) saw enormous impact of ARPANET
    &lt;ul&gt;
      &lt;li&gt;fund the Computer Science Network (CSNET) in 1981,
        &lt;ul&gt;
          &lt;li&gt;have to have a research contract with the DoD to get on ARPANET, many have no contract&lt;/li&gt;
          &lt;li&gt;connect to ARPANET via dial-up and leased lines&lt;/li&gt;
          &lt;li&gt;backbone network to connect supercomputer centers
            &lt;ul&gt;
              &lt;li&gt;Each supercomputer given a microcomputer called a fuzzball
                &lt;ul&gt;
                  &lt;li&gt;fuzzball connected with 56kb lines to form subnet
                    &lt;ul&gt;
                      &lt;li&gt;same hardware technology the ARPANET used&lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                  &lt;li&gt;fuzzball use TCP/IP right from the start—first TCP/IP WAN&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;NSFNET: the complete network
        &lt;ul&gt;
          &lt;li&gt;funded some regional networks connected to the backbone&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;NSF encouraged MERIT, MCI, and IBM to form a nonprofit corporation, ANS (Advanced Networks and Services)
        &lt;ul&gt;
          &lt;li&gt;ANS took over NSFNET and upgraded to form ANSNET&lt;/li&gt;
          &lt;li&gt;5 years later sold to America Online&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;NSF awarded contracts to four different network operators to establish a NAP (Network Access Point)
        &lt;ul&gt;
          &lt;li&gt;To ease the transition &amp;amp;&amp;amp; make sure regional networks could communicate with each other&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;1990s,  many other countries and regions also built national research networks,
    &lt;ul&gt;
      &lt;li&gt;often patterned on the ARPANET and NSFNET&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;151-architecture-of-the-internet&quot;&gt;1.5.1 Architecture of the Internet&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;ISP: Internet Service Provider&lt;/li&gt;
  &lt;li&gt;DSL: Digital Subscriber Line
    &lt;ul&gt;
      &lt;li&gt;DSL modem
        &lt;ul&gt;
          &lt;li&gt;modem is short for ‘modulator demodulator’ and refers to any device that converts between digital bits and analog signals.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;DSLAM (Digital Subscriber Line Access Multiplexer)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;DSL + telephone line : dial-up
    &lt;ul&gt;
      &lt;li&gt;limited to 56 kbps&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;DSL + cable : much greater&lt;/li&gt;
  &lt;li&gt;FTTH (Fiber to the Home)
    &lt;ul&gt;
      &lt;li&gt;optical fiber, 光纤&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;POP (Point of Presence)
    &lt;ul&gt;
      &lt;li&gt;the ISP’s POP:   locaiton at which customer packets enter the ISP network for service&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;TV system
    &lt;ul&gt;
      &lt;li&gt;cable modem&lt;/li&gt;
      &lt;li&gt;CMTS (Cable Modem Termination System)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ISP’s POP (Point of Presence).&lt;/li&gt;
  &lt;li&gt;backbone
    &lt;ul&gt;
      &lt;li&gt;long-distance transmission lines that interconnect routers at POPs in the different cities that the ISPs serve&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;IXPs (Internet eXchange Points)
    &lt;ul&gt;
      &lt;li&gt;ISPs connect their networks to exchange traffic at IXPs&lt;/li&gt;
      &lt;li&gt;Basically, an IXP is a room full of routers,
        &lt;ul&gt;
          &lt;li&gt;at least one per ISP&lt;/li&gt;
          &lt;li&gt;A LAN in the room connects all the routers&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;a small ISP might pay a larger ISP for Internet connectivity&lt;/li&gt;
      &lt;li&gt;two large ISPs might decide to exchange traffic&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;packet’s path
    &lt;ul&gt;
      &lt;li&gt;depends on the peering choices of the ISPs
        &lt;ul&gt;
          &lt;li&gt;with destination ISP :directly to its peer&lt;/li&gt;
          &lt;li&gt;or else route the packet to the nearest paid transit provider&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;tier 1 ISPs
    &lt;ul&gt;
      &lt;li&gt;form the backbone of the Internet&lt;/li&gt;
      &lt;li&gt;thousands of routers connected by high-bandwidth fiber optic links&lt;/li&gt;
      &lt;li&gt;AT&amp;amp;T, Sprint…&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;data centers
    &lt;ul&gt;
      &lt;li&gt;Google, Yahoo…&lt;/li&gt;
      &lt;li&gt;server farm: rack upon rack of machines&lt;/li&gt;
      &lt;li&gt;Colocation/hosting (机器托管)
        &lt;ul&gt;
          &lt;li&gt;short, fast connections can be made between the servers and the ISP backbones&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;152-mobile-phone-networks&quot;&gt;1.5.2 Mobile Phone Networks&lt;/h2&gt;

&lt;h3 id=&quot;generation&quot;&gt;generation&lt;/h3&gt;

&lt;h4 id=&quot;amps--advanced-mobile-phone-system--1g&quot;&gt;AMPS : Advanced Mobile Phone System , 1G&lt;/h4&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;- transmitted voice calls as continuously varying(Analog) signals
- each voice call on a specific frequency band
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;gsm--global-system-for-mobile-communications&quot;&gt;GSM : Global System for Mobile communications&lt;/h4&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;- transmitting voice calls in digital form #### UMTS (Universal Mobile Telecommunications System) || WCDMA (Wideband Code Division Multiple Access)
- offer both digital voice and broadband digital data services
- each cell to use all frequencies,
- a tolerable level of interference to the neighboring cells.
- based on Code Division Multiple Access (CDMA)
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;radio-access-network&quot;&gt;radio access network&lt;/h4&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;- cellular base station
- controller node or RNC (Radio Network Controller)
    - controls how the spectrum is used.
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;core-network-carries-the-traffic-for-the-radio-access-network&quot;&gt;core network: carries the traffic for the radio access network&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;UMTS core network evolved from 2G GSM system’s core network
    &lt;ul&gt;
      &lt;li&gt;connectionless subnets–packet networks
        &lt;ul&gt;
          &lt;li&gt;if too many packets, router will choke and lose packets
            &lt;ul&gt;
              &lt;li&gt;sender will resend but service will be jerky&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;connection-oriented subnets–circuit networks
        &lt;ul&gt;
          &lt;li&gt;set up establishes a route
            &lt;ul&gt;
              &lt;li&gt;all words or packets follow the same route&lt;/li&gt;
              &lt;li&gt;if a line or switch on the path goes down, call is aborted&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;support quality of service more easily
            &lt;ul&gt;
              &lt;li&gt;subnet can reserve resources(link bandwidth, switch buffer space, CPU)&lt;/li&gt;
              &lt;li&gt;if resource is insufficient, call will be rejected&lt;/li&gt;
              &lt;li&gt;once a connection is connected, connection would get good service&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;old mobile phone networks–connectionless
    &lt;ul&gt;
      &lt;li&gt;MSC (Mobile Switching Center), GMSC (Gateway Mobile Switching Center)&lt;/li&gt;
      &lt;li&gt;MGW (Media Gateway) elements that set up connections over a circuit-switched core network such as the PSTN (Public Switched Telephone Network).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;GPRS(General Packet Radio Service)
    &lt;ul&gt;
      &lt;li&gt;ran at tens of kbps&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;UMTS core network nodes connect directly to a packet-switched network
    &lt;ul&gt;
      &lt;li&gt;SGSN (Serving GPRS Support Node) and the GGSN (Gateway GPRS Support Node)&lt;/li&gt;
      &lt;li&gt;voice calls over a packet data network&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;issues-1&quot;&gt;issues&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;handover
    &lt;ul&gt;
      &lt;li&gt;soft handover
        &lt;ul&gt;
          &lt;li&gt;connect to the new base station before disconnecting from the old base station&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;hard handover&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;how to find a mobile in the first place when there is an incoming call
    &lt;ul&gt;
      &lt;li&gt;Each mobile phone network has a HSS (Home Subscriber Server)
        &lt;ul&gt;
          &lt;li&gt;the location of each subscriber,&lt;/li&gt;
          &lt;li&gt;profile information that is used for authentication and authorization&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;security
    &lt;ul&gt;
      &lt;li&gt;SIM card, short for Subscriber Identity Module
        &lt;ul&gt;
          &lt;li&gt;authenticate subscribers&lt;/li&gt;
          &lt;li&gt;cryptographic keys on the SIM card are used to encrypt transmissions&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;153-wifi-80211&quot;&gt;1.5.3 wifi, 802.11&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;operate in unlicensed bands such as the ISM (Industrial, Scientific, and Medical) bands
    &lt;ul&gt;
      &lt;li&gt;defined by ITU-R (e.g., 902-928 MHz, 2.4-2.5 GHz, 5.725-5.825 GHz).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;two style
    &lt;ul&gt;
      &lt;li&gt;Wired network with APs(access points)&lt;/li&gt;
      &lt;li&gt;ad hoc network: clients talk directly&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;multipath fading
    &lt;ul&gt;
      &lt;li&gt;radio signals reflected off solid objects
        &lt;ul&gt;
          &lt;li&gt;multiple echoes of a transmission
            &lt;ul&gt;
              &lt;li&gt;cancel&lt;/li&gt;
              &lt;li&gt;reinforce&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;solutions:
        &lt;ul&gt;
          &lt;li&gt;path diersity: sending along multiple, independent paths&lt;/li&gt;
          &lt;li&gt;using different frequencies&lt;/li&gt;
          &lt;li&gt;repeating bits over different periods of time&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;multiple transmissions collide
    &lt;ul&gt;
      &lt;li&gt;CSMA (Carrier Sense Multiple Access)
        &lt;ul&gt;
          &lt;li&gt;Computers wait for a short random interval before transmitting, and defer their transmissions if they hear that someone else is already transmitting&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;security
    &lt;ul&gt;
      &lt;li&gt;WEP (Wired Equivalent Privacy)&lt;/li&gt;
      &lt;li&gt;WiFi Protected Access, initially called WPA but now replaced by WPA2&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;154-rfid-and-sensor-networks&quot;&gt;1.5.4 RFID and Sensor Networks&lt;/h2&gt;

&lt;h3 id=&quot;radio-frequency-identification-rfid&quot;&gt;Radio Frequency IDentification (RFID)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;consists of a small microchip with a unique identifier and an antenna that receives radio transmissions.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;battery&quot;&gt;battery&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;passive RFID
    &lt;ul&gt;
      &lt;li&gt;all of the energy needed to operate them is supplied in the form of radio waves by RFID readers.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;active RFID
    &lt;ul&gt;
      &lt;li&gt;there is a power source on the tag&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;distance&quot;&gt;distance&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;UHF RFID (Ultra-High Frequency RFID).
    &lt;ul&gt;
      &lt;li&gt;shipping pallets and some drivers licenses&lt;/li&gt;
      &lt;li&gt;backscatter：Tags communicate at distances of several meters by changing the way they reflect the reader signals&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;HF RFID (High Frequency RFID)
    &lt;ul&gt;
      &lt;li&gt;passport, credit cards, books, and noncontact payment systems&lt;/li&gt;
      &lt;li&gt;based on induction&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;LFRFID (Low Frequency RFID)
    &lt;ul&gt;
      &lt;li&gt;for animal tracking&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;problem&quot;&gt;problem&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;multiple tags
    &lt;ul&gt;
      &lt;li&gt;tags wait for a short random interval before responding with their identification&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;security
    &lt;ul&gt;
      &lt;li&gt;weak measures: like passwords&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;sensor-network&quot;&gt;sensor network&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Sensor nodes are small computers&lt;/li&gt;
  &lt;li&gt;self-organize to relay messages for each other&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;17-metric-units&quot;&gt;1.7 METRIC UNITS&lt;/h2&gt;

&lt;p&gt;https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fslideplayer.com%2F5675735%2F18%2Fimages%2F4%2FMetric%2BConversion%2BChart.jpg&amp;amp;refer=http%3A%2F%2Fslideplayer.com&amp;amp;app=2002&amp;amp;size=f9999,10000&amp;amp;q=a80&amp;amp;n=0&amp;amp;g=0n&amp;amp;fmt=jpeg?sec=1622127822&amp;amp;t=f468c0add4a2c6f3b629c2b95844ce87&lt;/p&gt;

&lt;h2 id=&quot;31-data-link-layer&quot;&gt;3.1 data link layer&lt;/h2&gt;

&lt;p&gt;uses the services of the physical layer to send and receive bits over communication channels&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Providing a well-defined service interface to the network layer.&lt;/li&gt;
  &lt;li&gt;Dealing with transmission errors.&lt;/li&gt;
  &lt;li&gt;Regulating the flow of data&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;311-services-provided-to-the-natwork-layer&quot;&gt;3.1.1 services provided to the natwork layer&lt;/h2&gt;

&lt;h3 id=&quot;unacknowledged-connectionless-service&quot;&gt;Unacknowledged connectionless service.&lt;/h3&gt;
&lt;p&gt;having the source machine send independent frames to the destination machine without having the destination machine acknowledge them&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;ex. Ethernet,&lt;/li&gt;
  &lt;li&gt;no logical connection&lt;/li&gt;
  &lt;li&gt;if a frame is lost, no attempt to detect the loss or recover&lt;/li&gt;
  &lt;li&gt;appropriate when the error rate is very low,  appropriate for real-time traffic, such as voice&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;acknowledged-connectionless-service&quot;&gt;Acknowledged connectionless service.&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;no logical connections&lt;/li&gt;
  &lt;li&gt;each frame sent is individually acknowledged&lt;/li&gt;
  &lt;li&gt;is useful over unreliable channels, such as wireless systems. ex.  802.11 (WiFi)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;acknowledged-connection-oriented-service&quot;&gt;Acknowledged connection-oriented service&lt;/h3&gt;

&lt;h4 id=&quot;providing-acknowledgements-in-the-data-link-layer-is-just-an-optimization-never-a-requirement&quot;&gt;providing acknowledgements in the data link layer is just an optimization, never a requirement&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;can send packets and wait for ack, resend when expired
    &lt;ul&gt;
      &lt;li&gt;inefficient,&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;network layer does not know hardware parameters, and send a big packet(ex.10 frames, 2 lost):
    &lt;ul&gt;
      &lt;li&gt;links have a strict maximum frame length imposed by hardware&lt;/li&gt;
      &lt;li&gt;known propagation delays.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;On reliable channels, such as fiber, the overhead of a heavyweight data link protocol may be unnecessary,&lt;/li&gt;
  &lt;li&gt;but on (inherently unreliable) wireless channels it is well worth the cost&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;connection-oriented-1&quot;&gt;connection-oriented&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Each frame sent over the connection is numbered,&lt;/li&gt;
  &lt;li&gt;guarantees that each frame sent is indeed received.&lt;/li&gt;
  &lt;li&gt;guarantees that each frame is received exactly once and that all frames are received in the right order.&lt;/li&gt;
  &lt;li&gt;appropriate over long, unreliable links such as a satellite channel or a long-distance telephone circuit.
    &lt;ul&gt;
      &lt;li&gt;if connectionless, cause a frame to be sent and received several times, wasting bandwidth.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;312-framing&quot;&gt;3.1.2 framing&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;channel is noisy&lt;/li&gt;
  &lt;li&gt;Breaking up the bit stream into frames
    &lt;ul&gt;
      &lt;li&gt;Byte count.
        &lt;ul&gt;
          &lt;li&gt;无法解决乱序问题&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Flag bytes with byte stuffing.
        &lt;ul&gt;
          &lt;li&gt;two consecutive flag bytes indicate the end of one frame and the start of the next&lt;/li&gt;
          &lt;li&gt;insert special escape byte(ESC) to avoid interfering&lt;/li&gt;
          &lt;li&gt;flaw: tied to the use of 8-bit bytes&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Flag bits with bit stuffing.
        &lt;ul&gt;
          &lt;li&gt;framing done at the bit level&lt;/li&gt;
          &lt;li&gt;Each frame begins and ends with a special bit pattern, 01111110 or 0x7E in hexadecimal.
            &lt;ul&gt;
              &lt;li&gt;to avoid conflict in the body
                &lt;ul&gt;
                  &lt;li&gt;sender: stuffs 0, when encounters five consecutive 1s&lt;/li&gt;
                  &lt;li&gt;receiver: automatically destuffs the 0 bits when sees&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Physical layer coding violations.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/Users/thomasliao/Documents/github/liao123abc.github.io/images/bit_stuffing_mechanism.jpeg&quot; alt=&quot;bit stuffing&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A common pattern used for Ethernet and 802.11 is to have a frame begin with a well-defined pattern called a preamble.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;313-error-control&quot;&gt;3.1.3 Error Control&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;ensure that each frame is ultimately passed to the network layer at the destination exactly once, no more and no less&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;provide the sender with some feedback
    &lt;ul&gt;
      &lt;li&gt;positive ack: arrived&lt;/li&gt;
      &lt;li&gt;negative ack: something go wrong&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;if a frame vanish?
    &lt;ul&gt;
      &lt;li&gt;introducing timers
        &lt;ul&gt;
          &lt;li&gt;expire after an interval&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;if either the frame or the ack is lost?
    &lt;ul&gt;
      &lt;li&gt;just transmit the frame again&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;if sender transmit the same frame multiple times, receiver accept the same frame two or more time
    &lt;ul&gt;
      &lt;li&gt;assign sequence numbers to outgoing frames&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;314-flow-control&quot;&gt;3.1.4 flow control&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;a sender that systematically wants to transmit frames faster than the receiver can accept them.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;issues-2&quot;&gt;issues&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;sender: a fast, powerful computer and the receiver: a slow, low-end machine.
    &lt;ul&gt;
      &lt;li&gt;phone request a web page from powerful server&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;commonly-used-approaches&quot;&gt;commonly used approaches&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;feedback-based flow control
    &lt;ul&gt;
      &lt;li&gt;receivers send back information to the sender to send more data&lt;/li&gt;
      &lt;li&gt;or at least telling the sender how the receiver is doing&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;rate-based flow control
    &lt;ul&gt;
      &lt;li&gt;the protocol has a built-in mechanism that limits the rate at which senders may transmit data,&lt;/li&gt;
      &lt;li&gt;without using feedback from the receiver.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;feedback-vs-rate&quot;&gt;feedback vs rate&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Feedback-based schemes are seen at both the link layer and higher layers
    &lt;ul&gt;
      &lt;li&gt;more common:
        &lt;ul&gt;
          &lt;li&gt;the link layer hardware is designed to run fast enough that it does not cause loss.&lt;/li&gt;
          &lt;li&gt;hardware implementations of the link layer as NICs (Network Interface Cards) can handle frames as fast as they can arrive on the link
            &lt;ul&gt;
              &lt;li&gt;so handled by higher layers&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;various feedback-based flow control schemes: the same basic principle
        &lt;ul&gt;
          &lt;li&gt;well-defined rules about when a sender may transmit the next frame.&lt;/li&gt;
          &lt;li&gt;These rules often prohibit frames from being sent until the receiver has granted permission,&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;rate-based schemes are only seen as part of the transport layer&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;32-error-detection-and-correction&quot;&gt;3.2 ERROR DETECTION AND CORRECTION&lt;/h2&gt;

&lt;h3 id=&quot;strategies-dealing-with-errors&quot;&gt;strategies dealing with errors&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;error-correcting codes&lt;/td&gt;
          &lt;td&gt; &lt;/td&gt;
          &lt;td&gt;FEC (Forward Error Correction).&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
    &lt;ul&gt;
      &lt;li&gt;include enough redundant information to enable the receiver to deduce what the transmitted data must have been.&lt;/li&gt;
      &lt;li&gt;used On channels that are highly reliable, such as fiber
        &lt;ul&gt;
          &lt;li&gt;it is cheaper to use an error-detecting code and just retransmit the occasional block found to be faulty&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;seen in the physical layer, particularly for noisy channels&lt;/li&gt;
      &lt;li&gt;in higher layers, particularly for real-time media and content distribution&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;error-detecting codes
    &lt;ul&gt;
      &lt;li&gt;include only enough redundancy to allow the receiver to deduce that an error has occurred (but not which error)
        &lt;ul&gt;
          &lt;li&gt;have it request a retransmission.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;FEC is used on noisy channels because retransmissions are just as likely to be in error as the first transmission
        &lt;ul&gt;
          &lt;li&gt;wireless links: make many errors&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;commonly used in link, network, and transport layers&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Neither error-correcting codes nor error-detecting codes can handle all possible errors&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;321-error-correcting-codestodo&quot;&gt;3.2.1 Error-correcting codes–todo&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Hamming codes.&lt;/li&gt;
  &lt;li&gt;Binary convolutional codes.&lt;/li&gt;
  &lt;li&gt;Reed-Solomon codes.&lt;/li&gt;
  &lt;li&gt;Low-Density Parity Check codes.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;322-error-detecting-codestodo&quot;&gt;3.2.2 Error-Detecting Codes–todo&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Parity.&lt;/li&gt;
  &lt;li&gt;Checksums.&lt;/li&gt;
  &lt;li&gt;Cyclic Redundancy Checks (CRCs).&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;34-sliding-window&quot;&gt;3.4 sliding window&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;The network layer, in contrast, is always fed data in the proper order, regardless of the data link layer’s window size&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;each outbound frame contains a sequence number,ranging from 0 up to some maximum.&lt;/li&gt;
  &lt;li&gt;sender maintains a set of sequence numbers corresponding to frames it is permitted to send.
    &lt;ul&gt;
      &lt;li&gt;These frames are said to fall within the sending window&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;receiver also maintains a receiving window corresponding to the set of frames it is permitted to accept.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;sequence-number-in-sender&quot;&gt;sequence number in sender&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The sequence numbers within the sender’s window represent
    &lt;ul&gt;
      &lt;li&gt;frames that have been sent&lt;/li&gt;
      &lt;li&gt;or can be sent but are as yet not acknowledged.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;maintains a list of unacknowledged frames
    &lt;ul&gt;
      &lt;li&gt;when a new packet arrives
        &lt;ul&gt;
          &lt;li&gt;it is given the next highest sequence number,&lt;/li&gt;
          &lt;li&gt;the upper edge of the window is advanced by one&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;sequence-number-in-receiver&quot;&gt;sequence number in receiver&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;frame receive,
    &lt;ul&gt;
      &lt;li&gt;if (frame.sq == window.lowerEdge)
        &lt;ul&gt;
          &lt;li&gt;it is passed to network layer&lt;/li&gt;
          &lt;li&gt;window is rotated by one&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;any frame falling outside the window is discarded&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ack
    &lt;ul&gt;
      &lt;li&gt;a window size of 1 means that the data link layer only accepts frames in order,
        &lt;ul&gt;
          &lt;li&gt;but for larger windows this is not so&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;341-sliding-window-protocol&quot;&gt;3.4.1 Sliding Window Protocol&lt;/h2&gt;

&lt;h3 id=&quot;go-back-n&quot;&gt;go-back-n&lt;/h3&gt;
&lt;p&gt;is for the receiver simply to discard all subsequent frames, sending no acknowledgements for the discarded frames.&lt;/p&gt;

&lt;h3 id=&quot;selective-repeat&quot;&gt;selective repeat&lt;/h3&gt;
&lt;p&gt;a bad frame that is received is discarded, but any good frames received after it are accepted and buffered.&lt;/p&gt;

&lt;h3 id=&quot;flow-control&quot;&gt;flow control&lt;/h3&gt;

&lt;h3 id=&quot;error-control&quot;&gt;error control&lt;/h3&gt;

&lt;h2 id=&quot;4-the-medium-access-control-sublayer&quot;&gt;4 the medium access control sublayer&lt;/h2&gt;

&lt;h2 id=&quot;512-services-provided-to-the-transport-layer&quot;&gt;5.1.2 Services Provided to the Transport Layer&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;provides services to the transport layer&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;rules&quot;&gt;rules:&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The services should be independent of the router technology&lt;/li&gt;
  &lt;li&gt;transport layer should be shielded from the number, type, and topology of the routers present&lt;/li&gt;
  &lt;li&gt;network addresses should use a uniform numbering plan, even across LANs and WANs&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;two-camps&quot;&gt;two camps&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;connectionoriented service
    &lt;ul&gt;
      &lt;li&gt;routers’job is moving packets around and nothing else&lt;/li&gt;
      &lt;li&gt;host: error control(error detection and correction) &amp;amp;&amp;amp; flow control&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;connectionless service
    &lt;ul&gt;
      &lt;li&gt;represented by telephone companies&lt;/li&gt;
      &lt;li&gt;ATM vs IP&lt;/li&gt;
      &lt;li&gt;connection-oriented technologies
        &lt;ul&gt;
          &lt;li&gt;MPLS (MultiProtocol Label Switching)&lt;/li&gt;
          &lt;li&gt;VLANs&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;521-the-optimality-principle&quot;&gt;5.2.1 the optimality principle&lt;/h2&gt;
</description>
        <pubDate>Sun, 11 Apr 2021 00:00:00 +0800</pubDate>
        <link>https://thomasliao.cn/2021/04/11/computer-network/</link>
        <guid isPermaLink="true">https://thomasliao.cn/2021/04/11/computer-network/</guid>
        
        <category>computer network</category>
        
        <category>note</category>
        
        <category>Anki</category>
        
        
      </item>
    
      <item>
        <title>Encoding</title>
        <description>&lt;h2 id=&quot;ascii&quot;&gt;ASCII&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;http://www.robelle.com/library/smugbook/ascii.html&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;character encoding&lt;/li&gt;
  &lt;li&gt;short for: American Standard Code for Information Interchange&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ASCII 码一共规定了128个字符的编码&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Wordstar&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/en/e/e3/Wordstar_Screenshot.png&quot; alt=&quot;dominated the market in the early and mid-1980s&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;MS-DOS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://pic4.zhimg.com/80/fd6d090f634b0afbe69b8d33cf5e58a4_720w.jpg?source=1940ef5c&quot; alt=&quot;MS-DOS时代的MS Office&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;question&quot;&gt;question&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;“plain text == ascii == characters are 8 bits”?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;only-for-english&quot;&gt;only for english&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/1/1b/ASCII-Table-wide.svg/875px-ASCII-Table-wide.svg.png&quot; alt=&quot;table&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In ASCII, every letter, digits, and symbols that mattered were represented as a number between 32 and 127.&lt;/li&gt;
  &lt;li&gt;1 byte
    &lt;ul&gt;
      &lt;li&gt;只占用了一个字节的后面7位，最前面的一位统一规定为0
  	- 7位来编码，8位来传输&lt;/li&gt;
      &lt;li&gt;有些软件会使用第一位。
        &lt;ul&gt;
          &lt;li&gt;wordstar-indicate the last letter in a word&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;[0, 31] called unprintable
    &lt;ul&gt;
      &lt;li&gt;大部分已经废弃
        &lt;ul&gt;
          &lt;li&gt;but remain some :such as the carriage return, line feed and tab codes.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;used for control characters， 如
        &lt;ul&gt;
          &lt;li&gt;7 which made your computer beep&lt;/li&gt;
          &lt;li&gt;12 which caused the current page of paper to go flying out of the printer and a new one to be fed in&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;[32, 127] are printable–Ninety-five of the encoded characters
    &lt;ul&gt;
      &lt;li&gt;表示可打印的字符(a-z, A-Z, 0–9, +, -, /, “, ! etc.)&lt;/li&gt;
      &lt;li&gt;32-space&lt;/li&gt;
      &lt;li&gt;65-“A”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;不支持其他字符
    &lt;ul&gt;
      &lt;li&gt;没有带变音符的拉丁字母（如 é 和 ä ），也不支持像希腊字母（如 α、β、γ）、西里尔字母（如 Пушкин）这样的其他欧洲文字&lt;/li&gt;
      &lt;li&gt;更加不要说中文了&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;//make a bel
echo ^G
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;del-为什么删除键作为控制字符-编码为-127&quot;&gt;del 为什么删除键作为控制字符, 编码为 127&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;打孔机的纸带中，对应位为 0 就不打孔，对应位为 1 就打孔。&lt;/li&gt;
  &lt;li&gt;一卷全新空纸带上完全没有孔，自然表示全 0，也就对应于 ASCII 的控制字符 Null。&lt;/li&gt;
  &lt;li&gt;那在打孔机上打错字符时怎么办
    &lt;ul&gt;
      &lt;li&gt;纸带中不能将已打的孔填上，于是当打错字干脆将其全部打孔，表示这一个字符被省略或者删除。&lt;/li&gt;
      &lt;li&gt;全部打孔就是二进制的 7 个 1，对应十进制编码 127&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/0/0b/Creed_model_6S-2_paper_tape_reader.jpg/1920px-Creed_model_6S-2_paper_tape_reader.jpg&quot; alt=&quot;holes&quot; width=&quot;400&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;line-feed--carriage-reture&quot;&gt;Line Feed &amp;amp;&amp;amp; Carriage Reture&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/e4xm6.jpg&quot; alt=&quot;LFCR&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Line Feed
    &lt;ul&gt;
      &lt;li&gt;Classic Mac OS, OS-9, FLEX (and variants).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;CR+LF
    &lt;ul&gt;
      &lt;li&gt;DOS and Windows, and by Application Layer protocols such as FTP, SMTP, and HTTP&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;history
    &lt;ul&gt;
      &lt;li&gt;打字机要求”Carriage Return” + “Line Feed”
        &lt;ul&gt;
          &lt;li&gt;“Carriage Return”–把打印机头移到最前面&lt;/li&gt;
          &lt;li&gt;“Line Feed”移到新一行&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=n-eFFd5BmpU&quot;&gt;video&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;eof&quot;&gt;EOF&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;end of file的缩写，表示”文字流”（stream）的结尾。这里的”文字流”，可以是文件（file），也可以是标准输入（stdin）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;EOF不是特殊字符，而是一个定义在头文件stdio.h的常量，一般等于-1&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;err&quot;&gt;　#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EOF&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;　&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;　&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;　&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fgetc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;　　　　&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//do something&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;from-ascii-to-unicode&quot;&gt;from ascii to unicode&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;不同的国家有不同的字母，因此，哪怕它们都使用256个符号的编码方式，代表的字母却不一样&lt;/li&gt;
  &lt;li&gt;亚洲国家的文字，使用的符号就更多了，汉字就多达10万左右&lt;/li&gt;
  &lt;li&gt;世界上存在着多种编码方式，同一个二进制数字可以被解释成不同的符号&lt;/li&gt;
  &lt;li&gt;Unicode 当然是一个很大的集合，现在的规模可以容纳100多万个符号。
    &lt;ul&gt;
      &lt;li&gt;每个符号的编码都不一样&lt;/li&gt;
      &lt;li&gt;只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;question-1&quot;&gt;question&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Unicode 是16位编码？&lt;/li&gt;
  &lt;li&gt;每个字符占用16位？可以表示65,536个字符？&lt;/li&gt;
  &lt;li&gt;如何才能区别 Unicode 和 ASCII ?&lt;/li&gt;
  &lt;li&gt;计算机怎么知道三个字节表示一个符号，而不是分别表示三个符号呢？&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;unicode&quot;&gt;unicode&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;windows 通过charmap查询&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;character encodings&lt;/li&gt;
    &lt;li&gt;providing a unique code point—a number, not a glyph—for each character&lt;/li&gt;
    &lt;li&gt;leaves the visual rendering (size, shape, font, or style) to other software&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;utf-16&quot;&gt;utf-16&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;起源于UCS-2 (for 2-byte Universal Character Set)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;languages:
    &lt;ul&gt;
      &lt;li&gt;java&lt;/li&gt;
      &lt;li&gt;JavaScript/ECMAScript&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;system:
    &lt;ul&gt;
      &lt;li&gt;windows use it often
        &lt;ul&gt;
          &lt;li&gt;近两年向UTF-8靠近&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Unix-like systems not like it&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;encoding using 65,536 (216) values&lt;/li&gt;
  &lt;li&gt;2 bytes (16 bits) per character&lt;/li&gt;
  &lt;li&gt;不兼容ASCII&lt;/li&gt;
  &lt;li&gt;on web:
    &lt;ul&gt;
      &lt;li&gt;0.005% (less than 1 hundredth of 1 percent) of web pages&lt;/li&gt;
      &lt;li&gt;UTF-8, by comparison, is used by 97% of all web pages&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;high-endian UCS-2 or low-endian UCS-2&lt;/p&gt;

&lt;h2 id=&quot;utf-8-演进史&quot;&gt;UTF-8 演进史&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200609160034671.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x5ZkdlZWs=,size_16,color_FFFFFF,t_70&quot; alt=&quot;evolution&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;[ITA 2, FIELDATA]   ---&amp;gt;   ASCII  ----&amp;gt;  GB2313   ----&amp;gt;    Unicode[US-2, UTF-16]  -----&amp;gt;  Unicode[UTF-8]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;utf-8&quot;&gt;UTF-8&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;memory：1-4字节&lt;/li&gt;
  &lt;li&gt;最流行的编码方式
    &lt;ul&gt;
      &lt;li&gt;97% of all web pages&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;兼容ASCII
    &lt;ul&gt;
      &lt;li&gt;对于单字节的符号和ASCII一样&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i1.wp.com/convertcodes.com/wp-content/uploads/2018/11/code-point-bit.png?resize=504%2C126&amp;amp;ssl=1&quot; alt=&quot;code point conversion&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;解读&quot;&gt;解读&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;字节
    &lt;ul&gt;
      &lt;li&gt;如果一个字节的第一位是0，则这个字节单独就是一个字符；&lt;/li&gt;
      &lt;li&gt;如果第一位是1，则连续有多少个1，就表示当前字符占用多少个字节&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;对于单字节的符号，字节的第一位设为0&lt;/li&gt;
  &lt;li&gt;对于n字节的符号（n &amp;gt; 1），
    &lt;ul&gt;
      &lt;li&gt;第一个字节的前n位都设为1，&lt;/li&gt;
      &lt;li&gt;第n + 1位设为0，&lt;/li&gt;
      &lt;li&gt;后面字节的前两位一律设为10。&lt;/li&gt;
      &lt;li&gt;剩下的没有提及的二进制位，全部为这个符号的 Unicode 码&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;sample&quot;&gt;sample&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;windows打开charmap，搜索一个汉字&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200609161126959.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x5ZkdlZWs=,size_16,color_FFFFFF,t_70&quot; alt=&quot;convert&quot; width=&quot;1000&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;endianness-of-an-encoding&quot;&gt;endianness of an encoding&lt;/h2&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;//对于一个32位整数1，不同的CPU架构会有不同的存储方式：
00000000 00000000 00000000 00000001
//或者
00000001 00000000 00000000 00000000
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images.squarespace-cdn.com/content/v1/549dcda5e4b0a47d0ae1db1e/1490746414666-EM74IA60AFM16OEH9G22/ke17ZwdGBToddI8pDm48kOMlUb6YZjvz-j7uj5wTIAtZw-zPPgdn4jUwVcJE1ZvWQUxwkmyExglNqGp0IvTJZamWLI2zvYWH8K3-s_4yszcp2ryTI0HqTOaaUohrI8PICROjhJFkM8GI5jSypQ9qrB6ZUKEpH8g8X8GW3p0wQZI/image-asset.png&quot; alt=&quot;endianness&quot; width=&quot;400&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;大端&quot;&gt;大端&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;高位在前&lt;/li&gt;
  &lt;li&gt;最低位放在最后一个位置&lt;/li&gt;
  &lt;li&gt;TCP/IP 协议栈是按照 Big Endian 来设计的，而 X86 机器多按照 Little Endian 来设计的，因而发出去的时候需要做一个转换&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;小端&quot;&gt;小端&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;低位在前&lt;/li&gt;
  &lt;li&gt;最低位放在第一个位置&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;//UTF-8编码是变长的，用8~32位(1~4字节)表示，有固定的位置来表示是几个字节：
0xxxxxxx
110xxxxx 10xxxxxx
1110xxxx 10xxxxxx 10xxxxxx
11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
//字节头部识别就是前面的0，110，1110，11110表示字节数
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;bom&quot;&gt;BOM&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;BOM也是Unicode标准的一部分，有它特定的适用范围。&lt;/li&gt;
  &lt;li&gt;通常BOM是用来标示Unicode纯文本字节流的，用来提供一种方便的方法让文本处理程序识别读入的.txt文件是哪个Unicode编码（UTF-8，UTF-16BE，UTF-16LE）&lt;/li&gt;
  &lt;li&gt;Windows相对对BOM处理比较好，是因为Windows把Unicode识别代码集成进了API里，主要是CreateFile()。打开文本文件时它会自动识别并剔除BOM。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bombyte-order-mark&quot;&gt;bom(byte order mark)&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Unicode 不使用 U+FFFE，在文件开头加一个 BOM 即可区分各种不同编码&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;UTF-8 with bom
https://stackoverflow.com/questions/2223882/whats-the-difference-between-utf-8-and-utf-8-without-bom&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/proxy/_7X9TG6ddYuq-rDKdAb6Tfoo1lyrcJ2PvJhbWnoSqn_J31FFrr_RswtufICuRAk_1L40VFH8mseead1jhnNre4S0JBiIN5lmHyo&quot; alt=&quot;bom&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;UTF-32 编码
    &lt;ul&gt;
      &lt;li&gt;0x00 00 FE FF, 大端&lt;/li&gt;
      &lt;li&gt;0xFF FE 00 00, 小端&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;UTF-16
    &lt;ul&gt;
      &lt;li&gt;0xFE FF, 大端&lt;/li&gt;
      &lt;li&gt;0xFF FE, 小端&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;UTF-8
    &lt;ul&gt;
      &lt;li&gt;0xEF BB BF –《其实我无所谓》 &lt;img src=&quot;https://language.chinadaily.com.cn/images/attachement/jpg/site1/20150317/a41f726749f61671fee14c.jpg&quot; alt=&quot;convert&quot; width=&quot;100&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;辅助作用?
        &lt;ul&gt;
          &lt;li&gt;UTF-8 对BOM无要求
            &lt;ul&gt;
              &lt;li&gt;UTF-8没有大小端的困扰&lt;/li&gt;
              &lt;li&gt;bom可以标识输入流/文本以UTF-8编写，方便推测&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;jni&quot;&gt;JNI&lt;/h2&gt;

&lt;h3 id=&quot;在jni调用中我们经常用到getstringutfchars&quot;&gt;在jni调用中我们经常用到GetStringUTFChars&lt;/h3&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;JNIEXPORT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jobjectArray&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JNICALL&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;Java_com_xxx_symbolkit_symbol_jni_ELFJni_getSymsBySoFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JNIEnv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jclass&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jstring&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;so_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetStringUTFChars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//转码UTF-8&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//do something~~~~~~&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReleaseStringUTFChars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;字符串操作函数&quot;&gt;字符串操作函数&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;GetStringUTFChars
    &lt;ul&gt;
      &lt;li&gt;const char * GetStringUTFChars(JNIEnv *env, jstring string,jboolean *isCopy);&lt;/li&gt;
      &lt;li&gt;Returns a pointer to an array of bytes representing the string in modified UTF-8 encoding&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;GetStringChars
    &lt;ul&gt;
      &lt;li&gt;const char * GetStringChars(JNIEnv *env, jstring string,jboolean *isCopy);&lt;/li&gt;
      &lt;li&gt;Returns a pointer to the array of Unicode characters of the string
        &lt;ul&gt;
          &lt;li&gt;actually UTF-16&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;iscopy参数&quot;&gt;isCopy参数&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;JNI_FALSE
    &lt;ul&gt;
      &lt;li&gt;指向的是JVM中的同一份数据&lt;/li&gt;
      &lt;li&gt;不一定会拷贝&lt;/li&gt;
      &lt;li&gt;本地代码决不能修改字符串的内容，
  	- 否则JVM中的原始字符串也会被修改，
  	- 这会打破JAVA语言中字符串不可变的规则&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;JNI_TRUE
    &lt;ul&gt;
      &lt;li&gt;一定会拷贝&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;一定要调用release
    &lt;ul&gt;
      &lt;li&gt;void ReleaseStringUTFChars(JNIEnv *env, jstring string,const char *utf);&lt;/li&gt;
      &lt;li&gt;void ReleaseStringChars(JNIEnv *env, jstring string, const jchar *chars);&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;不要对jnienv做任何假设&quot;&gt;不要对JNIEnv做任何假设&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.programmersought.com/article/8728233532/&quot;&gt;Java layer objects as opaque references&lt;strong&gt;(pointer&lt;/strong&gt;) passed to the JNI layer&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;jnienv-is-just-interface&quot;&gt;JNIEnv is just interface&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://taoste.github.io/dirtysalt/html/images/jnienv-interface-pointer.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;there-are-some-many-vms&quot;&gt;there are some many vms&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;虚拟机始祖：SunClassic/ExactVM&lt;/li&gt;
  &lt;li&gt;武林盟主：HotSpotVM&lt;/li&gt;
  &lt;li&gt;小家碧玉：Mobile/EmbeddedVM&lt;/li&gt;
  &lt;li&gt;天下第二：BEAJRockit/IBMJ9VM&lt;/li&gt;
  &lt;li&gt;软硬合璧：BEALiquidVM/AzulVM&lt;/li&gt;
  &lt;li&gt;挑战者：ApacheHarmony/GoogleAndroidDalvikVM&lt;/li&gt;
  &lt;li&gt;没有成功，但并非失败：MicrosoftJVM及其他&lt;/li&gt;
  &lt;li&gt;百家争鸣
    &lt;ul&gt;
      &lt;li&gt;JamVM：http://jamvm.sourceforge.net/·&lt;/li&gt;
      &lt;li&gt;CacaoVM：http://www.cacaovm.org/·&lt;/li&gt;
      &lt;li&gt;SableVM：http://www.sablevm.org/·&lt;/li&gt;
      &lt;li&gt;Kaffe：http://www.kaffe.org/·&lt;/li&gt;
      &lt;li&gt;JelatineJVM：http://jelatine.sourceforge.net/·&lt;/li&gt;
      &lt;li&gt;NanoVM：http://www.harbaum.org/till/nanovm/index.shtml·&lt;/li&gt;
      &lt;li&gt;MRP：https://github.com/codehaus/mrp·&lt;/li&gt;
      &lt;li&gt;MoxieJVM：http://moxie.sourceforge.net/&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;周志明. 深入理解Java虚拟机：JVM高级特性与最佳实践（第3版） (华章原创精品) (Chinese Edition)&lt;/p&gt;

&lt;h2 id=&quot;java-string--c-string-object&quot;&gt;java string &amp;amp;&amp;amp; c++ string object&lt;/h2&gt;

&lt;h3 id=&quot;stirng-literal&quot;&gt;stirng literal&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;actually calling intern() method on String
    &lt;ul&gt;
      &lt;li&gt;references internal pool of string objects
        &lt;ul&gt;
          &lt;li&gt;运行时常量池，在runtime期间亦可以动态添加&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;if same value exist, no new object could be created&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;“&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;GeeksForGeeks&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;”&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://img.javatt.com/6e/6e7d96afc9b175222aa43e3f7ef8eee5.png&quot; alt=&quot;endianness&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;string-object&quot;&gt;String object&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;JVM is forced to create a new string reference, even if “GeeksForGeeks” is in the reference pool.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;“&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;GeeksForGeeks&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;”&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;c-c&quot;&gt;c, c++&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;C++98 中有 char 和 wchar_t 两种不同的字符类型，
    &lt;ul&gt;
      &lt;li&gt;其中 char 的长度是单字节，&lt;/li&gt;
      &lt;li&gt;而 wchar_t 的长度不确定。
        &lt;ul&gt;
          &lt;li&gt;在 Windows 上它是双字节，只能代表 UTF-16，&lt;/li&gt;
          &lt;li&gt;而在 Unix 上一般是四字节，可以代表 UTF-32&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;C++11 引入了 char16_t 和 char32_t 两个独立的字符类型（不是类型别名），分别代表 UTF-16 和 UTF-32&lt;/li&gt;
  &lt;li&gt;C++20 将引入 char8_t 类型，进一步区分了可能使用传统编码的窄字符类型和 UTF-8 字符类型&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;java-string-char-to-byte&quot;&gt;java String char to byte&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;为了节约String占用的内存&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;jdk9新特性&lt;/li&gt;
  &lt;li&gt;在大多数Java程序的堆里，String占用的空间最大，并且绝大多数String只有Latin-1字符，这些Latin-1字符只需要1个字节就够了&lt;/li&gt;
  &lt;li&gt;before
    &lt;ul&gt;
      &lt;li&gt;JDK9之前，JVM因为String使用char数组存储，每个char占2个字节，所以即使字符串只需要1字节/字符，它也要按照2字节/字符进行分配，浪费了一半的内存空间&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;after
    &lt;ul&gt;
      &lt;li&gt;JDK9:一个字符串出来的时候判断，它是不是只有Latin-1字符，如果是，就按照1字节/字符的规格进行分配内存，如果不是，就按照2字节/字符的规格进行分配（UTF-16编码），提高了内存使用率&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;gbk-半角全角&quot;&gt;GBK, 半角&amp;amp;&amp;amp;全角&lt;/h2&gt;

&lt;h3 id=&quot;gbk&quot;&gt;GBK&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;最早的中文字符集标准是 1980 年的国标 GB2312，
    &lt;ul&gt;
      &lt;li&gt;其中收录了 6763 个常用汉字和 682 个其他符号&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;与 ASCII 兼容
    &lt;ul&gt;
      &lt;li&gt;由于 GB2312 中本身也含有 ASCII 中包含的字符，在使用中逐渐就形成了“半角”和“全角”的区别&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;国标字符集后面又有扩展，这个扩展后的字符集就是 GBK
    &lt;ul&gt;
      &lt;li&gt;中文版 Windows 使用的标准编码方式&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;原因&quot;&gt;原因&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;历史原因&lt;/li&gt;
  &lt;li&gt;排版&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;//全角
ｖａｌ　ｔｅｓｔｉｎｇ　＝　ｔｒｕｅ

//半角
val testing = true
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;全角与半角两个术语应该都是从日本来的&quot;&gt;「全角」与「半角」两个术语应该都是从日本来的&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;JIS X 4051《日本語文書の組版方法》里面，将全角定义为「汉字一文字的外框」，半角定义为「字宽为全角二分之一的文字之外框」&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;at-last-three-button-is-enough&quot;&gt;at last: three button is enough&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/8/89/WACsOperateTeletype.jpg&quot; alt=&quot;teleprinter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://5.imimg.com/data5/SI/LI/FK/SELLER-8118327/gaming-desktop-pc-custom-built-cpu--500x500.jpg&quot; alt=&quot;now&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://deliverassignment.com/wp-content/uploads/2020/06/compute-programmer.jpg&quot; alt=&quot;mac&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;人类社会不断发展，技术日新月异，三个按键足够了&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://149351115.v2.pressablecdn.com/wp-content/uploads/2021/03/the_key_angle-1536x1152.jpeg&quot; alt=&quot;holes&quot; width=&quot;400&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;references&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/12747722/what-is-the-difference-between-a-line-feed-and-a-carriage-return#:~:text=A%20line%20feed%20means%20moving,r%5Cn%20in%20text%20files.&quot;&gt;“line feed” and a “carriage return”?&lt;/a&gt;
&lt;a href=&quot;https://stackoverflow.com/questions/12747722/what-is-the-difference-between-a-line-feed-and-a-carriage-return#:~:text=A%20line%20feed%20means%20moving,r%5Cn%20in%20text%20files.&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://medium.com/@apiltamang/unicode-utf-8-and-ascii-encodings-made-easy-5bfbe3a1c45a&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;http://www.ruanyifeng.com/blog/2011/11/eof.html&quot;&gt;&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 10 Apr 2021 00:00:00 +0800</pubDate>
        <link>https://thomasliao.cn/2021/04/10/encoding/</link>
        <guid isPermaLink="true">https://thomasliao.cn/2021/04/10/encoding/</guid>
        
        
      </item>
    
      <item>
        <title>c++ notes</title>
        <description>&lt;h1 id=&quot;c-notes&quot;&gt;c++ Notes&lt;/h1&gt;

&lt;h2 id=&quot;1编译器&quot;&gt;1.编译器&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;msvc
    &lt;ul&gt;
      &lt;li&gt;windows&lt;/li&gt;
      &lt;li&gt;最历史悠久、最成熟，但也是最有历史包袱的编译器，微软&lt;/li&gt;
      &lt;li&gt;模板的支持则是它的软肋&lt;/li&gt;
      &lt;li&gt;2018 年宣布已全面支持 C++17 标准&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;gcc
    &lt;ul&gt;
      &lt;li&gt;跨平台&lt;/li&gt;
      &lt;li&gt;GCC 的第一个版本发布于 1987 年，是由自由软件运动的发起人 Richard Stallman（常常被缩写为 RMS）亲自写的&lt;/li&gt;
      &lt;li&gt;由于 GCC 是用 GPL 发布的，任何对 GCC 的修改都必须以 GPL 协议发布&lt;/li&gt;
      &lt;li&gt;应用最广的自由软件之一&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;clang
    &lt;ul&gt;
      &lt;li&gt;跨平台&lt;/li&gt;
      &lt;li&gt;错误信息的友好性是它的最大亮点&lt;/li&gt;
      &lt;li&gt;最新， LLVM项目的一部分&lt;/li&gt;
      &lt;li&gt;Clang 目前在 macOS 下是默认的 C/C++ 编译器&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2内联函数&quot;&gt;2.内联函数&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;如果一些函数被频繁调用，不断地有函数入栈，即函数栈，会造成栈空间或栈内存的大量消耗&lt;/li&gt;
  &lt;li&gt;关键字inline 必须与函数定义体放在一起才能使函数成为内联，仅将inline 放在函数声明前面不起任何作用&lt;/li&gt;
  &lt;li&gt;inline只适合涵数体内代码简单的函数数使用，不能包含复杂的结构控制语句例如while、switch，并且内联函数本身不能是直接递归函数(自己内部还调用自己的函数)。&lt;/li&gt;
  &lt;li&gt;内联是以代码膨胀（复制）为代价，仅仅省去了函数调用的开销，从而提高函数的执行效率&lt;/li&gt;
  &lt;li&gt;最好将内联函数定义放在头文件中&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3macro&quot;&gt;3.macro&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;#define 预处理指令用于创建符号常量：#define PI 3.14159
    &lt;ul&gt;
      &lt;li&gt;#define 来定义一个带有参数的宏，注意要多加括号：MIN(a,b) (a&amp;lt;b ? a : b)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;条件编译：#ifdef #define #endif&lt;/li&gt;
  &lt;li&gt;“#”置于identifier面前表示将identifier变成字符串字面值，“##”连接&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;4array&quot;&gt;4.array&lt;/h2&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;constexpr&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//if you don't know how many elements you want, use a vector&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ia1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hi&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;bye&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// remember #include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Animals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Elephant&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Fox&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Lion&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Tiger&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// remember #include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//char array is special&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'C'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'+'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'+'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//list initialization, no null;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CHECK_V&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'C'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'+'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'+'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//list initialization, explicit null&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CHECK_V&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a33&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;C++&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//null terminator added automatically&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CHECK_V&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a33&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a44&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Daniel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;无法通过变量来声明数组大小&quot;&gt;无法通过变量来声明数组大小&lt;/h3&gt;
&lt;p&gt;ex:&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;You can declare an array only with constant size, which can be deduced at compile time. 
variables’ values can be known only at runtime.&lt;/li&gt;
  &lt;li&gt;To elaborate, when you allocate memory on the stack, the size must be known at compile time. 
Since the arrays are local to the method, they will be placed on the stack.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;solution1&quot;&gt;solution1:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;You can either use constant value, or allocate memory in the heap using new,
 and deallocate when done using delete, like&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zod1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zo1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//.... other code&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zod1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;solution2&quot;&gt;solution2:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;use vector instead of array here also, and vector will take care of allocation on the heap.&lt;/li&gt;
  &lt;li&gt;As a side note, you should not pass vector by value, as the whole vector will be copied 
and passed as argument, and no change will be visible at the caller side.
 Use vector&lt;char&gt;&amp;amp; zodis1 instead.&lt;/char&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;5const&quot;&gt;5.const&lt;/h2&gt;

&lt;h3 id=&quot;type-declaration-before-or-after-const-are-the-same&quot;&gt;type declaration before or after const are the same&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;tips: read from right to left&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;//type declaration before or after const are the same&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//tips: read from right to left&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//ptr is a pointer to constant int&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//prt1 is a pointer to an int who is constant&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ptr3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//ptr3 is a const pointer to an int&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//both ptr4 and ptr5 are constant pointer to a constant int&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ptr4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ptr5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;stl-iterators-are-modeled-on-pointers&quot;&gt;stl iterators are modeled on pointers&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;tips: read from left to right&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;    &lt;span class=&quot;c1&quot;&gt;//const pointer&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//ok&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//++iter; //error&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//pointer to const data&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;const_iterator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//     *clter = 10; //error&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;//ok&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;declaring-something-const-helps-compilers-detect-usage-errors&quot;&gt;Declaring something const helps compilers detect usage errors.&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;const can be applied to objects at any scope,
    &lt;ul&gt;
      &lt;li&gt;function parameters&lt;/li&gt;
      &lt;li&gt;return types,&lt;/li&gt;
      &lt;li&gt;member functions as a whole.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;6make-sure-that-objects-are-initialized-before-used&quot;&gt;6.make sure that objects are initialized before used&lt;/h2&gt;

&lt;h3 id=&quot;initialized-is-not-guaranteed&quot;&gt;initialized is not guaranteed&lt;/h3&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//guaranteed to be initialized to zero&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// p's data members are sometimes guaranteed sometimes are not&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;rules are complicated(not worth)
    &lt;ul&gt;
      &lt;li&gt;in the c part of c++ , initialization would incur a runtime cost, not guaranteed
        &lt;ul&gt;
          &lt;li&gt;array isn’t guaranteed to be initialized&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;non-c parts of c++, might be guaranteed
        &lt;ul&gt;
          &lt;li&gt;a std::vector is guaranteed to be initialized&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;not-confuse-assignment-with-initialization&quot;&gt;not confuse assignment with initialization&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;assignment : inside the body of constructor&lt;/li&gt;
  &lt;li&gt;initializatio took place earlier
    &lt;ul&gt;
      &lt;li&gt;default constructors were automatically called prior to entering the body&lt;/li&gt;
      &lt;li&gt;but built-in type
        &lt;ul&gt;
          &lt;li&gt;no constuctor/destructor&lt;/li&gt;
          &lt;li&gt;no guarantee it was initialized prior to its assignment&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The rules of C++ stipulate that data members of an object are initialized before the body of a constructor is entered&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;use the member initialization list instead of assignments&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;//ex.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ABEntry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ABEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PhoneNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phones&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//these are now all initializations&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;theName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// copy-constructed&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;theAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//  copy-constructed&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;thePhones&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;phones&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//  copy-constructed&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;numTimesConsulted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// the ctor body is now empty&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// use the member initialization list even when you want to default-construct a data member&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ABEntry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ABEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;theName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// call theName’s default ctor;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;theAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// do the same for theAddress;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;thePhones&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// and for thePhones;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;numTimesConsulted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// but explicitly initialize&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// numTimesConsulted to zero&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;more efficient
    &lt;ul&gt;
      &lt;li&gt;assigiment first called default constructors then assigned new value
        &lt;ul&gt;
          &lt;li&gt;all the deafult constructors’ work are wasted&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;member initialization list avoids it
        &lt;ul&gt;
          &lt;li&gt;arguments in the initialization list are used as constructor arguments for the various data members
            &lt;ul&gt;
              &lt;li&gt;For most types, a single call to a copy constructor is more efficient — sometimes much more efficient — than a call to the default constructor followed by a call to the copy assignment operator&lt;/li&gt;
              &lt;li&gt;for  built-it types, no different between initialization and assignment
                &lt;ul&gt;
                  &lt;li&gt;for consistency, use member initialization too.&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;Sometimes the initialization list must be used,, even for built-in types.
                &lt;ul&gt;
                  &lt;li&gt;For example, data members that are const or are references must be initialized; they can’t be assigned&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;if too much data members
        &lt;ul&gt;
          &lt;li&gt;multiple initialization lists introduces undesirable repetition (in the lists) and boredom&lt;/li&gt;
          &lt;li&gt;moving the assignments to a single (typically private) function that all the constructors call&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;order-of-data-initialization&quot;&gt;order of data initialization&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;base classes are initialized before derived classes&lt;/li&gt;
  &lt;li&gt;and within a class,data members are initialized in the order in which they are declared
    &lt;ul&gt;
      &lt;li&gt;even if they are listed in a different order on the member initialization list&lt;/li&gt;
      &lt;li&gt;to avoid confusion: list members in the initialization list in the same order as they’re declared in the class&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;staitc-object&quot;&gt;staitc object&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;A static object is one that exists from the time it’s constructed until the end of the program.
    &lt;ul&gt;
      &lt;li&gt;excluded:Stack and heap-based objects&lt;/li&gt;
      &lt;li&gt;Included are
        &lt;ul&gt;
          &lt;li&gt;global objects,&lt;/li&gt;
          &lt;li&gt;objects defined at namespace scope,&lt;/li&gt;
          &lt;li&gt;objects declared static inside classes,&lt;/li&gt;
          &lt;li&gt;objects declared static inside functions,&lt;/li&gt;
          &lt;li&gt;objects declared static at file scope&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;problem&quot;&gt;problem&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;the relative order of initialization of nonlocal static objects defined in different translation units is undefined&lt;/li&gt;
  &lt;li&gt;it’s not only impossible to determine the right order of initialization,&lt;/li&gt;
  &lt;li&gt;it’s typically not even worth looking for special cases where it is possible to determine the right order.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;solution-replaced-non-local-static-objects-with-local-static-objects&quot;&gt;solution: replaced non-local static objects with local static objects.&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;move each non-local static object into its own function, where it’s declared static
    &lt;ul&gt;
      &lt;li&gt;Singleton pattern&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;This approach is founded on C++’s guarantee that local static objects are initialized when the object’s definition is first encountered during a call to that function.&lt;/li&gt;
  &lt;li&gt;As a bonus, if you never call a function emulating a non-local static object, you never incur the cost of constructing and destructing the object,
    &lt;ul&gt;
      &lt;li&gt;something that can’t be said for true non-local static objects&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;might cause multi-theads problem
    &lt;ul&gt;
      &lt;li&gt;one solution is to manually invoke all the reference-returning functions during the single-threaded startup portion of the program.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;7c--size-of-int-long-short&quot;&gt;7.C++ , size of int, long, short&lt;/h2&gt;

&lt;h3 id=&quot;decided-by-compiler&quot;&gt;decided by compiler&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;depends on the compiler and only on the compiler.&lt;/li&gt;
  &lt;li&gt;Hardware/OS is of no importance at all&lt;/li&gt;
  &lt;li&gt;The compiler is free to implement a hardware abstraction layer of any thickness and emulate absolutely anything&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;char--byte-octet&quot;&gt;char , byte, octet&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;char is always a byte , but it’s not always an octet
    &lt;ul&gt;
      &lt;li&gt;byte
        &lt;ul&gt;
          &lt;li&gt;A byte is the smallest addressable unit of memory (in most definitions),&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;octet
        &lt;ul&gt;
          &lt;li&gt;an octet is 8-bit unit of memory&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;sizeof(char) is always 1 for all implementations&lt;/li&gt;
  &lt;li&gt;CHAR_BIT macro in limits.h
    &lt;ul&gt;
      &lt;li&gt;defines the size of a byte for a platform&lt;/li&gt;
      &lt;li&gt;it is not always 8 bit.
        &lt;ul&gt;
          &lt;li&gt;16-bit, 32-bit bytes&lt;/li&gt;
          &lt;li&gt;others[ex. 7], have to deal with aligned and padding&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;size&quot;&gt;size&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;range
    &lt;ul&gt;
      &lt;li&gt;signed char: -127 to 127 (note, not -128 to 127; this accommodates 1’s-complement and sign-and-magnitude platforms)&lt;/li&gt;
      &lt;li&gt;unsigned char: 0 to 255&lt;/li&gt;
      &lt;li&gt;“plain” char: same range as signed char or unsigned char, implementation-defined&lt;/li&gt;
      &lt;li&gt;signed short: -32767 to 32767&lt;/li&gt;
      &lt;li&gt;unsigned short: 0 to 65535&lt;/li&gt;
      &lt;li&gt;signed int: -32767 to 32767&lt;/li&gt;
      &lt;li&gt;unsigned int: 0 to 65535&lt;/li&gt;
      &lt;li&gt;signed long: -2147483647 to 2147483647&lt;/li&gt;
      &lt;li&gt;unsigned long: 0 to 4294967295&lt;/li&gt;
      &lt;li&gt;signed long long: -9223372036854775807 to 9223372036854775807&lt;/li&gt;
      &lt;li&gt;unsigned long long: 0 to 18446744073709551615&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;rules
    &lt;ul&gt;
      &lt;li&gt;char, signed char, and unsigned char are at least 8 bits&lt;/li&gt;
      &lt;li&gt;signed short, unsigned short, signed int, and unsigned int are at least 16 bits&lt;/li&gt;
      &lt;li&gt;signed long and unsigned long are at least 32 bits&lt;/li&gt;
      &lt;li&gt;signed long long and unsigned long long are at least 64 bits&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ref&quot;&gt;ref&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/437470/type-to-use-to-represent-a-byte-in-ansi-c89-90-c/437640#437640&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://stackoverflow.com/questions/589575/what-does-the-c-standard-state-the-size-of-int-long-type-to-be&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://stackoverflow.com/questions/437470/type-to-use-to-represent-a-byte-in-ansi-c89-90-c/437640#437640&quot;&gt;&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 10 Apr 2021 00:00:00 +0800</pubDate>
        <link>https://thomasliao.cn/2021/04/10/c++-notes/</link>
        <guid isPermaLink="true">https://thomasliao.cn/2021/04/10/c++-notes/</guid>
        
        <category>c++</category>
        
        <category>note</category>
        
        <category>Anki</category>
        
        
      </item>
    
      <item>
        <title>Thread</title>
        <description>&lt;p&gt;“When you bow deeply to the universe, it bows back; when you call out the name of God, it echoes inside you.”
―Morihei Ueshiba&lt;/p&gt;

&lt;h1 id=&quot;thread&quot;&gt;Thread&lt;/h1&gt;

&lt;h3 id=&quot;creation&quot;&gt;Creation&lt;/h3&gt;
&lt;p&gt;There is 1 way to create a Thread but task can be assigned to Thread using 3 different ways either by using.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Runnable interface (run() method will be invoked)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ThreadDemo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//Lets create Task first to assign it to the Thread&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;ThreadTask&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threadTask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ThreadTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//Lets create a Thread and assign task to it.&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//Way to assign task to a Thread is by passing task object(Runnable) to Thread's constructor.&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;threadTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//Start a thread&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;thread1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ThreadTask&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Runnable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//Code present here will be executed in separate independent path.&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Thread class (run() method will be invoked)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ThreadDemo2&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//Code present here will be executed in separate independent path.&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//Lets create Task first to assign it to the Thread&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;ThreadDemo2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threadTask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ThreadDemo2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//Lets create a Thread and assign task to it.&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//Way to assign task to a Thread is by passing task object(Runnable) to Thread's constructor.&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;threadTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//Start a thread&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;thread1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Callable interface (call() method will be invoked)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ThreadDemo3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;ExecutorService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;executorService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Executors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newFixedThreadPool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;ThreadTask&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threadTask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ThreadTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resultObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;executorService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;threadTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resultObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ExecutionException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;executorService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;shutdown&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ThreadTask&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Callable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;SUCCESS&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;synchronized&quot;&gt;synchronized&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;方法声明时使用,放在范围操作符(public等)之后,返回类型声明(void等)之前.
即一次只能有一个线程进入该方法,其他线程要想在此时调用该方法,只能排队等候,当前线程(就是在synchronized方法内部的线程)执行完该方法后,别的线程才能进入.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;对某一代码块使用,
synchronized后跟括号,括号里是变量,这样,一次只有一个线程进入该代码块&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;synchronized后面括号里是一对象,
此时,线程获得的是对象锁.如果线程进入,则得到对象锁,那么别的线程在该类所有对象上的任何操作都不能进行.在对象级使用锁通常是一种比较粗糙的方法&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;synchronized后面括号里是类, 如，&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;synchronized(ArrayWithLockOrder.class)
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;如果线程进入,则线程在该类中所有操作不能进行,包括静态变量和静态方法&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;锁和对象的关系&quot;&gt;锁和对象的关系&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;锁是和对象相关联的，每个对象有一把锁，为了执行synchronized语句，线程必须能够获得synchronized语句中表达式指定的对象的锁，&lt;/li&gt;
  &lt;li&gt;一个对象只有一把锁，被一个线程获得之后它就不再拥有这把锁，线程在执行完synchronized语句后，将获得锁交还给对象。&lt;/li&gt;
  &lt;li&gt;在方法前面加上synchronized修饰符即可以将一个方法声明为同步化方法。同步化方法在执行之前获得一个锁。&lt;/li&gt;
  &lt;li&gt;在类方法前面加上synchronized，那么获得的锁是和声明方法的类相关的Class类对象的锁。如果这是一个实例方法，那么此锁是this对象的锁。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;notify-notifyall&quot;&gt;notify, notifyAll&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;wait()、notify()和notifyAll()方法是本地方法，并且为final方法，无法被重写。&lt;/li&gt;
  &lt;li&gt;调用某个对象的wait()方法能让当前线程阻塞，并且当前线程必须拥有此对象的monitor（即锁）&lt;/li&gt;
  &lt;li&gt;调用某个对象的notify()方法能够唤醒一个正在等待这个对象的monitor的线程，如果有多个线程都在等待这个对象的monitor，则只能唤醒其中一个线程；&lt;/li&gt;
  &lt;li&gt;调用notifyAll()方法能够唤醒所有正在等待这个对象的monitor的线程；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Warning:
单个生产者和消费者使用notify没有关系，但是多个的时候都要使用notifyAll&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;Clearly, notify wakes (any) one thread in the wait set, notifyAll wakes all threads in the waiting set.
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;极端情况下， 仅仅调用notify()会导致死锁&lt;/p&gt;

&lt;h3 id=&quot;waitnotify和notifyall方法是object类中声明的方法&quot;&gt;wait()、notify()和notifyAll()方法是Object类中声明的方法&lt;/h3&gt;
&lt;p&gt;为何这三个不是Thread类声明中的方法?
其实这个问题很简单，&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;由于每个对象都拥有monitor（即锁），所以让当前线程等待某个对象的锁，当然应该通过这个对象来操作了。&lt;/li&gt;
  &lt;li&gt;当前线程可能会等待多个线程的锁，如果通过线程来操作，就非常复杂了。&lt;/li&gt;
  &lt;li&gt;如果调用某个对象的wait()方法，当前线程必须拥有这个对象的monitor（即锁），因此调用wait()方法必须在同步块或者同步方法中进行（synchronized块或者synchronized方法）。&lt;/li&gt;
  &lt;li&gt;调用某个对象的wait()方法，相当于让当前线程交出此对象的monitor，然后进入等待状态，等待后续再次获得此对象的锁(Thread类中的sleep方法使当前线程暂停执行一段时间，从而让其他线程有机会继续执行，但它并不释放对象锁)&lt;/li&gt;
  &lt;li&gt;notify()方法能够唤醒一个正在等待该对象的monitor的线程，当有多个线程都在等待该对象的monitor的话，则只能唤醒其中一个线程，具体唤醒哪个线程则不得而知。&lt;/li&gt;
  &lt;li&gt;调用某个对象的notify()方法，当前线程也必须拥有这个对象的monitor，因此调用notify()方法必须在同步块或者同步方法中进行（synchronized块或者synchronized方法）。&lt;/li&gt;
  &lt;li&gt;nofityAll()方法能够唤醒所有正在等待该对象的monitor的线程，这一点与notify()方法是不同的。
这里要注意一点：notify()和notifyAll()方法只是唤醒等待该对象的monitor的线程，并不决定哪个线程能够获取到monitor。
一个线程被唤醒不代表立即获取了对象的monitor，只有等调用完notify()或者notifyAll()并退出synchronized块，释放对象锁后，其余线程才可获得锁执行。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;生产者消费者问题&quot;&gt;生产者消费者问题&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;use BlockQueue&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UseBlockQueue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TAG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UseBlockQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSimpleName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LinkedBlockingQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LinkedBlockingQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UseBlockQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Producer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Consumer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;UseBlockQueue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UseBlockQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Producer&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;nc&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Producer: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;nc&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;producer is interrupted!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Consumer&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                    &lt;span class=&quot;nc&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Consumer: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ie&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;nc&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;consumer is interrupted!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;use ReEntrantLock&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UseReentrantLock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TAG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UseReentrantLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSimpleName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MAX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Lock&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ReentrantLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Condition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;full&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newCondition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Condition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newCondition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UseReentrantLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Producer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Consumer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;UseReentrantLock&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UseReentrantLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Producer&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MAX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;nc&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;warning: list is full&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;full&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;await&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;nc&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Producer: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ie&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
                    &lt;span class=&quot;nc&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;producer is interrupted!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Consumer&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;nc&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;warning: it's empty!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;await&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;removeLast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                    &lt;span class=&quot;nc&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Consumer: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;full&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ie&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;nc&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;consumer is interrpted!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;use wait notify&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UseWaitNotify&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TAG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UseWaitNotify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSimpleName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storeHouse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MAX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UseWaitNotify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Producer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Consumer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Producer&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storeHouse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storeHouse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MAX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;nc&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;storeHouse is full , plz wait&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;storeHouse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                        &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storeHouse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;nc&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Producer put a Object to storeHouse&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                            &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;storeHouse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;notify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;nc&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Producer is interrupted&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Consumer&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storeHouse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storeHouse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;nc&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;storehouse is empty, plz wait&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;storeHouse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;storeHouse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;removeLast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                        &lt;span class=&quot;nc&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;consumer get a object from storehouse&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                        &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;storeHouse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;notify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                        &lt;span class=&quot;nc&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Producer is interrupted&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;UseWaitNotify&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UseWaitNotify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sun, 10 Sep 2017 22:18:38 +0800</pubDate>
        <link>https://thomasliao.cn/2017/09/10/Java-Thread/</link>
        <guid isPermaLink="true">https://thomasliao.cn/2017/09/10/Java-Thread/</guid>
        
        <category>Java</category>
        
        
      </item>
    
      <item>
        <title>Rxjava Guide By Jake Wharton</title>
        <description>&lt;p&gt;“When you bow deeply to the universe, it bows back; when you call out the name of God, it echoes inside you.”
―Morihei Ueshiba&lt;/p&gt;

&lt;h1 id=&quot;from-jake-wharton&quot;&gt;from Jake Wharton&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;usually do work when you start or stop listening.&lt;/li&gt;
  &lt;li&gt;Sysnchronous or asynchronous.&lt;/li&gt;
  &lt;li&gt;Single item, many items, or empty
    &lt;ul&gt;
      &lt;li&gt;single - network request&lt;/li&gt;
      &lt;li&gt;many - button click&lt;/li&gt;
      &lt;li&gt;empty - save file or database&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;terminates with an error or succeeds to completion&lt;/li&gt;
  &lt;li&gt;may never terminate&lt;/li&gt;
  &lt;li&gt;just an implementation of the Observer pattern&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;rxjava&quot;&gt;Rxjava&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;a set of classes for representing sources of data&lt;/li&gt;
  &lt;li&gt;a set of classes for listening to data sources&lt;/li&gt;
  &lt;li&gt;A set of methods for modifying and composing the data&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;source&quot;&gt;Source&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Usually do work when you start or stop listening.&lt;/li&gt;
  &lt;li&gt;Synchronous or asynchronous.&lt;/li&gt;
  &lt;li&gt;Single item, many items, or empty.&lt;/li&gt;
  &lt;li&gt;Terminates with an error or succeeds to completion.&lt;/li&gt;
  &lt;li&gt;May never terminate!&lt;/li&gt;
  &lt;li&gt;just an implementation of the Observer pattern&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;sources&quot;&gt;sources&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Observable&lt;T&gt;
&lt;/T&gt;    &lt;ul&gt;
      &lt;li&gt;Emits 0 to n items&lt;/li&gt;
      &lt;li&gt;Terminates with complete or error.&lt;/li&gt;
      &lt;li&gt;Does not have backpressure.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Flowable&lt;T&gt;
&lt;/T&gt;    &lt;ul&gt;
      &lt;li&gt;Emits 0 to n items&lt;/li&gt;
      &lt;li&gt;Terminates with complete or error.&lt;/li&gt;
      &lt;li&gt;Has backpressure&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;flowable-vs-observable&quot;&gt;Flowable vs Observable&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;backpressure allows you to control how fast a source emits items.&lt;/li&gt;
  &lt;li&gt;Rxjava 1.x added backpressure late in the design process&lt;/li&gt;
  &lt;li&gt;All types exposed backupressure but not all sources respected it&lt;/li&gt;
  &lt;li&gt;Backpressure, like interitance, must be designed for.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;single&quot;&gt;Single&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Either succeeds with an item or errors.&lt;/li&gt;
  &lt;li&gt;No backpressure support.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;completable&quot;&gt;Completable&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Either completes or errors. Has no items!&lt;/li&gt;
  &lt;li&gt;No backpressure support.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;maybe&quot;&gt;Maybe&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Either succeeds with an item, completes with no items, or errors. - No backpressure support.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;flowable-vs-observable-1&quot;&gt;Flowable vs Observable&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;—&lt;/th&gt;
      &lt;th&gt;Backpressure&lt;/th&gt;
      &lt;th&gt;No Backpressure&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;0…n items, complete / error&lt;/td&gt;
      &lt;td&gt;Flowable&lt;/td&gt;
      &lt;td&gt;Observable&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;item / complete/error&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;Maybe&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;item / error&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;Single&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;complete / error&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;Completable&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;source-specializations&quot;&gt;Source Specializations&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Encoding subsets of Observable into the type system
    &lt;ul&gt;
      &lt;li&gt;Single -item or error. think “scalar”&lt;/li&gt;
      &lt;li&gt;Completable - Complete or error, think “runnable”.&lt;/li&gt;
      &lt;li&gt;Maybe - Item, complete, or error. think “optional”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;points-&quot;&gt;points ?&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;create&lt;/li&gt;
  &lt;li&gt;dispose&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;operators&quot;&gt;Operators&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Manipulate or combine data in some way&lt;/li&gt;
  &lt;li&gt;Manipulate threading in some way.&lt;/li&gt;
  &lt;li&gt;Manipulate emissions in some way.&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Fri, 01 Sep 2017 12:47:08 +0800</pubDate>
        <link>https://thomasliao.cn/rxjava/2017/09/01/Rxjava-guide-by-Jake-Wharton/</link>
        <guid isPermaLink="true">https://thomasliao.cn/rxjava/2017/09/01/Rxjava-guide-by-Jake-Wharton/</guid>
        
        <category>Rxjava</category>
        
        
        <category>Rxjava</category>
        
      </item>
    
      <item>
        <title>Git Commands</title>
        <description>&lt;p&gt;“When you bow deeply to the universe, it bows back; when you call out the name of God, it echoes inside you.”
―Morihei Ueshiba&lt;/p&gt;

&lt;h1 id=&quot;git-usage&quot;&gt;git usage&lt;/h1&gt;

&lt;h2 id=&quot;git-terms&quot;&gt;git terms&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;state&lt;/th&gt;
      &lt;th&gt;description&lt;/th&gt;
      &lt;th&gt;section&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;committed&lt;/td&gt;
      &lt;td&gt;data is safely stored in your local database&lt;/td&gt;
      &lt;td&gt;Git directory-stores the metadata and object database for your project.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;modified&lt;/td&gt;
      &lt;td&gt;have changed the file but have not committed it to your database yet&lt;/td&gt;
      &lt;td&gt;working directory-a single checkout of one version of the project.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Staged&lt;/td&gt;
      &lt;td&gt;have marked a modified file in its current version to go into your next commit snapshot.&lt;/td&gt;
      &lt;td&gt;staging area&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;git-commands&quot;&gt;git commands&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;command&lt;/th&gt;
      &lt;th&gt;des&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;git checkout -b [name_of_your_new_branch]&lt;/td&gt;
      &lt;td&gt;Create the branch on your local machine and switch in this branch&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;git push -u origin [name_of_your_new_branch]&lt;/td&gt;
      &lt;td&gt;push new branch to remote origin&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;(on branch development)$git merge master, git checkout master, git merge development&lt;/td&gt;
      &lt;td&gt;Merge development branch with master&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;git branch -d the_local_branch&lt;/td&gt;
      &lt;td&gt;delete local branch&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;新建代码库&quot;&gt;新建代码库&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;在当前目录新建一个Git代码库
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git init
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;新建一个目录，将其初始化为Git代码库
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git init [project-name]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;下载一个项目和它的整个代码历史
$ git clone [url]&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;配置&quot;&gt;配置&lt;/h3&gt;

&lt;p&gt;Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;显示当前的Git配置
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git config --list
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;编辑Git配置文件
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git config -e [--global]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;设置提交代码时的用户信息
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git config [--global] user.name &quot;[name]&quot;
$ git config [--global] user.email &quot;[email address]&quot;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;h3 id=&quot;增加删除文件&quot;&gt;增加/删除文件&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;添加指定文件到暂存区
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git add [file1] [file2] ...
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;添加指定目录到暂存区，包括子目录
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git add [dir]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;添加当前目录的所有文件到暂存区
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git add .
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;删除工作区文件，并且将这次删除放入暂存区
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git rm [file1] [file2] ...
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;停止追踪指定文件，但该文件会保留在工作区
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git rm --cached [file]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;改名文件，并且将这个改名放入暂存区
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git mv [file-original] [file-renamed]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;h3 id=&quot;代码提交&quot;&gt;代码提交&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;提交暂存区到仓库区
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git commit -m [message]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;提交暂存区的指定文件到仓库区
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git commit [file1] [file2] ... -m [message]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;提交工作区自上次commit之后的变化，直接到仓库区
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git commit -a
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;提交时显示所有diff信息
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git commit -v
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;使用一次新的commit，替代上一次提交&lt;/li&gt;
  &lt;li&gt;如果代码没有任何新变化，则用来改写上一次commit的提交信息
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git commit --amend -m [message]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;重做上一次commit，并包括指定文件的新变化
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git commit --amend [file1] [file2] ...
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;h3 id=&quot;分支&quot;&gt;分支&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;列出所有本地分支
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git branch
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;列出所有远程分支
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git branch -r
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;列出所有本地分支和远程分支
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git branch -a
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;新建一个分支，但依然停留在当前分支
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git branch [branch-name]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;新建一个分支，并切换到该分支
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git checkout -b [branch]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;新建一个分支，指向指定commit
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git branch [branch] [commit]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;新建一个分支，与指定的远程分支建立追踪关系
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git branch --track [branch] [remote-branch]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;切换到指定分支，并更新工作区
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git checkout [branch-name]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;建立追踪关系，在现有分支与指定的远程分支之间
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git branch --set-upstream [branch] [remote-branch]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;合并指定分支到当前分支
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git merge [branch]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;选择一个commit，合并进当前分支
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git cherry-pick [commit]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;删除分支
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git branch -d [branch-name]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;删除远程分支
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git push origin --delete [branch-name]
$ git branch -dr [remote/branch]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;h3 id=&quot;标签&quot;&gt;标签&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;列出所有tag
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git tag
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;新建一个tag在当前commit
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git tag [tag]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;新建一个tag在指定commit
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git tag [tag] [commit]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;查看tag信息
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git show [tag]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;提交指定tag
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git push [remote] [tag]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;提交所有tag
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git push [remote] --tags
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;新建一个分支，指向某个tag
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git checkout -b [branch] [tag]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;h3 id=&quot;查看信息&quot;&gt;查看信息&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;显示有变更的文件
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git status
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;显示当前分支的版本历史
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git log
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;显示commit历史，以及每次commit发生变更的文件
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git log --stat
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;显示某个文件的版本历史，包括文件改名
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git log --follow [file]
$ git whatchanged [file]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;显示指定文件相关的每一次diff
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git log -p [file]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;显示指定文件是什么人在什么时间修改过
$ git blame [file]
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;# 显示暂存区和工作区的差异
$ git diff
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;显示暂存区和上一个commit的差异
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git diff --cached [file]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;显示工作区与当前分支最新commit之间的差异
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git diff HEAD
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;显示两次提交之间的差异
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git diff [first-branch]...[second-branch]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;显示某次提交的元数据和内容变化
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git show [commit]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;显示某次提交发生变化的文件
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git show --name-only [commit]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;显示某次提交时，某个文件的内容
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git show [commit]:[filename]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;显示当前分支的最近几次提交
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git reflog
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;h3 id=&quot;远程同步&quot;&gt;远程同步&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;下载远程仓库的所有变动
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git fetch [remote]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;显示所有远程仓库
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git remote -v
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;显示某个远程仓库的信息
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git remote show [remote]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;增加一个新的远程仓库，并命名
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git remote add [shortname] [url]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;取回远程仓库的变化，并与本地分支合并
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git pull [remote] [branch]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;上传本地指定分支到远程仓库
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git push [remote] [branch]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;强行推送当前分支到远程仓库，即使有冲突
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git push [remote] --force
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;推送所有分支到远程仓库
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git push [remote] --all
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;h3 id=&quot;撤销&quot;&gt;撤销&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;恢复暂存区的指定文件到工作区
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git checkout [file]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;恢复某个commit的指定文件到工作区
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git checkout [commit] [file]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;恢复上一个commit的所有文件到工作区
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git checkout .
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;重置暂存区的指定文件，与上一次commit保持一致，但工作区不变
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git reset [file]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;重置暂存区与工作区，与上一次commit保持一致
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git reset --hard
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git reset [commit]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git reset --hard [commit]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;重置当前HEAD为指定commit，但保持暂存区和工作区不变
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git reset --keep [commit]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;新建一个commit，用来撤销指定commit&lt;/li&gt;
  &lt;li&gt;后者的所有变化都将被前者抵消，并且应用到当前分支
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git revert [commit]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;h3 id=&quot;其他&quot;&gt;其他&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;生成一个可供发布的压缩包
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git archive
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Thu, 31 Aug 2017 12:53:34 +0800</pubDate>
        <link>https://thomasliao.cn/linux/2017/08/31/git-commands/</link>
        <guid isPermaLink="true">https://thomasliao.cn/linux/2017/08/31/git-commands/</guid>
        
        <category>Linux</category>
        
        
        <category>Linux</category>
        
      </item>
    
      <item>
        <title>Understanding the linux kernel!</title>
        <description>&lt;p&gt;“When you bow deeply to the universe, it bows back; when you call out the name of God, it echoes inside you.”
―Morihei Ueshiba&lt;/p&gt;

&lt;h2 id=&quot;description&quot;&gt;Description&lt;/h2&gt;
&lt;p&gt;这个是对«Understanding the linux kernel»的读书笔记,记录下了要点.持续更新&lt;/p&gt;

&lt;h2 id=&quot;chapter-1&quot;&gt;Chapter 1&lt;/h2&gt;
&lt;h3 id=&quot;terms&quot;&gt;terms&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;symmetric multiprocessing (SMP)&lt;/li&gt;
  &lt;li&gt;Journaling file system 日志型文件系统&lt;/li&gt;
  &lt;li&gt;General Public License (GPL)&lt;/li&gt;
  &lt;li&gt;Fiber Distributed Data Interface (FDDI)光纤分布式数据接口&lt;/li&gt;
  &lt;li&gt;High Performance Parallel Interface (HIPPI)高性能并行接口&lt;/li&gt;
  &lt;li&gt;cpu nonprivileged mode:User Mode&lt;/li&gt;
  &lt;li&gt;cpu privileged mode:Kernel Mode&lt;/li&gt;
  &lt;li&gt;TSS:Task State Segment&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;区分module和microkernel-operating-systems&quot;&gt;区分module和microkernel operating systems&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;module [monolithic operating Systems]:&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;does not run as a specific process.Instead it is executed in Kernel Mode on behalf of the current process ,like any other statically linked kernel function&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;microkernel operating Systems:&lt;/li&gt;
  &lt;li&gt;demand a very small set of functions from the kernel, generally including a few synchronization primitives, a simple scheduler, and an interprocess communication mechanism. Several system processes that run on top of the microkernel implement other operating system-layer functions, like memory allocators, device drivers, system call handlers, and so on.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;file&quot;&gt;File&lt;/h3&gt;
&lt;p&gt;A Unix file is an information container structured as a sequence of bytes; the kernel does not interpret the contents of a file.&lt;/p&gt;

&lt;h4 id=&quot;files-types&quot;&gt;Files Types&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Regular file&lt;/li&gt;
  &lt;li&gt;Directory&lt;/li&gt;
  &lt;li&gt;Symbolic link&lt;/li&gt;
  &lt;li&gt;Device file&lt;/li&gt;
  &lt;li&gt;Block-oriented device file&lt;/li&gt;
  &lt;li&gt;Character-oriented device file&lt;/li&gt;
  &lt;li&gt;Device files are related to I/O devices and device drivers integrated into the kernel&lt;/li&gt;
  &lt;li&gt;Pipe and named pipe (also called FIFO)&lt;/li&gt;
  &lt;li&gt;Pipes and sockets are special files used for interprocess communication&lt;/li&gt;
  &lt;li&gt;Socket&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;inode-consist-the-information&quot;&gt;Inode, consist the information:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;File type (see previous section)&lt;/li&gt;
  &lt;li&gt;Number of hard links associated with the file&lt;/li&gt;
  &lt;li&gt;File length in bytes&lt;/li&gt;
  &lt;li&gt;Device ID (i.e., an identifier of the device containing the file)&lt;/li&gt;
  &lt;li&gt;Inode number that identifies the file within the filesystem&lt;/li&gt;
  &lt;li&gt;User ID of the file owner&lt;/li&gt;
  &lt;li&gt;Group ID of the file&lt;/li&gt;
  &lt;li&gt;Several timestamps that specify the inode status change time, the last access time, and
the last modify time&lt;/li&gt;
  &lt;li&gt;Access rights and file mode (see next section)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;file-descriptor-and-inode&quot;&gt;File Descriptor and Inode&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;each file consists of a sequence of characters&lt;/li&gt;
  &lt;li&gt;Information needed included in a data structure-inode&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;161-the-processkernel-model&quot;&gt;1.6.1 The Process/Kernel Model&lt;/h3&gt;

&lt;p&gt;he kernel itself is not a process but a process manager.&lt;/p&gt;

&lt;p&gt;Besides user processes, Unix systems include a few privileged processes called kernel threads:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;They run in Kernel Mode in the kernel address space.&lt;/li&gt;
  &lt;li&gt;They do not interact with users, and thus do not require terminal devices.&lt;/li&gt;
  &lt;li&gt;They are usually created during system startup and remain alive until the system is
shut down.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Kernel routine invoded:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;process itself invokes a system call&lt;/li&gt;
  &lt;li&gt;process sinals an exception, cause the kernel invoke to handle  the exception&lt;/li&gt;
  &lt;li&gt;device issues an interrupt signal&lt;/li&gt;
  &lt;li&gt;kernel thread is executed&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;162-process-implementation&quot;&gt;1.6.2 Process Implementation&lt;/h3&gt;
&lt;h4 id=&quot;process-descriptor&quot;&gt;Process Descriptor&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;program counter and stack pointer&lt;/li&gt;
  &lt;li&gt;general-purpose registers&lt;/li&gt;
  &lt;li&gt;floating point registers&lt;/li&gt;
  &lt;li&gt;processor control registers(Process Status Word-cpu state)&lt;/li&gt;
  &lt;li&gt;memory manager registers keep track of RAM&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;163-reentrant-kernels&quot;&gt;1.6.3 Reentrant Kernels&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;All Unix Kernels are reentrant&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;chapter-2memory-addressing&quot;&gt;Chapter 2.Memory Addressing&lt;/h2&gt;
&lt;h3 id=&quot;21-memory-address&quot;&gt;2.1 Memory address&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Logical address:&lt;/li&gt;
  &lt;li&gt;Included in the machine language instructions to specify the address of an operand or of an instruction.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;segment + offset&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Linear addrss:&lt;/li&gt;
  &lt;li&gt;A single 32-bit unsigned integer that can be used to address up to 4 GB&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;range from 0x00000000 to 0xffffffff.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Physical address:&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Used to address memory cells included in memory chips.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;sample:
我们写个最简单的hello world程序，用gccs编译，再反编译后会看到以下指令：&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;···
mov    0x80495b0, %eax
···&lt;/p&gt;

&lt;p&gt;这里的内存地址0x80495b0 就是一个逻辑地址，必须加上隐含的DS 数据段的基地址，才能构成线性地址。也就是说 0x80495b0 是当前任务的DS数据段内的偏移。&lt;/p&gt;

&lt;h3 id=&quot;22-segmentation-in-hardware&quot;&gt;2.2 Segmentation in Hardware&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;logical address = a segment identifier[16-bit field called Segment Selector]  + an offset[32-bit field]&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;processor provides segmentation registers to hold Segment Selectors&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;CS:code segment register, points to a segment containing program instructions&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;SS:stack segment register, points to a segment containing the current program stack&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;DS:data segment register, points to a segment containing static and external data&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;ES,FS,GS:-&amp;gt;three segmentation registers are general purpose and may refer to arbitrary segments.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;25-paging-in-linux&quot;&gt;2.5 paging in Linux&lt;/h3&gt;
&lt;p&gt;Linux handling of processes relyis heavily on paging.&lt;/p&gt;

&lt;h4 id=&quot;signals-and-interprocess-communication&quot;&gt;Signals and Interprocess Communication&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Asynchronous notifications&lt;/li&gt;
  &lt;li&gt;Synchronous errors or exceptions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The kernel implements these constructs as IPC resources: a process acquires a resource by
invoking a shmget( ), semget( ), or msgget( ) system call. Just like files, IPC resources
are persistent: they must be explicitly deallocated by the creator process, by the current
owner, or by a superuser process.&lt;/p&gt;

&lt;p&gt;Shared memory provides the fastest way for processes to exchange and share data.&lt;/p&gt;

&lt;p&gt;1.6.7.1 Zombie processes
a process
remains in that state until its parent process executes a wait( ) system call on it.&lt;/p&gt;

&lt;h3 id=&quot;memory-management&quot;&gt;Memory Management&lt;/h3&gt;
&lt;h4 id=&quot;virtual-memory&quot;&gt;virtual memory&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Several processes can be executed concurrently.&lt;/li&gt;
  &lt;li&gt;It is possible to run applications whose memory needs are larger than the available
physical memory.&lt;/li&gt;
  &lt;li&gt;Processes can execute a program whose code is only partially loaded in memory.&lt;/li&gt;
  &lt;li&gt;Each process is allowed to access a subset of the available physical memory.&lt;/li&gt;
  &lt;li&gt;Processes can share a single memory image of a library or program.&lt;/li&gt;
  &lt;li&gt;Programs can be relocatable, that is, they can be placed anywhere in physical memory.&lt;/li&gt;
  &lt;li&gt;Programmers can write machine-independent code, since they do not need to be
concerned about physical memory organization.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;random-access-memory-usage&quot;&gt;Random access memory usage&lt;/h4&gt;
&lt;p&gt;two portions of the random access memory(RAM).&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;A few megabytes are dedicated to storing the kernel image (i.e., the kernel code and
the kernel static data structures).&lt;/li&gt;
  &lt;li&gt;The remaining portion of RAM is used in three possible ways:
• To satisfy kernel requests for buffers, descriptors, and other dynamic kernel data
structures
• To satisfy process requests for generic memory areas and for memory mapping of files
• To get better performance from disks and other buffered devices by means of caches&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sun, 23 Apr 2017 20:41:22 +0800</pubDate>
        <link>https://thomasliao.cn/linux/2017/04/23/Understanding-The-Linux-Kernel/</link>
        <guid isPermaLink="true">https://thomasliao.cn/linux/2017/04/23/Understanding-The-Linux-Kernel/</guid>
        
        <category>Linux</category>
        
        
        <category>Linux</category>
        
      </item>
    
      <item>
        <title>Java polymorphism and class modifier!</title>
        <description>&lt;p&gt;“When you bow deeply to the universe, it bows back; when you call out the name of God, it echoes inside you.”
―Morihei Ueshiba&lt;/p&gt;

&lt;h3 id=&quot;description&quot;&gt;Description&lt;/h3&gt;
&lt;p&gt;介绍Java Basic的多态性：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;override是重写，指的是子类集成父类重新写父类已有的方法，方法名称、参数个数，类型，顺序，返回值类型都是必须和父类方法一致的。&lt;/li&gt;
  &lt;li&gt;overload是重载，值得是在同一个类中写多一个和另外一个方法名一毛一样的方法，不过是不同的方法参数或者返回值调用–因为方法就是一个功能的实现，但是参数可能有多种类型&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;sample-点击看代码&quot;&gt;sample 点击看代码&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/liao123abc/AndroidSnacks/tree/master/app/src/main/java/liao/thomas/androidsnacks/javabasic/overload&quot;&gt;overload&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/liao123abc/AndroidSnacks/tree/master/app/src/main/java/liao/thomas/androidsnacks/javabasic/override&quot;&gt;override&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;public-protected-default-private&quot;&gt;public protected default private&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;modifier&lt;/th&gt;
      &lt;th&gt;类内部&lt;/th&gt;
      &lt;th&gt;本包&lt;/th&gt;
      &lt;th&gt;子类&lt;/th&gt;
      &lt;th&gt;外部包&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;public&lt;/td&gt;
      &lt;td&gt;√&lt;/td&gt;
      &lt;td&gt;√&lt;/td&gt;
      &lt;td&gt;√&lt;/td&gt;
      &lt;td&gt;√&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;protected&lt;/td&gt;
      &lt;td&gt;√&lt;/td&gt;
      &lt;td&gt;√&lt;/td&gt;
      &lt;td&gt;√&lt;/td&gt;
      &lt;td&gt;×&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;default&lt;/td&gt;
      &lt;td&gt;√&lt;/td&gt;
      &lt;td&gt;√&lt;/td&gt;
      &lt;td&gt;×&lt;/td&gt;
      &lt;td&gt;×&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;private&lt;/td&gt;
      &lt;td&gt;√&lt;/td&gt;
      &lt;td&gt;×&lt;/td&gt;
      &lt;td&gt;×&lt;/td&gt;
      &lt;td&gt;×&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;public 
对于public修饰符，它具有最大的访问权限，可以访问任何一个在CLASSPATH下的类、接口、异常等。它往往用于对外的情况，也就是对象或类对外的一种接口的形式。(其实就是什么都可以访问)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;protected
对于protected修饰符，对于protected的方法或者变量就只有本包和本类或者子类可以维护（其实就是对外不公开的意思），但是你可以在外部包写一个子类override protected
方法&lt;/p&gt;

    &lt;p&gt;包accessing有个方法test1&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;package liao.thomas.androidsnacks.javabasic.accessing;

/**
 * Created by Administrator on 2016/12/24.
 */

public class Foo {

    /**
     * default
     */
    void test1() {
        //do something
    }

    /**
     * protected
     */
    protected void test2() {

    }
}

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;另外一个包有个方法&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;    Foo2 foo2 = new Foo2();
    //嘿嘿，调用继承后的test2方法,如果Foo2没有override test2方法，这里会报错，你可以试一下注释掉Foo2的test2方法
    foo2.test2();
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;default，针对本包访问设计，就是在同一个包内的都可以访问，其他的就不可以了，一般用于某些方法我们只在本包内被修改，对于包外，呵呵，不好意思，你没权限看到，更加不要说修改了。&lt;/p&gt;

    &lt;p&gt;包accessing有个方法test1&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;package liao.thomas.androidsnacks.javabasic.accessing;

/**
 * Created by Administrator on 2016/12/24.
 */

public class Foo {

    /**
     * default
     */
    void test1() {
        //do something
    }

    /**
     * protected
     */
    protected void test2() {

    }
}

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;另外一个包有个方法&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;    Foo foo = new Foo();
    //foo.test1(); //会报错，因为test1是default方法，无法在别的包访问
        
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;private 啥也不要说了，private修饰的方法或者变量只有本类才能够访问和修改，子类也不行&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 24 Dec 2016 11:41:22 +0800</pubDate>
        <link>https://thomasliao.cn/java/2016/12/24/Java-polymorphism-and-class-modifier/</link>
        <guid isPermaLink="true">https://thomasliao.cn/java/2016/12/24/Java-polymorphism-and-class-modifier/</guid>
        
        <category>java</category>
        
        
        <category>java</category>
        
      </item>
    
      <item>
        <title>Java 8 new features!</title>
        <description>&lt;p&gt;This is a post introducing the new Features of Java8.&lt;/p&gt;

&lt;h2 id=&quot;why-we-need-jdk&quot;&gt;Why we need JDK?&lt;/h2&gt;

&lt;p&gt;Why do we need JDK when we are already using Android SDK? After all, we are not developing for JVM.
The Android build process depends on a number of tools from the JDK. Check out the build system overview documentation.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The first big piece we need from JDK is javac- all your source code written in Java needs to be compiled before it can be converted to the DEX foramt.&lt;/li&gt;
  &lt;li&gt;Once your code has been compiled, dexed, and packaged into an APK, we need jarsigner to sign the APK.&lt;/li&gt;
  &lt;li&gt;Is there any difference between using JDK 1.6, 1.7 and 1.8? That depends on what features you are using from each. Older projects that don’t use Java 7 features can use Java 6 without issue.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are some efforts out there to bring Java 8 features to Android, most notably gradle-retrolambda. Some of these require JDK 8 to compile properly.&lt;/p&gt;

&lt;h2 id=&quot;android配置&quot;&gt;Android配置&lt;/h2&gt;

&lt;p&gt;enable Java8&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;android {
  ...
  defaultConfig {
    ...
    jackOptions {
      enabled true
    }
  }
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;android-supported-java-8-language-features-and-apis&quot;&gt;Android supported Java 8 Language Features and APIs&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Default and static interface methods&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Lambda expressions (also available on API level 23 and lower)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Repeatable annotations&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Method References (also available on API level 23 and lower)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Type Annotations (also available on API level 23 and lower)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;default-and-static-interface-methods&quot;&gt;Default and static interface methods&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Java interface default methods
    &lt;ul&gt;
      &lt;li&gt;Defender Methods / Virtual extension methods&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Java Interface Static Method
    &lt;ul&gt;
      &lt;li&gt;similar to default method except that we can’t override them in the implementation classes&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;why-java-8-import-default-interface-methods&quot;&gt;why java 8 import default interface methods&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;设计接口需要小心翼翼(Tough)
    &lt;ul&gt;
      &lt;li&gt;随着功能扩展和时间推进，如果要在接口添加
新方法，那么实现该接口的类也要响应实现该
函数&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;大部分框架都会提供一个实现类xxImpl,
    &lt;ul&gt;
      &lt;li&gt;再extends该类选择自己需要的接口&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/lDJTlUc.png&quot; alt=&quot;why need default and static method&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;default-method-sample&quot;&gt;default method sample&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/KJt94Io.png&quot; alt=&quot;default method sample&quot; /&gt;
Java8之前，那么每个实现了该interface的类都要实现sort这接口&lt;/p&gt;

&lt;h3 id=&quot;default-method好处多多&quot;&gt;Default method好处多多&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;扩展接口不用担心会破坏当前的实现类&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Default interface 使abstract class和interface更加泾渭分明&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;避免大量的Utility classes&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;避免编写大量实现类&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;优化Collections API，以便支持Lambda&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Default method不能重载Object基类的方法&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;java-8才支持否则会提示出错&quot;&gt;Java 8才支持(否则会提示出错)&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/q8oX9vl.png&quot; alt=&quot;support in java8&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;发散思维&quot;&gt;发散思维&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Java 不支持多继承—就是说一个类只能继承另外一个类。想同时继承两个类？Forget it！
    &lt;ul&gt;
      &lt;li&gt;为什么？&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Java接口(Interface)支持多重继承
    &lt;ul&gt;
      &lt;li&gt;接口中所有的方法必须是抽象方法。(java 7及以前)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Java8 Interface 支持default method (java 8)
    &lt;ul&gt;
      &lt;li&gt;难道没有问题么？&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;diamond-problem&quot;&gt;Diamond problem&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/nTjxtWD.png&quot; alt=&quot;Diamond problem&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;default-methods---diamond-problem&quot;&gt;default methods - Diamond Problem&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/1pCXIHe.png&quot; alt=&quot;Diamond Problem&quot; /&gt;
如果B或者C其中有一个并没有实现sayHi() ， 编译器不会报错&lt;/p&gt;

&lt;h3 id=&quot;have-got-to-override-to-avoid-diamond-problem&quot;&gt;have got to override to avoid diamond problem&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/uwHyUlr.png&quot; alt=&quot;override to avoid diamond problem&quot; /&gt;
Avoid Diamond problem , we have to override sayHi()&lt;/p&gt;

&lt;h3 id=&quot;cannot-override-method-from-object&quot;&gt;cannot override method from Object&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/3WWJRPA.png&quot; alt=&quot;cannot override method from Object&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;static-method&quot;&gt;Static Method&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Static method[如果有的话]是interface领土不可分割的一部分
    &lt;ul&gt;
      &lt;li&gt;Class不能implement这个方法&lt;/li&gt;
      &lt;li&gt;Security—保证方法的唯一性&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;方便interface提供utility方法
    &lt;ul&gt;
      &lt;li&gt;Null check&lt;/li&gt;
      &lt;li&gt;Collection sorting&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;可以直接通过接口的方法调用来调用static method&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;abstract-classes-vs-defaultstatic-methods&quot;&gt;Abstract Classes Vs Default/Static Methods&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;抽象类可能包含变量，接口[interface]只包含方法和常量&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;类只能单继承，interface可以多继承&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;不是所有地方都推荐用Default/Static Methods&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;java-annotations&quot;&gt;Java Annotations&lt;/h2&gt;

&lt;h3 id=&quot;short-description&quot;&gt;short description&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;What
    &lt;ul&gt;
      &lt;li&gt;a form of metadata, provide data about a program that is not part of the program itself.&lt;/li&gt;
      &lt;li&gt;Metadata is data about data. So Annotations are metadata for code.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Why
    &lt;ul&gt;
      &lt;li&gt;Free of boilerplate Java code&lt;/li&gt;
      &lt;li&gt;Less likely to contain bugs&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;When
    &lt;ul&gt;
      &lt;li&gt;Introduced in JDK5&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;java-reflection&quot;&gt;java reflection&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Performance Overhead
    &lt;ul&gt;
      &lt;li&gt;Generally though the JVM may optimize the normal instantiation but could not make optimizations for the reflective use case.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Security Restrictions&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Exposure of Internals&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Performance Overhead
Because reflection involves types that are dynamically resolved, certain Java virtual machine optimizations can not be performed. Consequently, reflective operations have slower performance than their non-reflective counterparts, and should be avoided in sections of code which are called frequently in performance-sensitive applications.
Security Restrictions
Reflection requires a runtime permission which may not be present when running under a security manager. This is in an important consideration for code which has to run in a restricted security context, such as in an Applet.
Exposure of Internals
Since reflection allows code to perform operations that would be illegal in non-reflective code, such as accessing private fields and methods, the use of reflection can result in unexpected side-effects, which may render code dysfunctional and may destroy portability. Reflective code breaks abstractions and therefore may change behavior with upgrades of the platform.&lt;/p&gt;

&lt;h3 id=&quot;custom-annotation&quot;&gt;custom annotation&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/CUcEG2y.png&quot; alt=&quot;annotation policy&quot; /&gt;
You apply @Documented when defining an annotation, to ensure that classes using your annotation show this in their generated JavaDoc.&lt;/p&gt;

&lt;h3 id=&quot;repeatable-annotations&quot;&gt;Repeatable annotations&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/jvOljJV.png&quot; alt=&quot;Repeatable annotations&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;java8-stream&quot;&gt;java8 Stream&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;InputStream and OutputStream from Java I/O? NO!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Monads—java函数式编程
[ˈmɑ:næd]&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Stream() / parallelStream()  create a sequential or a parallel stream&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Stream operations一般和lambda结合使用
    &lt;ul&gt;
      &lt;li&gt;intermediate operations&lt;/li&gt;
      &lt;li&gt;terminal operation&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Stream operations
    &lt;ul&gt;
      &lt;li&gt;non-interfering&lt;/li&gt;
      &lt;li&gt;stateless&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A function is non-interfering when it does not modify the underlying data source of the stream&lt;/p&gt;

&lt;p&gt;A function is stateless when the execution of the operation is deterministic, e.g. in the above example no lambda expression depends on any mutable variables or states from the outer scope which might change during execution.&lt;/p&gt;

&lt;h3 id=&quot;java8-stream-1&quot;&gt;java8 Stream&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;元素集&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;数据源&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;聚合操作(aggregate operations) ： filter, map, limit, reduce, find, match等等&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;管道(pipelining)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Stream 不是集合元素，它不是数据结构并不保存数据，它是有关算法和计算的，它更像一个高级版本的 Iterator。
Stream 就如同一个迭代器（Iterator），单向，不可往复，数据只能遍历一次，遍历过一次后即用尽了，就好比流水从面前流过，一去不复返。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/eZ1Kv3z.png&quot; alt=&quot;Java8 Stream&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;stream-有丰富的接口&quot;&gt;Stream 有丰富的接口&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/jUyfcaZ.png&quot; alt=&quot;Stream API&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;java8-predicate接口&quot;&gt;Java8 Predicate接口&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;方便单元测试&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;方便代码管理&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;可读性&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Predicate 接口只有一个参数，返回boolean类型。该接口包含多种默认方法来将Predicate组合成其他复杂的逻辑（比如：与，或，非）&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;lambda&quot;&gt;Lambda&lt;/h2&gt;

&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;What is lambda
    &lt;ul&gt;
      &lt;li&gt;Lambda (uppercase Λ, lowercase λ) is the 11th letter of the Greek alphabet&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Lambda 表达式”是一个匿名函数
&lt;img src=&quot;http://i.imgur.com/IcU4yic.png&quot; alt=&quot;Lambda icon&quot; /&gt;
&lt;img src=&quot;http://i.imgur.com/uP0HUSz.png&quot; alt=&quot;lambda tips&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;lambda-syntax&quot;&gt;Lambda Syntax&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;包含三个部分
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;一个括号内用逗号分隔的形式参数，参数是函数式接口里面方法的参数&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;一个箭头符号：-&amp;gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;方法体，可以是表达式和代码块，方法体函数式接口里面方法的实现，如果是代码块，则必须用{}来包裹起来，且需要一个return 返回值，但有个例外，若函数式接口里面方法返回值是void，则无需{}&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;(parameters) -&amp;gt; expression 或者 (parameters) -&amp;gt; { statements; }&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;why-lambda&quot;&gt;why Lambda&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Lambda expression provides a good alternative to Closure.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;adds that missing link of functional programming to Java. &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;in Java, the lambda expressions are represented as objects&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;lambdas-vs-closure&quot;&gt;Lambdas VS Closure&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Lambda 是匿名函数的别称
    &lt;ul&gt;
      &lt;li&gt;Instance of function&lt;/li&gt;
      &lt;li&gt;Non-local variables have been bound&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Closure闭包，是指可以包含自由（未绑定到特定对象）变量的代码块；这些变量不是在这个代码块内或者任何全局上下文中定义的，而是在定义代码块的环境中定义（局部变量）。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A lambda is just an anonymous function - a function defined with no name.&lt;/p&gt;

&lt;p&gt;A closure is any function which closes over the environment in which it was defined.&lt;/p&gt;

&lt;p&gt;An anonymous function is a function literal without a name, while a closure is an instance of a function, a value, whose non-local variables have been bound either to values or to storage locations&lt;/p&gt;

&lt;h3 id=&quot;lambda-作用域&quot;&gt;Lambda 作用域&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;可以直接在lambda表达式中访问外层的局部变量&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;声明为final，或者不在代码块里面修改变量&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;lambda内部对于实例的字段以及静态变量是即可读又可写(和匿名对象是一致的)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;android-studio-会提醒你可以用lambda&quot;&gt;Android Studio 会提醒你可以用Lambda&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/glkmxfH.png&quot; alt=&quot;Android Studio Suggestion&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;lambda-usage&quot;&gt;Lambda usage&lt;/h3&gt;

&lt;p&gt;#### 
&lt;img src=&quot;http://i.imgur.com/1PZTAA4.png&quot; alt=&quot;Lambda case 0&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;#### 
&lt;img src=&quot;http://i.imgur.com/3i3Yw6G.png&quot; alt=&quot;Lambda case 1&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;#### 
&lt;img src=&quot;http://i.imgur.com/iOB4bMN.png&quot; alt=&quot;Lambda case 2&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;#### 
&lt;img src=&quot;http://i.imgur.com/3fJPPuy.png&quot; alt=&quot;Lambda case 3&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;case-4&quot;&gt;case 4&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/jIIyiQM.png&quot; alt=&quot;Lambda case 4&quot; /&gt;
&lt;img src=&quot;http://i.imgur.com/KODvwvO.png&quot; alt=&quot;Lambda calculator code&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Wed, 21 Dec 2016 12:21:22 +0800</pubDate>
        <link>https://thomasliao.cn/2016/12/21/Java-8-Language-new-features/</link>
        <guid isPermaLink="true">https://thomasliao.cn/2016/12/21/Java-8-Language-new-features/</guid>
        
        <category>java</category>
        
        
      </item>
    
      <item>
        <title>Java History Introduction!</title>
        <description>&lt;p&gt;This is a short article introducing the naming history about Java.&lt;/p&gt;

&lt;h2 id=&quot;description&quot;&gt;Description&lt;/h2&gt;
&lt;p&gt;本文介绍Java的历史版本名称&lt;/p&gt;

&lt;h4 id=&quot;introduction&quot;&gt;Introduction&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Java Creator
James Gosling&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;What is Java：high-level programming language
    &lt;ol&gt;
      &lt;li&gt;concurrent&lt;/li&gt;
      &lt;li&gt;class-based&lt;/li&gt;
      &lt;li&gt;object-oriented&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;WORA ： Write once, run anywhere&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;java-history&quot;&gt;Java History&lt;/h4&gt;
&lt;p&gt;This gives a brief description to all Java versions naming.&lt;/p&gt;

&lt;h5 id=&quot;jdk-version-10--january-23-1996--oak橡木&quot;&gt;JDK Version 1.0  (January 23, 1996):  Oak(橡木)&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/ndBOLcf.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;jdk-version-11--february-19-1997--abigail-ˈæbɪˌɡel-来源于希伯来语含义是教父欣喜father-rejoiced&quot;&gt;JDK Version 1.1  (February 19, 1997):  Abigail [ˈæbɪˌɡel] 来源于希伯来语，含义是“教父欣喜”(father rejoiced);&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/7Q5SzZY.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;j2se-versiono-12-december-8-1998-playground&quot;&gt;J2SE Versiono 1.2 (December 8, 1998): Playground&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/ynefXQD.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;j2se-version-13-may-8-2000--kestrel-ˈkɛstrəl-产于欧洲的茶隼一种鹰-&quot;&gt;J2SE Version 1.3 (May 8, 2000):  Kestrel [ˈkɛstrəl] （产于欧洲的）茶隼（一种鹰） ;&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/0Dkqdsf.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;jese-version-14-february-6-2002-merlin-ˈmɜrlɪn-隼灰背隼&quot;&gt;JESE Version 1.4 (February 6, 2002): Merlin [ˈmɜ:rlɪn] 隼，灰背隼;&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/PkqVXJW.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;j2se-version-50--september-30-2004--tiger&quot;&gt;J2SE Version 5.0  (September 30, 2004):  Tiger&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/Ra1McNQ.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;java-se-6-december-11-2006-mustang-ˈmʌsˌtæŋ-野马&quot;&gt;Java SE 6 (December 11, 2006): Mustang [ˈmʌsˌtæŋ] 野马&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/SgFRwRa.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;java-se-7--july-28-2011-dolphin&quot;&gt;Java SE 7  (July 28, 2011): Dolphin&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/ip5pQwC.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;java-se-8-march-18-2014-java-8--the-code-name-culture-is-dropped-with-java-8-and-so-no-official-code-name-going-forward-from-java-8&quot;&gt;Java SE 8 (March 18, 2014): Java 8  (The code name culture is dropped with Java 8 and so no official code name going forward from Java 8.)&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/HcLPS8L.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 15 Dec 2016 12:22:22 +0800</pubDate>
        <link>https://thomasliao.cn/2016/12/15/Java-History-Introduction/</link>
        <guid isPermaLink="true">https://thomasliao.cn/2016/12/15/Java-History-Introduction/</guid>
        
        <category>java</category>
        
        
      </item>
    
  </channel>
</rss>
