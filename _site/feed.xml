<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ThomasLiao Blog</title>
    <description>Android Developer</description>
    <link>https://thomasliao.cn/</link>
    <atom:link href="https://thomasliao.cn/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 24 Oct 2021 10:53:52 +0800</pubDate>
    <lastBuildDate>Sun, 24 Oct 2021 10:53:52 +0800</lastBuildDate>
    <generator>Jekyll v4.2.0</generator>
    
      <item>
        <title>Android</title>
        <description>&lt;p&gt;,,,,—
layout: post
title: “computer system1”
subtitle: “note”
date: 2021-08-08
author: “thomasliao”
header-img: “img/post-bg-2015.jpg”
tags:
    - Android
    - Anki
—&lt;/p&gt;

&lt;h1 id=&quot;android&quot;&gt;Android&lt;/h1&gt;

&lt;h2 id=&quot;contextclass&quot;&gt;context:class&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;../images/context_class.png&quot; alt=&quot;context0.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;contextcontext数量&quot;&gt;context:context数量&lt;/h2&gt;
&lt;p&gt;一般都认为是：activity数目+Service数目+Application数目。虽然activity和service，application都间接继承context。但是仅仅用来维护其生命周期。内部context的成员变量才是我们想要的上下文对象。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/android_activity_class.png&quot; alt=&quot;context1.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;contextcontext-scope&quot;&gt;context:context scope&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;../images/android_context_scope.png&quot; alt=&quot;context2.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;如果我们用applicationcontext去启动一个launchmode为standard的activity的时候会报错&quot;&gt;如果我们用ApplicationContext去启动一个LaunchMode为standard的Activity的时候会报错&lt;/h3&gt;
&lt;p&gt;android.util.AndroidRuntimeException: Calling startActivity from outside of an Activity context requires the FLAG_ACTIVITY_NEW_TASK flag. Is this really what you want?&lt;/p&gt;

&lt;h3 id=&quot;在application和service中去layout-inflate也是合法的但是会使用系统默认的主题样式如果你自定义了某些样式可能不会被使用所以这种方式也不推荐使用&quot;&gt;在Application和Service中去layout inflate也是合法的，但是会使用系统默认的主题样式，如果你自定义了某些样式可能不会被使用。所以这种方式也不推荐使用。&lt;/h3&gt;

&lt;p&gt;一句话总结：凡是跟UI相关的，都应该使用Activity做为Context来处理；其他的一些操作，Service,Activity,Application等实例都可以，当然了，注意Context引用的持有，防止内存泄漏。&lt;/p&gt;

&lt;h3 id=&quot;一般context造成的内存泄漏几乎都是当context销毁的时候却因为被引用导致销毁失败而application的context对象可以理解为随着进程存在的所以我们总结出使用context的正确姿势&quot;&gt;一般Context造成的内存泄漏，几乎都是当Context销毁的时候，却因为被引用导致销毁失败，而Application的Context对象可以理解为随着进程存在的，所以我们总结出使用Context的正确姿势：&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;1：当Application的Context能搞定的情况下，并且生命周期长的对象，优先使用Application的Context。&lt;/li&gt;
  &lt;li&gt;2：不要让生命周期长于Activity的对象持有到Activity的引用。&lt;/li&gt;
  &lt;li&gt;3：尽量不要在Activity中使用非静态内部类，因为非静态内部类会隐式持有外部类实例的引用，如果使用静态内部类，将外部实例引用作为弱引用持有。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;bitmap&quot;&gt;Bitmap&lt;/h2&gt;
&lt;p&gt;Bitmap在android中指的是一张图片，可以是png格式也可以是jpe等其他常用格式&lt;/p&gt;

&lt;h3 id=&quot;bitmap像素格式&quot;&gt;Bitmap像素格式&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;ALPHA_8：颜色信息只由透明度组成，占8位&lt;/li&gt;
  &lt;li&gt;ARGB_4444：颜色信息由透明度与R（Red），G（Green），B（Blue）四部分组成，每个部分都占4位，总共占16位&lt;/li&gt;
  &lt;li&gt;ARGB_8888：颜色信息由透明度与R（Red），G（Green），B（Blue）四部分组成，每个部分都占8位，总共占32位。是Bitmap默认的颜色配置信息，也是最占空间的一种配置&lt;/li&gt;
  &lt;li&gt;RGB_565：颜色信息由R（Red），G（Green），B（Blue）三部分组成，R占5位，G占6位，B占5位，总共占16位&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bitmap内存大小计算&quot;&gt;Bitmap内存大小计算&lt;/h3&gt;
&lt;p&gt;图片长度 x 图片宽度 x 一个像素点占用的字节数&lt;/p&gt;

&lt;h3 id=&quot;加载bitmap&quot;&gt;加载Bitmap&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;decodeFile
    &lt;ul&gt;
      &lt;li&gt;调用了decodeStream&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;decodeResource
    &lt;ul&gt;
      &lt;li&gt;调用了decodeStream&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;decodeStream&lt;/li&gt;
  &lt;li&gt;decodeByteArray&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;bitmap高效加载bitmap&quot;&gt;Bitmap:高效加载Bitmap&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;通过采样率高效加载
    &lt;ul&gt;
      &lt;li&gt;将BitmapFactory.Options的inJustDecodeBounds参数设为true并加载图片
        &lt;ul&gt;
          &lt;li&gt;BitmapFactory只会解析图片的原始宽/高信息，并不会去真正地加载图片，所以这个操作是轻量级的&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;从BitmapFactory.Options中取出图片的原始宽高信息，它们对应于outWidth和outHeight参数&lt;/li&gt;
      &lt;li&gt;根据采样率的规则并结合目标View的所需大小计算出采样率inSampleSize&lt;/li&gt;
      &lt;li&gt;将BitmapFactory.Options的inJustDecodeBounds参数设为false，然后重新加载图片&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;内存复用
    &lt;ul&gt;
      &lt;li&gt;在Bitmap中引入了一个新的字段BitmapFactory.Options.inBitmap，设置此字段为true后，解码方法会尝试复用一张存在的Bitmap&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;使用缓存
    &lt;ul&gt;
      &lt;li&gt;LruCache-LruCache作为Bitmap在内存中的存放容器&lt;/li&gt;
      &lt;li&gt;DiskLruCache-在sd卡则使用DiskLruCache来统一管理磁盘上的图片缓存&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;内存复用 + 缓存
    &lt;ul&gt;
      &lt;li&gt;缓存中即将回收的使用弱引用(内存不足时会GC), 设置inBitmap来复用内存&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;bitmap压缩图片&quot;&gt;Bitmap:压缩图片&lt;/h2&gt;
&lt;p&gt;先尺寸压缩，后质量压缩，因为尺寸压缩可以设置&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;options.inJustDecodeBounds = true&lt;/code&gt;仅获取 Bitmap 基本信息，几乎不占用应用程序的运行内存&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;质量压缩
    &lt;ul&gt;
      &lt;li&gt;不改变图片的尺寸&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bitmap.compress(CompressFormat format, int quality, OutputStream stream)&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;通过不断较少 quality 来限制文件大小&lt;/li&gt;
          &lt;li&gt;假如图片特别大，当执行ByteArrayOutputStream.toByteArray() 这行时很可能 OOM&lt;/li&gt;
          &lt;li&gt;所以质量压缩不能先执行&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;尺寸压缩
    &lt;ul&gt;
      &lt;li&gt;一般用于生成缩略图&lt;/li&gt;
      &lt;li&gt;通过缩放图片像素来减少图片占用内存大小&lt;/li&gt;
      &lt;li&gt;获取图片的一些属性，例如图片宽高，图片类型等等（inJustDecodeBounds参数设为true）
        &lt;ul&gt;
          &lt;li&gt;基于当前的上下文来决定怎么加载图片—完整、压缩、怎么压缩(采样率inSampleSize)
            &lt;ul&gt;
              &lt;li&gt;完整图片加载到内存中所使用内存 vs 可分配内存&lt;/li&gt;
              &lt;li&gt;显示图片的控件的大小&lt;/li&gt;
              &lt;li&gt;当前设备的屏幕大小和密度&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;计算采样率inSampleSize
            &lt;ul&gt;
              &lt;li&gt;Android 源码计算方式&lt;/li&gt;
              &lt;li&gt;常规算法&lt;/li&gt;
              &lt;li&gt;luban&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;bitmap局部加载&quot;&gt;Bitmap:局部加载&lt;/h2&gt;
&lt;p&gt;单个图片非常巨大，并且还不允许压缩。比如显示：世界地图、清明上河图、微博长图等&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/lmj623565791/article/details/49300989&quot;&gt;BitmapRegionDecoder&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;根据屏幕大小将这个图切成N多块，要加载时根据屏幕滑动加载，类似于目前常用的谷歌地图方式
    &lt;ul&gt;
      &lt;li&gt;还可以实现bitmap复用&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;bitmap-getbytecount-vsgetallocationbytecount&quot;&gt;Bitmap: &lt;strong&gt;getByteCount vs getAllocationByteCount&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&quot;一般情况下getbytecount和getallocationbytecount是相等的但是bitmap内存如果复用之后两者就不一样了&quot;&gt;一般情况下getByteCount()和getAllocationByteCount()是相等的。但是Bitmap内存如果复用之后，两者就不一样了&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;getByteCount()代表存储Bitmap的色素需要的最少内存&lt;/li&gt;
  &lt;li&gt;getAllocationByteCount()代表在内存中为Bitmap分配的内存大小&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;通过复用bitmap来解码图片如果被复用的bitmap的内存比待分配内存的bitmap大&quot;&gt;通过复用Bitmap来解码图片，如果被复用的Bitmap的内存比待分配内存的Bitmap大&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;getByteCount()表示新解码图片占用内存的大小&lt;/li&gt;
  &lt;li&gt;getAllocationByteCount()表示被复用Bitmap真实占用的内存大小&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;bitmapandroid-bitmap内存分配变化&quot;&gt;Bitmap:Android Bitmap内存分配变化&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Android3.0之前， Bitmap对象放在Java堆，像素数据放在Native内存
    &lt;ul&gt;
      &lt;li&gt;手动调用recycle释放&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Android3.0–Android7.0 对象和像素数据统一，放到Java堆中
    &lt;ul&gt;
      &lt;li&gt;就算不调用recycle，Bitmap内存也会随对象一起被回收&lt;/li&gt;
      &lt;li&gt;Bitmap消耗内存大，所以放在Java堆比较容易导致OOM、大量GC&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Android 8.0 重新将 Bitmap 内存放回到 Native 中&lt;/li&gt;
  &lt;li&gt;优化3.0–7.0
    &lt;ul&gt;
      &lt;li&gt;通过直接调用 libandroid_runtime.so 中 Bitmap 的构造函数，可以得到一张空的 Bitmap 对象，而它的内存是放到 Native 堆中&lt;/li&gt;
      &lt;li&gt;通过系统的方法创建一张普通的 Java Bitmap&lt;/li&gt;
      &lt;li&gt;将 Java Bitmap 的内容绘制到之前申请的空的 Native Bitmap 中&lt;/li&gt;
      &lt;li&gt;将申请的 Java Bitmap 释放，实现图片内存的“偷龙转凤”。&lt;/li&gt;
      &lt;li&gt;这个“黑科技”有两个主要问题，一个是兼容性问题，另外一个是频繁申请释放 Java Bitmap 容易导致内存抖动&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;bitmap减少内存占用&quot;&gt;Bitmap:减少内存占用&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;使用采样 + RGB_565
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;采样之后内存是小了，可是图的尺寸也小了，可以使用矩阵，内存不变，放大图片&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;**&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;//canvas&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Matrix&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;preScale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;drawBitmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bitmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//ImageView&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Matrix&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;postScale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;imageView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setImageMatrix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;imageView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setScaleType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ScaleType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MATRIX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;imageView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setImageBitmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bitmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;bitmap内存优化&quot;&gt;Bitmap:内存优化&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;去除重复图片
    &lt;ul&gt;
      &lt;li&gt;检查图片尺寸+bitmap数组进行hash对比&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;大图片监控
    &lt;ul&gt;
      &lt;li&gt;插桩方式在setBitmap方法后拿到bitmap的宽高和view的宽高做比较&lt;/li&gt;
      &lt;li&gt;定时去获取内存快照中view和bitmap中宽高作比较&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;activity-lifecycle&quot;&gt;Activity lifecycle&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;../images/activity_lifecycle.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;注意，当系统因为内存不足（优先级更高的应用需要内存，请看上图红框）要回收Activity占用的资源时，Activity在执行完onPause()方法后就会被销毁，有些生命周期方法onStop()，onDestory()就不会执行。当再回到此Activity时，是从onCreate方法开始执行&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;activity-lifecycle生命周期&quot;&gt;Activity lifecycle:生命周期&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;onCreate
    &lt;ul&gt;
      &lt;li&gt;表示activity正在被创建&lt;/li&gt;
      &lt;li&gt;初始化工作：setContentView、初始化Activity需要的数据&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;onRestart
    &lt;ul&gt;
      &lt;li&gt;表示重新创建&lt;/li&gt;
      &lt;li&gt;Activity从不可见重新变为可见才会调用&lt;/li&gt;
      &lt;li&gt;一般是用户所致，如按下home键&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;onStart
    &lt;ul&gt;
      &lt;li&gt;正在启动&lt;/li&gt;
      &lt;li&gt;Activity在后台–已经可见但是没出现在前台、无法和用户交互&lt;/li&gt;
      &lt;li&gt;可以理解为Activity已经显示出来，但是我们看不到&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;onResume
    &lt;ul&gt;
      &lt;li&gt;已经可见，并且在前台开始活动&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;onPause
    &lt;ul&gt;
      &lt;li&gt;表示Activity正在停止&lt;/li&gt;
      &lt;li&gt;可以做一些存储数据、停止动画等&lt;/li&gt;
      &lt;li&gt;注意不能太耗时，会影响新Activity的显示–onPause必须执行完，新的Activity onResume才会执行&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;onStop
    &lt;ul&gt;
      &lt;li&gt;表示Activity即将停止&lt;/li&gt;
      &lt;li&gt;可以做一些稍微重量级的回收工作，同样不能太耗时&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;onDestroy
    &lt;ul&gt;
      &lt;li&gt;表示Activity即将被销毁&lt;/li&gt;
      &lt;li&gt;回收工作和最终的资源释放&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;onStart和onStop是从Activity是否可见这个角度来回调的，而onResume和onPause是从Activity是否位于前台这个角度来回调的，除了这种区别，在实际使用中没有其他明显区别&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;activity-lifecycle生命周期切换过程&quot;&gt;Activity lifecycle:生命周期切换过程&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;针对一个特定的Activity，第一次启动，回调如下：onCreate&amp;gt;onStart&amp;gt;onResume&lt;/li&gt;
  &lt;li&gt;打开新的Activity或者切换到桌面的时候，回调如下：onPause&amp;gt;onStop。
    &lt;ul&gt;
      &lt;li&gt;特殊情况：如果新Activity采用了透明主题，那么当前Activity不会回调onStop&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;当用户再次回到原Activity时，回调如下：onRestart&amp;gt;onStart&amp;gt;onResume&lt;/li&gt;
  &lt;li&gt;当用户按back键回退时，回调如下：onPause&amp;gt;onStop&amp;gt;onDestroy&lt;/li&gt;
  &lt;li&gt;pair
    &lt;ul&gt;
      &lt;li&gt;onCreate和onDestroy， 标识Activity的创建和销毁&lt;/li&gt;
      &lt;li&gt;是否可见：onStart和onStop， 随着用户操作和设备屏幕点亮和熄灭，可能调用多次&lt;/li&gt;
      &lt;li&gt;是否在前台: onResume和onPause, 随着用户操作和设备屏幕点亮和熄灭，可能调用多次&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;activity-lifecycleactivity异常结束&quot;&gt;Activity lifecycle:Activity异常结束&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;时机
    &lt;ul&gt;
      &lt;li&gt;系统回收Activity&lt;/li&gt;
      &lt;li&gt;设备的Configuration改变导致Activity销毁重建
        &lt;ul&gt;
          &lt;li&gt;
            &lt;table&gt;
              &lt;tbody&gt;
                &lt;tr&gt;
                  &lt;td&gt;必须设置为android:configChanges=”orientation&lt;/td&gt;
                  &lt;td&gt;screenSize”时，不会重走生命周期&lt;/td&gt;
                &lt;/tr&gt;
              &lt;/tbody&gt;
            &lt;/table&gt;
            &lt;ul&gt;
              &lt;li&gt;只会回调onConfigurationChanged方法&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;流程
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;onStop之前&lt;/strong&gt;回调&lt;strong&gt;onSaveInstanceState&lt;/strong&gt;保存数据&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;在onStart之后&lt;/strong&gt;回调&lt;strong&gt;onRestoreInstanceState&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;其中Bundle数据会传到onCreate（不一定有数据）和onRestoreInstanceState（一定有数据）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;    &lt;span class=&quot;cm&quot;&gt;/**
     * saveInstance 不一定有数据
     * @param saveInstance
     */&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;saveInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;saveInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Check whether we're recreating a previously destroyed instance&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;saveInstance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Restore value of members from saved state&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;mUser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;saveInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;STATE_USER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Probably initialize members with default values for a new instance&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;mUser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;NewUser&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onSaveInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;outState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;putString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;STATE_USER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//onStop之前调用&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Always call the superclass so it can save the view hierarchy state&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onSaveInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onRestoreInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onRestoreInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;//不需要判断savedInstanceState， 在onStart后调用&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Restore value of members from saved state&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mUser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;STATE_USER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/dedbae8ffca1&quot;&gt;fragment&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/4c798c91a613&quot;&gt;service&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;service-lifecycle&quot;&gt;service lifecycle&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;../images/service_lifecycle.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;service-本地远程&quot;&gt;Service 本地、远程&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;本地服务
    &lt;ul&gt;
      &lt;li&gt;该服务依附在主进程上而不是独立的进程&lt;/li&gt;
      &lt;li&gt;不需要IPC，不需要AIDL&lt;/li&gt;
      &lt;li&gt;应用被杀，service也会被杀&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;远程服务
    &lt;ul&gt;
      &lt;li&gt;独立进程·&lt;/li&gt;
      &lt;li&gt;对应进程名格式为所在包名加上你指定的android:process字符串。一般定义方式 android:process=”:service”&lt;/li&gt;
      &lt;li&gt;Activity所在进程被Kill的时候，该服务依然在运行，不受其他进程影响&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;service状态&quot;&gt;Service状态&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;启动状态
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;通过调用 startService() 启动服务时，&lt;/strong&gt;服务即处于“启动”状态&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;一旦启动，服务即可在后台无限期运行，即使启动服务的组件已被销毁也不受影响，除非手动调用才能停止服务&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;如果想要启动一个后台服务长期进行某项任务，那么使用startService&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;多次startService不会重复执行onCreate回调，但每次都会执行onStartCommand回调。&lt;/em&gt;&lt;/li&gt;
      &lt;li&gt; onCreate -&amp;gt; onStartCommand -&amp;gt; onDestory &lt;/li&gt;
      &lt;li&gt;stopService&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;绑定状态
    &lt;ul&gt;
      &lt;li&gt;调用 bindService() 绑定到服务时，服务即处于“绑定”状态&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;绑定服务提供了一个客户端-服务器接口，允许组件与服务进行交互、发送请求、获取结果，甚至是利用进程间通信 (IPC) 跨进程执行这些操作&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;多个组件&lt;strong&gt;可以同时绑定到该服务&lt;/strong&gt;，但&lt;strong&gt;全部取消绑定后，该服务即会被销毁&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;如果只是短暂的使用，那么使用bindService。&lt;/li&gt;
      &lt;li&gt;onCreate -&amp;gt; onBind -&amp;gt; onUnbind -&amp;gt; onDestory&lt;/li&gt;
      &lt;li&gt;unbindService&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;对于既使用startService，又使用bindService的情况,Service的终止，需要unbindService和stopService都调用才行&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;intentservice&quot;&gt;IntentService&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;IntentService本质是采用Handler &amp;amp; HandlerThread方式&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;内部compose了ServiceHandler，并且在onCreate的时候创建新线程&lt;/li&gt;
  &lt;li&gt;重写其中的onHandleIntent(Intent)方法接收一个Intent对象,在适当的时候会停止自己(一般在工作完成的时候).&lt;/li&gt;
  &lt;li&gt;onHandleIntent(Intent)执行在子线程&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IntentService&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Service&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Looper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mServiceLooper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServiceHandler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mServiceHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mRedelivery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServiceHandler&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ServiceHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Looper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;looper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;looper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handleMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;onHandleIntent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;stopSelf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;arg1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// TODO: It would be nice to have an option to hold a partial wakelock&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// during processing, and to have a static startService(Context, Intent)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// method that would launch the service &amp;amp; hand off a wakelock.&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;HandlerThread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HandlerThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;IntentService[&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;]&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;mServiceLooper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLooper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mServiceHandler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServiceHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mServiceLooper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;//使用IntentService
    private void testIntentService() {
        String inputText = editText.getText().toString();
        Intent inputIntent = new Intent(ServiceActivity.this, MyIntentService.class);
        inputIntent.putExtra(MyIntentService.TEXT_INPUT, inputText);
        startService(inputIntent);
    }
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;android-broadcast&quot;&gt;android broadcast&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/carson_ho/article/details/52973504?utm_medium=distribute.pc_relevant_right.none-task-blog-BlogCommendFromBaidu-1&amp;amp;depth_1-utm_source=distribute.pc_relevant_right.none-task-blog-BlogCommendFromBaidu-1&quot;&gt;Broadcast&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;广播接收者和广播发送者的执行是异步的&lt;/li&gt;
  &lt;li&gt;动态广播是在代码里注册的，静态广播是在AndroidManifest.xml（清单文件）中注册的。
    &lt;ul&gt;
      &lt;li&gt;动态广播最好在Activity 的 onResume()注册、onPause()注销。
        &lt;ul&gt;
          &lt;li&gt;对于动态广播，有注册就必然得有注销，否则会导致内存泄露&lt;/li&gt;
          &lt;li&gt;不在onCreate() &amp;amp; onDestory() 或 onStart() &amp;amp; onStop()注册、注销
            &lt;ul&gt;
              &lt;li&gt;内存不足Activity只跑onPause&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;动态注册广播不是常驻型广播，也就是说广播跟随 Activity 的生命周期
        &lt;ul&gt;
          &lt;li&gt; Activity 结束前，移除广播接收器&lt;/li&gt;
          &lt;li&gt;可以根据自己需求特定时刻监听广播&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;静态注册是常驻型，也就是说当应用程序关闭后，如果有信息广播来，程序也会被系统调用自动运行
        &lt;ul&gt;
          &lt;li&gt;时刻监听广播&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;有序广播-Ordered Broadcast
    &lt;ul&gt;
      &lt;li&gt;按照Priority属性值从大-小排序, Priority属性相同者，动态注册的广播优先&lt;/li&gt;
      &lt;li&gt;先接收的广播接收者可以对广播进行截断，即后接收的广播接收者不再接收到此广播&lt;/li&gt;
      &lt;li&gt;先接收的广播接收者可以对广播进行修改，那么后接收的广播接收者将接收到被修改后的广播&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;应用内广播
    &lt;ul&gt;
      &lt;li&gt;将全局广播改为局部广播
        &lt;ul&gt;
          &lt;li&gt;将exported属性设置为false&lt;/li&gt;
          &lt;li&gt;在广播发送和接收时，增设相应权限permission，用于权限验证&lt;/li&gt;
          &lt;li&gt;发送广播时指定该广播接收器所在的包名
            &lt;ul&gt;
              &lt;li&gt;通过&lt;strong&gt;intent.setPackage(packageName)&lt;/strong&gt;指定报名&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;使用封装好的LocalBroadcastManager类
        &lt;ul&gt;
          &lt;li&gt;对于LocalBroadcastManager方式发送的应用内广播，只能通过LocalBroadcastManager动态注册，不能静态注册&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;发送广播&quot;&gt;发送广播&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Context提供的如下两个方法用于发送广播。
    &lt;ul&gt;
      &lt;li&gt;1.sendBroadcast()：发送Normal Broadcast。&lt;/li&gt;
      &lt;li&gt;2.sendOrderedBroadcast()：发送Ordered Broadcast。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Local&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;/**
* LocalBroadcast receiver used for inter-process communication which provides application security
* has it doesn’t allow other process to communicate.
*/
Intent broadcastIntent = new Intent();
broadcastIntent.setAction(ServiceActivity.ResponseReceiver.LOCAL_ACTION);
broadcastIntent.putExtra(TEXT_OUTPUT, outputText);
LocalBroadcastManager localBroadcastManager = LocalBroadcastManager.getInstance(this);
localBroadcastManager.sendBroadcast(broadcastIntent);
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;冷启动-vs-热启动&quot;&gt;冷启动 vs 热启动&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;冷启动
    &lt;ul&gt;
      &lt;li&gt;后台没有该应用的进程&lt;/li&gt;
      &lt;li&gt;重新创建一个新的进程
        &lt;ul&gt;
          &lt;li&gt;先创建和初始化Application类&lt;/li&gt;
          &lt;li&gt;再创建和初始化&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MainActivity&lt;/code&gt;类（包括一系列的测量、布局、绘制），最后显示在界面上&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;热启动
    &lt;ul&gt;
      &lt;li&gt;当应用已经被打开&lt;/li&gt;
      &lt;li&gt;被按下返回键、Home键等按键时回到桌面或者是其他程序覆盖&lt;/li&gt;
      &lt;li&gt;热启动的过程只需要创建和初始化一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MainActivity&lt;/code&gt;就行了，而不必创建和初始化&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Application&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;直接走MainActivity（包括一系列的测量、布局、绘制）&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;冷启动流程&quot;&gt;冷启动流程&lt;/h2&gt;

&lt;h3 id=&quot;zygote进程-和-systemserver进程&quot;&gt;Zygote进程 和 SystemServer进程&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Zygote进程
    &lt;ul&gt;
      &lt;li&gt;应用程序进程都是由Zygote进程孵化出来的，而Zygote进程是由Init进程启动的&lt;/li&gt;
      &lt;li&gt;Zygote进程启动
        &lt;ul&gt;
          &lt;li&gt;创建一个Dalvik虚拟机实例&lt;/li&gt;
          &lt;li&gt;加载Java运行时库&lt;/li&gt;
          &lt;li&gt;注册一些Android核心类的JNI方法来前面创建的Dalvik虚拟机实例中去&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;SystemServer进程
    &lt;ul&gt;
      &lt;li&gt;SystemServer的进程名实际上叫做“system_server”&lt;/li&gt;
      &lt;li&gt;系统中的服务驻留在其中,常见的比如WindowManagerServer（Wms）、ActivityManagerSystemService（AmS）、 PackageManagerServer（PmS）等，
        &lt;ul&gt;
          &lt;li&gt;这些系统服务都是以一个线程的方式存在于SystemServer进程中&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;SS是由Zygote通过Zygote.forkSystemServer函数fork诞生出来的
        &lt;ul&gt;
          &lt;li&gt;init1()是native函数,启动了 c++运行时库,如：sqllite,OpenGL ES等,然后把调用线程加入Binder通信中&lt;/li&gt;
          &lt;li&gt;nit2在Java层,就是单独创建一个线程,用以启动系统各项服务:Wms, Ams, Pms等&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;启动流程&quot;&gt;启动流程&lt;/h3&gt;

&lt;p&gt;Application构造方法 –&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;attachBaseContext()&lt;/code&gt;–&amp;gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onCreate&lt;/code&gt; –&amp;gt;Activity构造方法 –&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onCreate()&lt;/code&gt; –&amp;gt; 配置主体中的背景等操作 –&amp;gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onStart()&lt;/code&gt; –&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onResume()&lt;/code&gt; –&amp;gt; 测量、布局、绘制显示&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;点击app图标，从Zygote进程fork创建新进程给应用
    &lt;ul&gt;
      &lt;li&gt;点击桌面App图标，Launcher进程采用Binder IPC向system_server进程发起startActivity请求&lt;/li&gt;
      &lt;li&gt;system_server进程接收到请求后，向zygote进程发送创建进程的请求；&lt;/li&gt;
      &lt;li&gt;Zygote进程fork出新的子进程，即App进程；&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;依次创建和初始化Application类、创建MainActivity类、加载主题样式Theme中的windowBackground等属性设置给MainActivity以及配置Activity层级上的一些属性
    &lt;ul&gt;
      &lt;li&gt;App进程，通过Binder IPC向sytem_server进程发起attachApplication请求；&lt;/li&gt;
      &lt;li&gt;system_server进程在收到请求后，进行一系列准备工作后，再通过binder IPC向App进程发送scheduleLaunchActivity请求&lt;/li&gt;
      &lt;li&gt;App进程的binder线程（ApplicationThread）在收到请求后，通过handler向主线程发送LAUNCH_ACTIVITY消息&lt;/li&gt;
      &lt;li&gt;主线程在收到Message后，通过反射机制创建目标Activity，并回调Activity.onCreate()等方法&lt;/li&gt;
      &lt;li&gt;到此，App便正式启动，开始进入Activity生命周期，执行完onCreate/onStart/onResume方法，UI渲染结束后便可以看到App的主界面&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;activity启动流程&quot;&gt;Activity启动流程&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Activity1调用startActivity，实际会调用Instrumentation类的execStartActivity方法，Instrumentation是系统用来监控Activity运行的一个类，Activity的整个生命周期都有它的影子&lt;/li&gt;
  &lt;li&gt;通过跨进程的binder调用，进入到ActivityManagerService中，其内部会处理Activity栈，通知Activity1 Pause，Activity1 执行Pause 后告知AMS&lt;/li&gt;
  &lt;li&gt;在ActivityManagerService中的startProcessLocked中调用了Process.start()方法。并通过连接调用Zygote的native方法forkAndSpecialize，执行fork任务。之后再通过跨进程调用进入到Activity2所在的&lt;strong&gt;进程&lt;/strong&gt;中&lt;/li&gt;
  &lt;li&gt;ApplicationThread是一个binder对象，其运行在binder线程池中，内部包含一个H类，该类继承于类Handler。主线程发起bind Application，AMS 会做一些配置工作，然后让主线程 bind ApplicationThread，ApplicationThread将启动Activity2的信息通过H对象发送给&lt;strong&gt;主线程&lt;/strong&gt;。发送的消息是EXECUTE_TRANSACTION，消息体是一个 ClientTransaction，即 LaunchActivityItem。主线程拿到Activity2的信息后，调用Instrumentation类的newActivity方法，其内通过ClassLoader创建Activity2&lt;strong&gt;实例&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;通知Activity2去performCreate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;注：现在发送的都是EXECUTE_TRANSACTION ，通过 TransactionExecutor 来执行 ClientTransaction, ClientTransaction 中包含各种 ClientTransactionItem，如 PauseActivityItem、LaunchActivityItem、StopActivityItem、ResumeActivityItem、DestroyActivityItem 等，这些Item的execute方法来处理相应的handle，如handlePauseActivity、handleLaunchActivity等，通知相应的Activity来perform。&lt;/p&gt;

&lt;h2 id=&quot;serializable-java&quot;&gt;Serializable-Java&lt;/h2&gt;

&lt;h3 id=&quot;cons&quot;&gt;cons&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;reflection - slow&lt;/li&gt;
  &lt;li&gt;standard Java interface&lt;/li&gt;
  &lt;li&gt;creates a lot of temporary objects and causes quite a bit of garbage collection&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;pros&quot;&gt;pros&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;easier to implement&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ItemSerializable&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Serializable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ItemSerializable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;parcelable&quot;&gt;Parcelable&lt;/h2&gt;
&lt;h3 id=&quot;cons-1&quot;&gt;cons&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;takes more time to implement&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;pros-1&quot;&gt;pros&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;faster&lt;/li&gt;
  &lt;li&gt;array can be passed via Intent in android&lt;/li&gt;
  &lt;li&gt;no reflection, 选择字段读写&lt;/li&gt;
  &lt;li&gt;kotlin有注解&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nd&quot;&gt;@Parcelize&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;imageUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Category&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Parcelable&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Parcelize&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Parcelable&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;java编写稍微复杂&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ItemParcelable&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Parcelable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ItemParcelable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ItemParcelable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Parcel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createStringArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;describeContents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;writeToParcel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Parcel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;writeInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;writeString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;writeStringList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Creator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ItemParcelable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CREATOR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Creator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ItemParcelable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ItemParcelable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;newArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ItemParcelable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ItemParcelable&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createFromParcel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Parcel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ItemParcelable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;construct&quot;&gt;construct&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;activity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Intent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MainActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getApplicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;888&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;testing&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tag&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;putExtra&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;primitive Int&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;888&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;putExtra&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;item&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arrayList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;arrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dddddddd&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;ItemParcelable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mObjects&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ItemParcelable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;99&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;putExtra&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;itemParcelable&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mObjects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;ItemSerializable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;itemSerializable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ItemSerializable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;99&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;putExtra&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;itemSerializable&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;itemSerializable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;startActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;getdata&quot;&gt;getdata&lt;/h3&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getParcelableExtra&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;item&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;java&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getParcelableExtra&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ItemParcelable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;itemParcelable&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;itemSerializable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getSerializableExtra&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;itemSerializable&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ItemSerializable&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;view-structure&quot;&gt;View: structure&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;../images/activity_view.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DecorView是一个应用窗口的根容器，它本质上是一个FrameLayout&lt;/li&gt;
  &lt;li&gt;DecorView有唯一一个子View，它是一个垂直LinearLayout，包含两个子元素，
    &lt;ul&gt;
      &lt;li&gt;一个是TitleView（ActionBar的容器），&lt;/li&gt;
      &lt;li&gt;另一个是ContentView（窗口内容的容器）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;activitysetcontentview&quot;&gt;Activity.setContentView&lt;/h2&gt;
&lt;p&gt;这个方法只是完成了Activity的ContentView的创建，而并没有执行View的绘制流程。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;实际上调用到了PhoneWindow的setContentView()方法。&lt;/li&gt;
  &lt;li&gt;PhoneWindow的setContentView()方法中
    &lt;ul&gt;
      &lt;li&gt;调用了LayoutInflater的inflate()方法来填充布局&lt;/li&gt;
      &lt;li&gt;传入了decorView作为LayoutInflater.inflate()的root参数&lt;/li&gt;
      &lt;li&gt;最终调用的是inflate(XmlPullParser, ViewGroup, boolean)方法来填充布局
        &lt;ul&gt;
          &lt;li&gt;单独处理merge标签&lt;/li&gt;
          &lt;li&gt;调用rInflate()方法来递归填充布局
            &lt;ul&gt;
              &lt;li&gt;inflate()和rInflate()方法中都调用了rInflateChildren()方法&lt;/li&gt;
              &lt;li&gt;rInflateChildren()方法实际上调用了rInflate()方法&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;view-inflate方法总结&quot;&gt;View: inflate方法总结&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;XML中保存了ViewTree的结构和View的相关标签信息（包括View的类型和一些属性值）
    &lt;ul&gt;
      &lt;li&gt;这些信息会在后面通过反射的方式（如果没有Factory2和Factory的话）创建实例对象
        &lt;ul&gt;
          &lt;li&gt;如果创建的是ViewGroup，则会对它的子View遍历重复创建步骤&lt;/li&gt;
          &lt;li&gt;创建完View对象后，会add到对应的ViewGroup中&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;inflate-&amp;gt;rInflate-&amp;gt;createViewFromTag-&amp;gt;createView&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;view-view绘制的起点&quot;&gt;View: view绘制的起点&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;View的绘制是由ViewRoot来负责的。每个应用程序窗口的decorView都有一个与之关联的ViewRoot对象，这种关联关系是由WindowManager来维护的。&lt;/li&gt;
  &lt;li&gt;当建立好了decorView与ViewRoot的关联后，ViewRoot类的requestLayout()方法会被调用，以完成应用程序用户界面的初次布局。实际被调用的是ViewRootImpl类的requestLayout()方法
    &lt;ul&gt;
      &lt;li&gt;setContentView() 只是把 View 添加到 DecorView 上&lt;/li&gt;
      &lt;li&gt;onResume() 中 ViewRootImpl 和 DecorView 做了关联&lt;/li&gt;
      &lt;li&gt;requestLayout() 和 invalidate() 会触发 ViewRootImpl 绘制 View&lt;/li&gt;
      &lt;li&gt;在 Activity 的 onResume() 方法执行后，DecorView 会被添加带 ViewRootImpl 中。然后执行 requestlayout()
```java
//H:Handler-&amp;gt;handleMessage(RESUME_ACTIVITY)-&amp;gt;handleResumeActivity-&amp;gt;windowmanager.addView
public void addView(View view, ViewGroup.LayoutParams params,
   Display display, Window parentWindow) {
  ……&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;ViewRootImpl root;
  View panelParentView = null;&lt;/p&gt;

    &lt;p&gt;synchronized (mLock) {
      ……
      root = new ViewRootImpl(view.getContext(), display);&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;  view.setLayoutParams(wparams);

  mViews.add(view);
  mRoots.add(root);
  mParams.add(wparams);   }
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;// do this last because it fires off messages to start doing things
  try {
      root.setView(view, wparams, panelParentView); //invoke requestLayout
  } ……
}
```&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;view-measurespec&quot;&gt;View: MeasureSpec&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;exactly优先，at_most次之&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;MeasureSpec代表一个32位int值，&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;高2位代表SpecMode，SpecMode是指测量模式，
    &lt;ul&gt;
      &lt;li&gt;UNSPECIFIED, 指父容器不对view有任何限制，要多大给多大，一般用于系统内部，表示测量的状态&lt;/li&gt;
      &lt;li&gt;EXACTLY, 父容器检测出view需要的精确大小，view的最终大小就是SpecSize的大小。对应LayoutParams中的match_parent模式&lt;/li&gt;
      &lt;li&gt;AT_MOST,父容器指定了一个SpecSize, view的大小不能大于这个值, 对应LayoutParams.wrap_content模式&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;低30位代表SpecSize，而SpecSize是指在某种测量模式下的规格大小&lt;/li&gt;
  &lt;li&gt;MeasureSpec 不是 唯一 由 LayoutParams 决定 的， LayoutParams 需 要和 父 容器 一起 才能 决定 View 的 MeasureSpec， 从而 进一步 决定 View 的 宽/ 高
    &lt;ul&gt;
      &lt;li&gt;if(view固定宽/高)– 不受父容器，View的MeasureSpec==EXACTLY，并且大小遵循LayoutParams中的大小&lt;/li&gt;
      &lt;li&gt;if(view宽/高是match_parent)
        &lt;ul&gt;
          &lt;li&gt;if 父容器是EXACTLY, view=EXACTLY，大小是父类的剩余空间&lt;/li&gt;
          &lt;li&gt;if 父容器是AT_MOST，view=AT_MOST，不能超过父容器的剩余空间&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;if(view宽/高是wrap_content),不受父容器影响，view=AT_MOST，不能超过父容器的剩余空间
        &lt;blockquote&gt;

          &lt;p&gt;UNSPECIFIED-主要 用于 系统 内部 多次 Measure 的 情形， 一般来说， 我们 不需要 关注 此 模式。&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;对于DecorView，其MeasureSpec由窗口的尺寸和其自身的LayoutParams来共同确定&lt;/li&gt;
  &lt;li&gt;对于普通View，其MeasureSpec由父容器的MeasureSpec和自身的LayoutParams来共同决定，MeasureSpec一旦确定后，onMeasure中就可以确定View的测量宽/高&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;view-三阶段&quot;&gt;View: 三阶段&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;../images/view_three_phase.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;view-获取宽高的时机&quot;&gt;View: 获取宽高的时机&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;在onCreate、onStart、onResume中均无法正确得到某个View的宽/高信息，这是因为View的measure过程和Activity的生命周期方法不是同步执行的，因此无法保证Activity执行了onCreate、onStart、onResume时某个View已经测量完毕了，如果View还没有测量完毕，那么获得的宽/高就是0&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Activity/ View# onWindowFocusChanged, &lt;/li&gt;
  &lt;li&gt;view. post( runnable), &lt;/li&gt;
  &lt;li&gt;ViewTreeObserver, &lt;/li&gt;
  &lt;li&gt;view. measure( int widthMeasureSpec, int heightMeasureSpec), 根据 View 的 LayoutParams 来 分情况，是否有效
    &lt;ul&gt;
      &lt;li&gt;match_parent, 直接放弃，无效&lt;/li&gt;
      &lt;li&gt;具体数值(dp/px)–ok&lt;/li&gt;
      &lt;li&gt;wrap_content–ok&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ViewUtil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * view的layoutparams指定了宽高，可以通过这个方法来获取真实宽高, 譬如100px
     */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;measureViewOfExactly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;widthMeasureSpec&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MeasureSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;makeMeasureSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EXACTLY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;heightMeasureSpec&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MeasureSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;makeMeasureSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MeasureSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;EXACTLY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;measure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;widthMeasureSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heightMeasureSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * view的layoutparams是wrap_content，可以通过这个方法来获取真实宽高
     */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;measureViewOfWrapContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;widthMeasureSpec&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MeasureSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;makeMeasureSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shl&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AT_MOST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//view的 尺寸 使用 30 位 二进制 表示， 也就是说 最大 是 30 个 1（ 即 2^ 30 - 1）， 也就是( 1 &amp;lt;&amp;lt; 30) - 1， 在最 大化 模式 下， 我们 用 View 理论上 能 支持 的 最大值 去 构造 MeasureSpec 是 合理 的。&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;heightMeasureSpec&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MeasureSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;makeMeasureSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shl&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AT_MOST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;measure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;widthMeasureSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heightMeasureSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;错误用法关于 View 的 measure， 网络 上有 两个 错误 的 用法。 为什么 说是 错误 的， 首先 其 违背 了 系统 的 内部 实现 规范（ 因为 无法 通过 错误 的 MeasureSpec 去 得出 合法 的 SpecMode， 从而 导致 measure 过程 出错）， 其次 不能 保证 一 定能 measure 出 正确 的 结果。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;//第一 种 错误 用法： &lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;widthMeasureSpec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MeasureSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;makeMeasureSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MeasureSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UNSPECIFIED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; 
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heightMeasureSpec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MeasureSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;makeMeasureSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MeasureSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UNSPECIFIED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;measure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;widthMeasureSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heightMeasureSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; 

&lt;span class=&quot;c1&quot;&gt;//第二 种 错误 用法： &lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;measure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LayoutParams&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;WRAP_&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CONTENT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LayoutParams&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;WRAP_&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CONTENT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;view的测量宽高和最终宽高有什么区别&quot;&gt;View的测量宽/高和最终宽/高有什么区别&lt;/h3&gt;
&lt;p&gt;在View的默认实现中，View的测量宽/高和最终宽/高是相等的，只不过测量宽/高形成于View的measure过程，而最终宽/高形成于View的layout过程，即两者的赋值时机不同，测量宽/高的赋值时机稍微早一些。因此，在日常开发中，我们可以认为View的测量宽/高就等于最终宽/高，但是的确存在某些特殊情况会导致两者不一致&lt;/p&gt;

&lt;h2 id=&quot;view-layout&quot;&gt;View: layout&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;当ViewGroup的位置被确定后，它在onLayout中会遍历所有的子元素并调用其layout方法，在layout方法中onLayout方法又会被调用。&lt;/li&gt;
  &lt;li&gt;layout方法确定View本身的位置，而onLayout方法则会确定所有子元素的位置，&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;view-draw&quot;&gt;View: draw&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;view的绘制过程
    &lt;ul&gt;
      &lt;li&gt;绘制 背景 background. draw( canvas)&lt;/li&gt;
      &lt;li&gt;绘制 自己（ onDraw）&lt;/li&gt;
      &lt;li&gt;绘制 children（ dispatchDraw）&lt;/li&gt;
      &lt;li&gt;绘制 装饰（ onDrawScrollBars）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;invalidate(), 请求重绘 View 树，即 draw 过程，假如视图发生大小没有变化就不会调用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;layout()&lt;/code&gt;过程，并且只绘制那些调用了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;invalidate()&lt;/code&gt;方法的 View&lt;/li&gt;
  &lt;li&gt;requestLayout(), 当布局变化的时候，比如方向变化，尺寸的变化，会调用该方法，在自定义的视图中，如果某些情况下希望重新测量尺寸大小，应该手动去调用该方法，它会触发&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;measure()&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;layout()&lt;/code&gt;过程，但不会进行 draw。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;touch-event点击事件的传递规则&quot;&gt;touch event:点击事件的传递规则&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;public boolean dispatchTouchEvent( MotionEvent ev) – 进行事件的分发&lt;/li&gt;
  &lt;li&gt;public boolean onInterceptTouchEvent( MotionEvent event) – 是否拦截事件&lt;/li&gt;
  &lt;li&gt;public boolean onTouchEvent( MotionEvent event) – 处理点击事件&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dispatchTouchEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MotionEvent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;consume&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onInterceptTouchEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;consume&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onTouchEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;consume&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dispatchTouchEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;consume&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;ViewGroup
    &lt;ul&gt;
      &lt;li&gt;onIntercepTouchEvent返回true，拦截当前事件，事件会交给该ViewGroup处理&lt;/li&gt;
      &lt;li&gt;onIntercepTouchEvent返回false，不拦截当前事件，事件会传递给子元素处理，子元素的dispatchTouchEvent方法会被调用&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;View
    &lt;ul&gt;
      &lt;li&gt;设置了onTouchListener， onTouchListener优先级比onTouchEvent要高
        &lt;ul&gt;
          &lt;li&gt;onTouchListener的onTouch返回true， view的onTouchEvent不会被调用&lt;/li&gt;
          &lt;li&gt;onTouchListener的onTouch返回false， view的onTouchEvent会被调用&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;没有设置onTouchListener，则调用onTouchEvent&lt;/li&gt;
      &lt;li&gt;如果设置了onClickListener，那么会调用其onClick方法–OnClickListener优先级最低，处于事件的末端&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;传递过程：Activity-&amp;gt;Window-&amp;gt;View。顶级view收到事件后会按照事件分发机制分发事件
    &lt;ul&gt;
      &lt;li&gt;如果一个View的onTouchEvent返回false，那么父容器的onTouchEvent将会被调用&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;  &lt;span class=&quot;c1&quot;&gt;//重写父类的onTouchEvent &lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onTouchEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MotionEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?):&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;testing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;just testing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;onTouchEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;//setOnTouchListener&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setOnTouchEventListenerTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setOnTouchListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;OnTouchListener&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onTouch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MotionEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?):&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;//do something&lt;/span&gt;

                &lt;span class=&quot;c1&quot;&gt;//如果返回true， view的onTouchEvent 就不会被调用，&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;//可见 OnTouchListener 的 优先级 高于 onTouchEvent， 这样做的好处是方便在外界处理点击 事件。&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;touch-event总结11条&quot;&gt;touch event:总结11条&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;同一个事件序列是指从手指接触屏幕的那一刻起，到手指离开屏幕的那一刻结束，在这个过程中所产生的一系列事件，这个事件序列以down事件开始，中间含有数量不定的move事件，最终以up事件结束。&lt;/li&gt;
  &lt;li&gt;正常情况下，一个事件序列只能被一个View拦截且消耗。因为一旦一个元素拦截了某此事件，那么同一个事件序列内的所有事件都会直接交给它处理，因此同一个事件序列中的事件不能分别由两个View同时处理，但是通过特殊手段可以做到，比如一个View将本该自己处理的事件通过onTouchEvent强行传递给其他View处理。&lt;/li&gt;
  &lt;li&gt;某个View一旦决定拦截，那么这一个事件序列都只能由它来处理（如果事件序列能够传递给它的话），并且它的onInterceptTouchEvent不会再被调用。&lt;/li&gt;
  &lt;li&gt;某个View一旦开始处理事件，如果它不消耗ACTION_DOWN事件（onTouchEvent返回了false），那么同一事件序列中的其他事件都不会再交给它来处理，并且事件将重新交由它的父元素去处理，即父元素的onTouchEvent会被调用。意思就是事件一旦交给一个View处理，那么它就必须消耗掉，否则同一事件序列中剩下的事件就不再交给它来处理了，这就好比上级交给程序员一件事，如果这件事没有处理好，短期内上级就不敢再把事情交给这个程序员做了，二者是类似的道理。&lt;/li&gt;
  &lt;li&gt;如果View不消耗除ACTION_DOWN以外的其他事件，那么这个点击事件会消失，此时父元素的onTouchEvent并不会被调用，并且当前View可以持续收到后续的事件，最终这些消失的点击事件会传递给Activity处理。&lt;/li&gt;
  &lt;li&gt;ViewGroup默认不拦截任何事件。Android源码中ViewGroup的onInterceptTouch-Event方法默认返回false。&lt;/li&gt;
  &lt;li&gt;View没有onInterceptTouchEvent方法，一旦有点击事件传递给它，那么它的onTouchEvent方法就会被调用。&lt;/li&gt;
  &lt;li&gt;View的onTouchEvent默认都会消耗事件（返回true），除非它是不可点击的（clickable和longClickable同时为false）。View的longClickable属性默认都为false，clickable属性要分情况，比如Button的clickable属性默认为true，而TextView的clickable属性默认为false。&lt;/li&gt;
  &lt;li&gt;View的enable属性不影响onTouchEvent的默认返回值。哪怕一个View是disable状态的，只要它的clickable或者longClickable有一个为true，那么它的onTouchEvent就返回true。&lt;/li&gt;
  &lt;li&gt;onClick会发生的前提是当前View是可点击的，并且它收到了down和up的事件。&lt;/li&gt;
  &lt;li&gt;事件传递过程是由外向内的，即事件总是先传递给父元素，然后再由父元素分发给子View，通过requestDisallowInterceptTouchEvent方法可以在子元素中干预父元素的事件分发过程，但是ACTION_DOWN事件除外&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;touch-eventaction_cancel事件&quot;&gt;touch event:ACTION_CANCEL事件&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;如果上层viewgroup拦截了事件，down事件还是会发到view，这样子view就有机会requestDisallowInterceptTouchEvent&lt;/li&gt;
  &lt;li&gt;如果没有requestDisallowInterceptTouchEvent，只发cancel给view，后续的move/up事件不会再发给view
```java
/**&lt;/li&gt;
  &lt;li&gt;Tries to claim the user’s drag motion, and requests disallowing any&lt;/li&gt;
  &lt;li&gt;ancestors from stealing events in the drag.
 */
private void attemptClaimDrag() {
 //mParent = getParent();
 if (mParent != null) {
     mParent.requestDisallowInterceptTouchEvent(true);
 }
}&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;@Override
public boolean onTouchEvent(MotionEvent event) {
    if (event.getAction() == MotionEvent.ACTION_DOWN) {
        if (iWantToKeepThisEventForMyself(event)) {
            attemptClaimDrag();
        }
        //your logic here
    } else {
        //your logic here
    }
}&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;

## touch event: 定义
- Each user touch event is wrapped up as a MotionEvent
- Describes user's current action:
   - ACTION_DOWN
   - ACTION_UP
   - ACTION_MOVE
   - ACTION_POINTER_DOWN
   - ACTION_POINTER_UP
   - ACTION_CANCEL
- Event metadaa included
   - touch location
   - number of pointers
   - event time
- A &quot;gesture&quot; is defined as beginning with ACTION_DOWN and ending with ACTION_UP



## touch event: 事件传递


- envent starts at the activity with dispatchTouchEvent()
- Events flow top down through views
   - Parents(ViewGroup) dispatch events to their children
   - Can intercept events at any time
- Events flow down the chain (and back up) until consumed
   - Views must declare interest by consuming ACTION_DOWN
   - Further events not delivered for efficiency
- Any unconsumed events end at Activity with onTouchEvent()
- Optional External OnToucherListener can intercept touches on any View/ViewGroup



## touch event: View


- Activity.dispatchTouchEvent()
   - Always first to be called
   - Sends events to root view attached to Window
   - onTouchEvent()
      - called if no views consume the event
      - always last to be called
- View.dispatchTouchEvent()
   - Sends envent to listener first, if exist
      - View.OnTouchListener.onTouch()
   - If not consumed processes the touch itself
      - View.onTouchEvent()



## touch event: ViewGroup


- ViewGroup.dispatchTouchEvent()
   - onInterceptTouchEvent()
      - check if it should s supersede children
      - Passes ACTION_CANCEL to active child
      - return true once consumes all subsequent events
   - For each child view, in reverse order they were added
      - if touch is relevant(inside view), child.dispatchTouchEvent()
      - if not handled by previous , dispatch to next view
   - if no children handle event, listener gets a chance
      - OnTouchListener.onTouch()
   - if no listener, or not handled
      - onTouchEvent()



![](../images/touch_event_ignorant.jpeg)


![](../images/touch_event_interested.jpeg)


![](../images/touch_event_intercept.png)

## touch event:custom touch handling

### Custom Touch Handling


- return true with ACTION_DOWN to show interest, even if you aren't interested in ACTION_DOWN , return true;
- for other events, returning true simply stops further processing
- Call through to super whenever possible
- Don't intercept events until you're ready to take them all
- always handle ACTION_CANCEL



### multi-touch handling


- MotionEvent.getPointerCount() - How many pointers are currently on the screen
- Use MotionEvent methods that take a pointer index parameter to get data for a specific pointer



### System Touch Handlers


- don't jump right to custom touch handling if you don't have to...
- simple use:
   - OnClickListener
   - OnLongClickListener
   - OnTouchListener
   - OnScrollListener/View.onScrollChanged()
- complex use GestureDetector:
   - onDown(), onSingleTapUp(), onDoubleTap()
   - onLongPress()
   - onScroll()
   - onFling()
- complex use ScaleGestureDetector:
   - onScaleBegin()
   - onScale()
   - onScaleEnd()


## Activity Launch Mode
### standard
&amp;gt; 缺省模式



## Activity Launch Mode: singleTop
&amp;gt; single on Top， 如果在栈顶就不新创建了

如新创建一个activity D为例

- 不管栈中有没有D，栈顶没有D就新创建一个D
- 如果栈中有D， 就调用该D的onNewIntent() ， 不再新创建
- 一个stack可能有该activity的多个实例(该activity在栈顶后又有别的activity进栈)
#### singleTop适合接收通知启动的内容显示页面。

- 例如，某个新闻客户端的新闻内容页面，如果收到10个新闻推送，每次都打开一个新闻内容页面是很烦人的，用户在点击返回按键的时候也会导致视觉差异。
- 登录页面、WXPayEntryActivity、WXEntryActivity 、推送通知栏







## Activity Launch Mode:singleTask
&amp;gt; single in task

回退栈中没有该类型的Activity，创建Activity，否则，onNewIntent+ClearTop。


- 启动的时候，会先在系统中查找属性值affinity等于它的属性值taskAffinity的Task存在
- 注意会ClearTop
- 他的上面可以有其他的Activity。这点与singleInstance是有区别的。
#### singleTask适合作为程序入口点。

- 例如浏览器的主界面。不管从多少个应用启动浏览器，只会启动主界面一次，其余情况都会走onNewIntent，并且会清空主界面上面的其他页面。
- WebView页面、扫一扫页面、电商中：购物界面，确认订单界面，付款界面





## Activity Launch Mode: singleInstance

singleInstance，回退栈中，只有这一个Activity，没有其他Activity。


#### singleInstance应用场景：

- 闹铃的响铃界面。返回就是用户上一个应用的界面，而不是闹钟的task 栈的activity
- 此启动模式和我们使用的浏览器工作原理类似，我们都知道在多个程序中访问浏览器时，如果当前浏览器没有打开，则打开浏览器，否则会在当前打开的浏览器中访问
- 系统Launcher、锁屏键、来电显示等系统应用



## Android动画
- View动画
- 帧动画
- 属性动画



## Android动画: View动画
#### 简易的动画效果

- 仅仅是动的 View 的绘制地方，View 真正的位置并没有一起动画
- 一般会用作直接作用页面中的 View 上，实现基本的动画效果：平移、旋转、缩放、透明度、或前几者的交集
   - 平移动画-TranslateAnimation
   - 缩放动画-ScaleAnimation
   - 旋转动画-RotateAnimation
   - 透明度动画-AlphaAnimation

#### 自定义View动画
自定义View动画是数学中矩阵变换的细节, 只需要知道自定义View的方法并且在需要的时候参考矩阵变换的细节就可以写出特定的自定义动画

- 集成Animation抽象类
- 重写initialize方法， 做一些初始化工作
- 重写applyTransformation方法，进行相对应的矩阵变换

#### View动画的特殊使用场景

- ViewGroup中控制子元素的出场效果
   - 为子元素定义入场动画-res/anim/anim_item.xml
```xml
&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;
&amp;lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:duration=&quot;300&quot;
    android:interpolator=&quot;@android:anim/accelerate_interpolator&quot;
    android:shareInterpolator=&quot;true&quot;&amp;gt;
    &amp;lt;alpha
        android:fromAlpha=&quot;0.0&quot;
        android:toAlpha=&quot;1.0&quot; /&amp;gt;
    &amp;lt;translate
        android:fromXDelta=&quot;500&quot;
        android:toXDelta=&quot;0.0&quot;/&amp;gt;
&amp;lt;/set&amp;gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;定义LayoutAnimation,-res/anim/anim_layout.xml.   也是view动画，为ViewGroup的子元素加上出场效果
```xml
&amp;lt;?xml version=”1.0” encoding=”utf-8”?&amp;gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;layoutAnimation xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:delay=&quot;0.5&quot; android:animationOrder=&quot;normal&quot; android:animation=&quot;@anim/anim_item&quot;&gt;
&lt;/layoutAnimation&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;
   - 为ViewGroup来指定android:layoutAnimation属性

```xml
&amp;lt;ListView
    //........      
    android: layoutAnimation=&quot;@ anim/ anim_ layout&quot;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Activity实现不同Activity之间的切换效果， 调用overridePendingTransition(**int **enterAnim, **int **exitAnim)
    &lt;ul&gt;
      &lt;li&gt;enterAnim-Activity被打开时，所需的动画资源id&lt;/li&gt;
      &lt;li&gt;exitAnim-Activity被暂停时，所需的动画资源id&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;//启动Activity        &lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Intent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;startActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;overridePendingTransition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;anim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;enter_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;anim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;anim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exit_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;anim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//退出Activity&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;finish&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;finish&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;overridePendingTransition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;anim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;enter_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;anim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;anim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exit_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;anim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Fragment添加切换动画, 通过FragmentTransaction的setCustomAnimations&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;android动画-帧动画&quot;&gt;Android动画: 帧动画&lt;/h2&gt;
&lt;p&gt;就和看的动画片一样，每一帧代表一个画面动作，当快速逐帧显示时，速度到达人眼无法分辨每一帧时，就达到了动画的效果。使用场景，在开发中使用的真是少之又少：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;设备的开关机动画&lt;/li&gt;
  &lt;li&gt;“复杂” 的动画效果，看似不可能完成的动画
    &lt;blockquote&gt;
      &lt;p&gt;其实真正用到帧动画时，更多的时候我们还不如使用 GIF 图片代替，现在几个主流图片加载框架都支持 GIF 图片，同时也能控制 GIF 的播放时机。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;帧动画使用&quot;&gt;帧动画使用&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;通过xml来定义AnimationDrawable&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;animation-list&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:android=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:oneshot=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:drawable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@drawable/account&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:duration=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;500&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:drawable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@drawable/account_2x&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:duration=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;500&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:drawable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@drawable/account_3x&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:duration=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;500&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/animation-list&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;将上述Drawable作为View的背景，并且通过Drawable来播放动画&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;        &lt;span class=&quot;nc&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mButton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;findViewById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;button1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mButton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setBackgroundResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;drawable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;frame_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;AnimationDrawable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drawable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;AnimationDrawable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mButton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBackground&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;drawable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;android动画-属性动画&quot;&gt;Android动画: 属性动画&lt;/h2&gt;
&lt;h4 id=&quot;原理&quot;&gt;原理&lt;/h4&gt;
&lt;p&gt;属性动画要求动画作用的对象提供该属性的get和set方法，属性动画根据外接传递的该属性的初始值和最终值，以动画的效果多次去调用set方法，每次传递给set方法的值都不一样，确切来说是随着时间的推移，所传递的值越来越接近最终值。对object的属性abc做动画，要让动画生效，需要满足两个条件&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;object提供属性的方法
    &lt;ul&gt;
      &lt;li&gt;setAbc方法&lt;/li&gt;
      &lt;li&gt;getAbc方法–如果动画没有传递初始值，因为系统要获取属性的初始值，否则会crash&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;object的属性改变必须能够通过某种方式反映出来， 譬如UI的改变之类，否则就是动画无效果了&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;否则&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;给对象加上get和set方法–前提是有权限&lt;/li&gt;
  &lt;li&gt;用一个类来包装原始对象，间接为其提供get和set方法&lt;/li&gt;
  &lt;li&gt;使用ValueAnimator，监听动画过程，自己实现属性改变&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;view动画-vs-属性动画&quot;&gt;view动画 vs 属性动画&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;View 动画只能为 View 添加动画效果，且不能监听 View 相关属性的变化过程。&lt;/li&gt;
  &lt;li&gt;View 动画提供的动画能力较为单一，目前只支持帧动画、缩放动画、位移动画、旋转动画、透明度动画以及这些动画的集合动画。&lt;/li&gt;
  &lt;li&gt;View动画改变的是 View 的绘制效果，View 的真正位置和相关属性并不会改变，这也就造成了点击事件的触发区域是动画前的位置而不是动画后的位置的原因。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;属性动画&quot;&gt;属性动画&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;属性动画作用对象不局限在 View 上，而是任何提供了 Getter 和 Setter 方法的对象的属性上。&lt;/li&gt;
  &lt;li&gt;属性动画没有直接改变 View 状态的能力，而是通过动态改变 View 相关属性的方式来改变 View 的显示效果。&lt;/li&gt;
  &lt;li&gt;属性动画使用更方便，可以用更简洁的代码实现相关的动画效果。&lt;/li&gt;
  &lt;li&gt;属性动画上手难度较高，对于 propertyName 需要自己去挖掘，或者自己通过 Wrapper 的方式去自定义 propertyName。&lt;/li&gt;
  &lt;li&gt;属性动画是 Android3.0 以上系统提供的能力，在 3.0 以下需导入 nineoldandroids 三方库解决兼容性问题。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;使用动画注意事项&quot;&gt;使用动画注意事项&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;OOM–帧动画图片数量多或者较大的时候容易出现OOM&lt;/li&gt;
  &lt;li&gt;内存泄露
    &lt;ul&gt;
      &lt;li&gt;属性动画有一类无限循环的动画， 需要在Activity退出的时候及时停止否则会内存泄露&lt;/li&gt;
      &lt;li&gt;View动画不存在该问题&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;进行动画尽量使用dp，因为px会在不同设备上有不同的效果&lt;/li&gt;
  &lt;li&gt;硬件加速-开启硬件加速会提高动画流畅性&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;handler&quot;&gt;handler&lt;/h2&gt;

&lt;p&gt;参考：
&lt;a href=&quot;https://my.oschina.net/u/3863980/blog/1933086&quot;&gt;handler&amp;amp;&amp;amp;epoll&lt;/a&gt;
&lt;a href=&quot;https://blog.csdn.net/qingtiantianqing/article/details/72783952&quot;&gt;https://blog.csdn.net/qingtiantianqing/article/details/72783952&lt;/a&gt;
&lt;a href=&quot;https://www.jianshu.com/p/44b322dfc040&quot;&gt;https://www.jianshu.com/p/44b322dfc040&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;handlerlooper&quot;&gt;Handler:looper&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;每个线程有且最多只能有一个Looper对象，它是一个ThreadLocal&lt;/li&gt;
  &lt;li&gt;Looper内部有一个消息队列，loop()方法调用后线程开始不断从队列中取出消息执行
    &lt;ul&gt;
      &lt;li&gt;消息列表采用单链表结构&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Looper使一个线程变成Looper线程。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HandlerActivity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AppCompatActivity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;setContentView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;activity_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SampleTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MyHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;updateTextView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;textView3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;inner&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyHandler&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handleMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;updateTextView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;prepareMainLooper方法给主线程创建looper，也提供了getMainLooper方法来获取主线程的Looper&lt;/li&gt;
  &lt;li&gt;Looper提供了两种方法退出
    &lt;ul&gt;
      &lt;li&gt;quit–会直接退出Looper&lt;/li&gt;
      &lt;li&gt;quitSafely–只是设定一个退出标志，把消息队列里面的已有消息处理完毕后才安全退出&lt;/li&gt;
      &lt;li&gt;在子线程如果手动创建了Looper，事情完成之后应该调用quit方法终止消息循环
        &lt;ul&gt;
          &lt;li&gt;不退出，该子线程会一直处于等待状态&lt;/li&gt;
          &lt;li&gt;退出后线程会立即终止&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Looper最重要的方法是loop方法，只有调用了loop方法之后消息循环系统才会真正起作用
    &lt;ul&gt;
      &lt;li&gt;loop方法会调用MessageQueue的next方法来获取新消息，而next是一个阻塞操作，当没有消息时，next方法会一直阻塞在那里，这也导致loop方法一直阻塞在那里&lt;/li&gt;
      &lt;li&gt;如果MessageQueue的next方法返回了新消息，Looper就会处理这条消息&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Looper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;me&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myLooper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MessageQueue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//..&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(;;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// might block&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dispatchMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//msg.target是发送这条消息的Handler对象&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * Handler.java
     * Handle system messages here.
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dispatchMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;callback&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;handleCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mCallback&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;handleMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;handleMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;handler通过handler引用&quot;&gt;Handler:通过handler引用&lt;/h2&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SampleTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Runnable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;prepareMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;task completed!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sendMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InterruptedException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TAG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;interrupted!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;prepareMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;obtainMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;putString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;companion&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;TAG&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;SampleTask&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;handlerhandler&quot;&gt;Handler:handler&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;handler扮演了往MQ上添加消息和处理消息的角色（只处理由自己发出的消息）&lt;/li&gt;
  &lt;li&gt;通知MQ它要执行一个任务(sendMessage)，并在loop到自己的时候执行该任务(handleMessage)，整个过程是异步的&lt;/li&gt;
  &lt;li&gt;一个线程可以有多个handler， 但是只能有一个looper&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LooperThread&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lateinit&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;handler1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Handler&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lateinit&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;handler2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Handler&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 将当前线程初始化为Looper线程&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Looper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;prepare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;handler1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;handler2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// 开始循环处理消息队列&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Looper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;handler-sendconsumecooperate&quot;&gt;handler: send/consume/cooperate&lt;/h2&gt;

&lt;h3 id=&quot;handler可以在任意线程发送消息这些消息会被添加到关联的mq上&quot;&gt;handler可以在&lt;strong&gt;任意线程发送消息&lt;/strong&gt;，这些消息会被添加到关联的MQ上。&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;../images/handler_send_msg.png&quot; alt=&quot;handler1.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;handler是在它关联的looper线程中处理消息的&quot;&gt;handler是在它&lt;strong&gt;关联的looper线程中处理消息&lt;/strong&gt;的。&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;../images/handler_consume_msg.png&quot; alt=&quot;handler2.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;在activity中创建handler并将其引用传递给worker-threadworker-thread执行完任务后使用handler发送消息通知activity更新ui&quot;&gt;在activity中创建handler并将其引用传递给worker thread，worker thread执行完任务后使用handler发送消息通知activity更新UI&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;../images/handle_cooperate.png&quot; alt=&quot;handler3.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;handler-epoll&quot;&gt;handler: epoll&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;select、poll、epoll都是IO多路复用
    &lt;ul&gt;
      &lt;li&gt;select-select支持的文件描述符数量太小了，默认是1024， 轮询&lt;/li&gt;
      &lt;li&gt;poll- 没有最大连接数，基于链表，轮询&lt;/li&gt;
      &lt;li&gt;epoll- callback&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;epoll
    &lt;ul&gt;
      &lt;li&gt;epoll_create()： 创建一个epoll实例并返回相应的文件描述符&lt;/li&gt;
      &lt;li&gt;epoll_ctl()： 注册相关的文件描述符使用&lt;/li&gt;
      &lt;li&gt;epoll_wait()： 可以用于等待IO事件。如果当前没有可用的事件，这个函数会阻塞调用线程&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;handler-handler创建epoll&quot;&gt;handler: handler创建epoll&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;调用关系
    &lt;ul&gt;
      &lt;li&gt;MessageQueue初始化-&amp;gt;nativeInit()-&amp;gt;NativeMessageQueue()-&amp;gt;Looper(false)-&amp;gt;epoll_create-&amp;gt;epoll_ctl&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nl&quot;&gt;Looper:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Looper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allowNonCallbacks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mAllowNonCallbacks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allowNonCallbacks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mSendingMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mResponseIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mNextMessageUptime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;LLONG_MAX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wakeFds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wakeFds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;LOG_ALWAYS_FATAL_IF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Could not create wake pipe.  errno=%d&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errno&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;mWakeReadPipeFd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wakeFds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mWakeWritePipeFd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wakeFds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mIdling&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Allocate the epoll instance and register the wake pipe.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mEpollFd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;epoll_create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EPOLL_SIZE_HINT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;LOG_ALWAYS_FATAL_IF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mEpollFd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Could not create epoll instance.  errno=%d&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errno&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;epoll_event&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventItem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;memset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventItem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;epoll_event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// zero out unused members of data field union&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;eventItem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;events&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EPOLLIN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//监听管道的read()操作&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;eventItem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mWakeReadPipeFd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//记录管道读端的fd&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;epoll_ctl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mEpollFd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EPOLL_CTL_ADD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mWakeReadPipeFd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventItem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;handler-handler中looper通过轮询获取message&quot;&gt;handler: Handler中looper通过轮询获取message&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Looper.loop中for循环获取消息
    &lt;ul&gt;
      &lt;li&gt;Message msg = queue.next();-&amp;gt;nativePollOnce-&amp;gt;nativeMessageQueue-&amp;gt;pollOnce-&amp;gt;pollInner()&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;Looper:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pollInner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeoutMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Poll.&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;POLL_WAKE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mResponses&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mResponseIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// We are about to idle.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mIdling&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;epoll_event&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventItems&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EPOLL_MAX_EVENTS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//等待事件发生或者超时，在nativeWake()方法，向管道写端写入字符，则该方法会返回；&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;epoll_wait&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mEpollFd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventItems&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EPOLL_MAX_EVENTS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeoutMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// No longer idling.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mIdling&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Acquire lock.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventItems&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;epollEvents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventItems&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mWakeReadPipeFd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;epollEvents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EPOLLIN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;awoken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;no&quot;&gt;ALOGW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Ignoring unexpected epoll events 0x%x on wake read pipe.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;epollEvents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
           &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;Done:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;最终调用awaken&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;Looper:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;awoken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ssize_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nRead&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//不断读取管道数据，目的就是为了清空管道内容&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;nRead&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mWakeReadPipeFd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nRead&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errno&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EINTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nRead&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;总结
    &lt;ul&gt;
      &lt;li&gt;Looper::loop中for循环不断调用next()从自己的链表中获取message，但是获取前先nativePollOnce进入阻塞状态，线程会释放资源进入休眠状态，直到下个消息到达或者有事务发生，通过往pipe管道写端写入数据来唤醒主线程工作&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;handler-handler通过sendmessage最终给管道写数据&quot;&gt;handler: handler通过sendmessage最终给管道写数据&lt;/h2&gt;
&lt;p&gt;将消息push到MessageQueue中时候，即MessageQueue.enqueueMessages(…)方法中&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;handler&lt;/strong&gt;.sendMessage(msg)
    &lt;ul&gt;
      &lt;li&gt;sendMessageDelayed(msg, 0);
        &lt;ul&gt;
          &lt;li&gt;sendMessageAtTime(msg, SystemClock.&lt;em&gt;uptimeMillis&lt;/em&gt;() + delayMillis);
            &lt;ul&gt;
              &lt;li&gt;enqueueMessage(queue, msg, uptimeMillis)
                &lt;ul&gt;
                  &lt;li&gt;queue.enqueueMessage(msg, uptimeMillis);先入列后调用wake
                    &lt;ul&gt;
                      &lt;li&gt;&lt;em&gt;nativeWake&lt;/em&gt;(&lt;strong&gt;mPtr&lt;/strong&gt;);—&amp;gt;
                        &lt;ul&gt;
                          &lt;li&gt;Looper-&amp;gt;wake
                            &lt;ul&gt;
                              &lt;li&gt;write()&lt;/li&gt;
                            &lt;/ul&gt;
                          &lt;/li&gt;
                        &lt;/ul&gt;
                      &lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;Looper:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wake&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DEBUG_POLL_AND_WAKE&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;ALOGD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%p ~ wake&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endif&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;ssize_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nWrite&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;nWrite&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mWakeWritePipeFd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;W&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//进行了写操作&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nWrite&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errno&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EINTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nWrite&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errno&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EAGAIN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;no&quot;&gt;ALOGW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Could not write wake signal, errno=%d&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errno&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;handler&lt;/strong&gt;.postDelayed(runnable, time)
    &lt;ul&gt;
      &lt;li&gt;sendMessageDelayed(&lt;em&gt;getPostMessage&lt;/em&gt;(r), delayMillis);
        &lt;ul&gt;
          &lt;li&gt;同上&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;handler.postDelay并不是先等待一定的时间再放入到MessageQueue中，而是直接进入MessageQueue，以MessageQueue的时间顺序排列和唤醒的方式结合实现的
    &lt;ul&gt;
      &lt;li&gt;MessageQueue的next()方法，会根据其delay时间和链表头的比较，如果更短则，放入链表头，并且看时间是否有delay，
        &lt;ul&gt;
          &lt;li&gt;如果有，则block，等待时间到来唤醒执行，
            &lt;ul&gt;
              &lt;li&gt; Looper::pollInner(int timeoutMillis)
                &lt;ul&gt;
                  &lt;li&gt;epoll_wait(mEpollFd, eventItems, EPOLL_MAX_EVENTS, timeoutMillis);&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;否则将唤醒立即执行。&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;epoll_wait(mEpollFd, eventItems, EPOLL_MAX_EVENTS, timeoutMillis)
        &lt;ul&gt;
          &lt;li&gt;timeoutMillis == -1, causes &lt;strong&gt;epoll_wait&lt;/strong&gt;() to block indefinitely,&lt;/li&gt;
          &lt;li&gt;timeoutMillis == 0, cause &lt;strong&gt;epoll_wait&lt;/strong&gt;() to return immediately&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;发送消息, MessageQueue.enqueueMessage(Message msg, **long **when)会根据时间把message插入到合适位置
    &lt;ul&gt;
      &lt;li&gt;sendMessageAtFrontOfQueue //插入到队列首部
        &lt;ul&gt;
          &lt;li&gt;enqueueMessage(queue, msg, 0); //最后的参数uptimeMillis是0，保证了在队首&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;postDelayed
        &lt;ul&gt;
          &lt;li&gt;sendMessageDelayed(&lt;em&gt;getPostMessage&lt;/em&gt;(r), delayMillis)
            &lt;ul&gt;
              &lt;li&gt;sendMessageAtTime(msg, SystemClock.&lt;em&gt;uptimeMillis&lt;/em&gt;() + delayMillis); //boot 2 now+delay
                &lt;ul&gt;
                  &lt;li&gt;enqueueMessage(queue, msg, uptimeMillis);&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;sendMessage(Message msg)
        &lt;ul&gt;
          &lt;li&gt;sendMessageDelayed(msg, 0)
            &lt;ul&gt;
              &lt;li&gt;sendMessageAtTime(msg, SystemClock.&lt;em&gt;uptimeMillis&lt;/em&gt;() + delayMillis);
                &lt;ul&gt;
                  &lt;li&gt;//同上&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;send总结&quot;&gt;send总结&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;消息是通过MessageQueen中的enqueueMessage()方法加入消息队列中的，并且它在放入中就进行好排序，链表头的延迟时间小，尾部延迟时间最大&lt;/li&gt;
  &lt;li&gt;enqueueMessage–非延迟消息
    &lt;ul&gt;
      &lt;li&gt;插入头部，然后唤醒&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;enqueueMessage–延迟消息
    &lt;ul&gt;
      &lt;li&gt;插入合适位置，然后唤醒&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 08 Aug 2021 00:00:00 +0800</pubDate>
        <link>https://thomasliao.cn/2021/08/08/android/</link>
        <guid isPermaLink="true">https://thomasliao.cn/2021/08/08/android/</guid>
        
        
      </item>
    
      <item>
        <title>Audio Video</title>
        <description>&lt;h2 id=&quot;questions&quot;&gt;questions&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;B帧&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;abbreviation&quot;&gt;abbreviation&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;sps : sequence parameter set&lt;/li&gt;
  &lt;li&gt;pps : picture parameter set&lt;/li&gt;
  &lt;li&gt;IDR帧（Instantaneous Decoding Refresh Picture）&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;reference&quot;&gt;reference&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.huaweicloud.com/articles/bca73e0ba03a22bc004ec3bf695130c2.html&quot;&gt;【codecs】音视频编解码开源项目大汇总&lt;/a&gt;
&lt;a href=&quot;https://help.aliyun.com/document_detail/99380.html?spm=a2c4g.11186623.6.554.6b175fac3bQeEJ&quot;&gt;视频点播&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;帧率&quot;&gt;帧率&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;每一张图片，我们称为一帧。&lt;/li&gt;
  &lt;li&gt;只要每秒钟帧的数据足够多，也即播放得足够快。比如每秒 30 帧，以人的眼睛的敏感程度，是看不出这是一张张独立的图片的&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;码率码流&quot;&gt;码率、码流&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;码率（Bitrate）是指视频文件在单位时间内使用的数据流量，也叫码流或码流率&lt;/li&gt;
  &lt;li&gt;量度单位为“比特每秒”（bit/s或bps），常使用Kbps（每秒多少千个比特）或Mbps&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;编码&quot;&gt;编码&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;编码是一个压缩的过程&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;转码&quot;&gt;转码&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;视频转码（Video Transcoding）是指将已经压缩编码的视频码流转换成另一个视频码流，以适应不同的网络带宽、不同的终端处理能力和不同的用户需求。&lt;/li&gt;
  &lt;li&gt;转码本质上是一个先解码、再编码的过程，因此转换前后的码流可能遵循相同的视频编码标准，也可能不遵循相同的视频编码标准。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;转封装&quot;&gt;转封装&lt;/h2&gt;
&lt;p&gt;转封装指的是将视频或音频的封装格式进行转换，如将AVI的视频转换为MP4&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;其间并不会进行音视频的编码和解码工作，&lt;/li&gt;
  &lt;li&gt;而是直接将视频和音频压缩码流从一种封装格式文件中获取出来然后打包成另一种封装格式的文件
    &lt;ul&gt;
      &lt;li&gt;处理速度极快–转封装不需要进行编码和解码&lt;/li&gt;
      &lt;li&gt;音视频质量无损&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;频和图片的压缩过程特点&quot;&gt;频和图片的压缩过程特点&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;空间冗余：
    &lt;ul&gt;
      &lt;li&gt;图像的相邻像素之间有较强的相关性，一张图片相邻像素往往是渐变的，不是突变的，没必要每个像素都完整地保存，可以隔几个保存一个，中间的用算法计算出来。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;时间冗余：
    &lt;ul&gt;
      &lt;li&gt;视频序列的相邻图像之间内容相似。&lt;/li&gt;
      &lt;li&gt;一个视频中连续出现的图片也不是突变的，可以根据已有的图片进行预测和推断。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;视觉冗余：
    &lt;ul&gt;
      &lt;li&gt;人的视觉系统对某些细节不敏感，因此不会每一个细节都注意到，&lt;/li&gt;
      &lt;li&gt;可以允许丢失一些数据。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;编码冗余：
    &lt;ul&gt;
      &lt;li&gt;不同像素值出现的概率不同，概率高的用的字节少，概率低的用的字节多，&lt;/li&gt;
      &lt;li&gt;类似霍夫曼编码（Huffman Coding）的思路。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;编码过程&quot;&gt;编码过程&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;用于编码的算法非常复杂，而且多种多样，但是编码过程其实都是类似的&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;../images/video-encode.webp&quot; alt=&quot;video-encode&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;视频编码的两大流派&quot;&gt;视频编码的两大流派&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;ITU（International Telecommunications Union）的 VCEG（Video Coding Experts Group）
    &lt;ul&gt;
      &lt;li&gt;主要侧重传输&lt;/li&gt;
      &lt;li&gt;H.261、 H.262、H.263、H.264、H.265&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ISO（International Standards Organization）的 MPEG（Moving Picture Experts Group）
    &lt;ul&gt;
      &lt;li&gt;ISO 旗下的 MPEG，本来是做视频存储的。例如，编码后保存在 VCD 和 DVD 中。当然后来也慢慢侧重视频传输&lt;/li&gt;
      &lt;li&gt;MPEG-1、MPEG-2、MPEG-4、MPEG-7&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;经过编码之后，生动活泼的一帧一帧的图像，就变成了一串串让人看不懂的二进制
    &lt;ul&gt;
      &lt;li&gt;AVI、MPEG、RMVB、MP4、MOV、FLV、WebM、WMV、ASF、MKV
        &lt;ul&gt;
          &lt;li&gt;就是视频保存成文件的格式&lt;/li&gt;
          &lt;li&gt;前几个字节是什么意义，后几个字节是什么意义，然后是数据，数据中保存的就是编码好的结果&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;ITU-T（国际电信联盟电信标准化部门，ITU Telecommunication Standardization Sector）与 MPEG 联合制定了 H.264/MPEG-4 AVC&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;视频播放器原理1&quot;&gt;视频播放器原理1&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;视频播放器播放一个互联网上的视频文件
    &lt;ul&gt;
      &lt;li&gt;解协议，解封装，解码视音频，视音频同步&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;播放本地文件则不需要解协议
    &lt;ul&gt;
      &lt;li&gt;解封装，解码视音频，视音频同步&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://img-blog.csdn.net/20140201120523046?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGVpeGlhb2h1YTEwMjA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;process&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;视频播放器原理2&quot;&gt;视频播放器原理2&lt;/h2&gt;

&lt;h3 id=&quot;解协议&quot;&gt;解协议&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;流媒体协议数据 -&amp;gt; 标准的相应的封装格式数据
    &lt;ul&gt;
      &lt;li&gt;e.g.  采用RTMP协议传输的数据，经过解协议操作后，输出FLV格式的数据&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;各种流媒体协议，例如HTTP，RTMP，或是MMS等等&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;解封装&quot;&gt;解封装&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;封装格式的数据 -&amp;gt; 音频流压缩编码数据 + 视频流压缩编码数据&lt;/li&gt;
  &lt;li&gt;封装格式:
    &lt;ul&gt;
      &lt;li&gt;MP4，MKV，RMVB，TS，FLV，AVI等等&lt;/li&gt;
      &lt;li&gt;作用: 将已经压缩编码的视频数据和音频数据按照一定的格式放到一起
        &lt;ul&gt;
          &lt;li&gt;e.g. FLV格式的数据 -&amp;gt; H.264编码的视频码流 + AAC编码的音频码流&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;解码&quot;&gt;解码&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;视频/音频压缩编码数据 -&amp;gt; 非压缩的视频/音频原始数据&lt;/li&gt;
  &lt;li&gt;编码标准
    &lt;ul&gt;
      &lt;li&gt;音频: AAC，MP3，AC-3等等&lt;/li&gt;
      &lt;li&gt;视频: H.264，MPEG2，VC-1等等&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;解码是整个系统中最重要也是最复杂的一个环节
    &lt;ul&gt;
      &lt;li&gt;压缩编码的视频数据-&amp;gt;非压缩的颜色数据，例如YUV420P，RGB等等&lt;/li&gt;
      &lt;li&gt;压缩编码的音频数据-&amp;gt;非压缩的音频抽样数据，例如PCM数据&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;音视频同步&quot;&gt;音视频同步&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;根据解封装模块处理过程中获取到的参数信息，同步解码出来的视频和音频数据&lt;/li&gt;
  &lt;li&gt;将视频音频数据送至系统的显卡和声卡播放出来&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;rtmp&quot;&gt;RTMP&lt;/h2&gt;

&lt;h2 id=&quot;h264&quot;&gt;h.264&lt;/h2&gt;

&lt;h2 id=&quot;h265&quot;&gt;h.265&lt;/h2&gt;

</description>
        <pubDate>Wed, 02 Jun 2021 00:00:00 +0800</pubDate>
        <link>https://thomasliao.cn/2021/06/02/audio-video/</link>
        <guid isPermaLink="true">https://thomasliao.cn/2021/06/02/audio-video/</guid>
        
        
      </item>
    
      <item>
        <title>computer-network</title>
        <description>&lt;h1 id=&quot;computer-networks&quot;&gt;computer networks&lt;/h1&gt;

&lt;h2 id=&quot;12-network-hardware&quot;&gt;1.2 network hardware&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;taxonomy of computer networks
    &lt;ul&gt;
      &lt;li&gt;transmission technology
        &lt;ul&gt;
          &lt;li&gt;broadcast links
            &lt;ul&gt;
              &lt;li&gt;A wireless network&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;broadcasting: every machine&lt;/li&gt;
          &lt;li&gt;multicasting: subset of the machines&lt;/li&gt;
          &lt;li&gt;point-to-point links, sometimes called unicasting&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;scale
        &lt;ul&gt;
          &lt;li&gt;PANs (Personal Area Networks)
            &lt;ul&gt;
              &lt;li&gt;Bluetooth
                &lt;ul&gt;
                  &lt;li&gt;The master tells the slaves
                    &lt;ul&gt;
                      &lt;li&gt;what addresses to use,&lt;/li&gt;
                      &lt;li&gt;when they can broadcast,&lt;/li&gt;
                      &lt;li&gt;how long they can transmit,&lt;/li&gt;
                      &lt;li&gt;what frequencies they can use,and so on&lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;LAN (Local Area Network)
            &lt;ul&gt;
              &lt;li&gt;a standard for wireless LANs called IEEE 802.11, popularly known as WiFi&lt;/li&gt;
              &lt;li&gt;IEEE 802.3, popularly called Ethernet, is, by far, the most common type of wired LAN.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;MAN (Metropolitan Area Network)&lt;/li&gt;
          &lt;li&gt;WAN (Wide Area Network)&lt;/li&gt;
          &lt;li&gt;Internetworks
            &lt;ul&gt;
              &lt;li&gt;A collection of interconnected networks is called an internetwork or internet.&lt;/li&gt;
              &lt;li&gt;worldwide Internet (is one specific internet)&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;131-protocol-hierarchies&quot;&gt;1.3.1 Protocol Hierarchies&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;each layer passes data and control information to the layer immediately below it, until the lowest layer is reached.&lt;/li&gt;
  &lt;li&gt;It is common that different hosts use different implementations of the same protocol&lt;/li&gt;
  &lt;li&gt;the lower layers of a protocol hierarchy are frequently implemented in hardware or firmware&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;132-design-issues-for-the-layers&quot;&gt;1.3.2 Design Issues for the Layers&lt;/h2&gt;

&lt;h3 id=&quot;reliability&quot;&gt;Reliability&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;bits are damaged
    &lt;ul&gt;
      &lt;li&gt;errors:
        &lt;ul&gt;
          &lt;li&gt;fluke electrical noise,&lt;/li&gt;
          &lt;li&gt;random wireless signals,&lt;/li&gt;
          &lt;li&gt;hardware flaws,&lt;/li&gt;
          &lt;li&gt;software bugs and so on&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;solution: adding redundant information, used at low layers, to protect packets sent over individual links,and high layers, to check that the right contents were received
        &lt;ul&gt;
          &lt;li&gt;error detection
            &lt;ul&gt;
              &lt;li&gt;Information that is incorrectly received can then be retransmitted, until it is received correctly&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;error correction
            &lt;ul&gt;
              &lt;li&gt;where the correct message is recovered from the possibly incorrect bits that were originally received&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;finding a working path through a network
    &lt;ul&gt;
      &lt;li&gt;may be some links or routers that are broken&lt;/li&gt;
      &lt;li&gt;routing: The network should automatically make this decision&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-evolution-of-the-network&quot;&gt;the evolution of the network&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;protocol layering
    &lt;ul&gt;
      &lt;li&gt;internetworking, different network technologies often have different limitations .ex:
        &lt;ul&gt;
          &lt;li&gt;number messages
            &lt;ul&gt;
              &lt;li&gt;not all communication channels preserve the order of messages sent on them&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;differences in the maximum size of a message that the networks can transmit
            &lt;ul&gt;
              &lt;li&gt;disassembling, transmitting, and then reassembling messages&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;traffic jams&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;resource-allocation&quot;&gt;resource allocation&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;statistical multiplexing
    &lt;ul&gt;
      &lt;li&gt;share the bandwith dynamically, rather than by giving each host a fixed fraction&lt;/li&gt;
      &lt;li&gt;sharing based on the statistics of demand&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;how to keep a fast sender from swamping a slow receiver with data
    &lt;ul&gt;
      &lt;li&gt;flow control: feedback from the receiver&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;congestion: network is oversubscribed, overloading
    &lt;ul&gt;
      &lt;li&gt;too many computers want to send too much traffic&lt;/li&gt;
      &lt;li&gt;the network cannot deliver it all&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;resource
    &lt;ul&gt;
      &lt;li&gt;bandwidth&lt;/li&gt;
      &lt;li&gt;timeliness
        &lt;ul&gt;
          &lt;li&gt;live video&lt;/li&gt;
          &lt;li&gt;real-time&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;security&quot;&gt;security&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;eavesdropping[ secretly listening to the private conversation]
    &lt;ul&gt;
      &lt;li&gt;solution: provide confidentiality
        &lt;ul&gt;
          &lt;li&gt;authentication: prevent someone from impersonating someone else&lt;/li&gt;
          &lt;li&gt;integrity: prevent surreptitious changes to messages&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;133-connection-oriented-versus-connectionless-service&quot;&gt;1.3.3 Connection-Oriented Versus Connectionless Service&lt;/h2&gt;

&lt;h3 id=&quot;connection-oriented&quot;&gt;Connection-oriented&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Connection-oriented service is modeled after the telephone system.
    &lt;ul&gt;
      &lt;li&gt;establish&lt;/li&gt;
      &lt;li&gt;use&lt;/li&gt;
      &lt;li&gt;release&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;service is modeled after the telephone system.&lt;/li&gt;
  &lt;li&gt;A circuit is another name for a connection with associated resources
    &lt;ul&gt;
      &lt;li&gt;fixed bandwidth&lt;/li&gt;
      &lt;li&gt;in some case negotiation parameters
        &lt;ul&gt;
          &lt;li&gt;maximum message size&lt;/li&gt;
          &lt;li&gt;quality of service required&lt;/li&gt;
          &lt;li&gt;
            &lt;table&gt;
              &lt;tbody&gt;
                &lt;tr&gt;
                  &lt;td&gt;one side make proposal, the other accept&lt;/td&gt;
                  &lt;td&gt; &lt;/td&gt;
                  &lt;td&gt;reject&lt;/td&gt;
                  &lt;td&gt; &lt;/td&gt;
                  &lt;td&gt;make a counterproposal&lt;/td&gt;
                &lt;/tr&gt;
              &lt;/tbody&gt;
            &lt;/table&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;acts like a tube:
        &lt;ul&gt;
          &lt;li&gt;sender pushes at one end , receiver takes them at the other end&lt;/li&gt;
          &lt;li&gt;in most case the order is preserved: bits arrive in the order they were sent&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;connectionless-service&quot;&gt;Connectionless Service&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;connectionless service is modeled after the postal system
    &lt;ul&gt;
      &lt;li&gt;each msg carries the full destination address&lt;/li&gt;
      &lt;li&gt;a packet is a message at the network layer&lt;/li&gt;
      &lt;li&gt;store-and-forward switching：
        &lt;ul&gt;
          &lt;li&gt;nodes receive a message in full before sending it to the next&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;cut-through switching:
        &lt;ul&gt;
          &lt;li&gt;onward transmission of a message at a node starts before it is completely received&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;order is not consistant because of delayed&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;reliability-1&quot;&gt;reliability&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;both Connection-Oriented or Connectionless Service  can further be characterized by its reliability&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;implemented by having the receiver acknowledge the receipt of each msg&lt;/li&gt;
    &lt;li&gt;Reliable connection-oriented service has two minor variations:
      &lt;ul&gt;
        &lt;li&gt;message sequences
          &lt;ul&gt;
            &lt;li&gt;message boundaries are preserved&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;byte streams
          &lt;ul&gt;
            &lt;li&gt;no message boundaries&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Unreliable (meaning not acknowledged) connectionless service is often called datagram service
      &lt;ul&gt;
        &lt;li&gt;does not return an acknowledgement to the sender&lt;/li&gt;
        &lt;li&gt;dominant form in most networks
          &lt;ul&gt;
            &lt;li&gt;reliable communication (in our sense, that is,acknowledged) may not be available in a given layer
              &lt;ul&gt;
                &lt;li&gt;Ethernet does not provide reliable communication&lt;/li&gt;
                &lt;li&gt;many reliable services are built on top of an unreliable datagram service&lt;/li&gt;
                &lt;li&gt;the delays inherent in providing a reliable service may be unacceptable, especially in real-time applications such as multimedia&lt;/li&gt;
              &lt;/ul&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;134-service-primitives&quot;&gt;1.3.4 Service Primitives&lt;/h2&gt;

&lt;h3 id=&quot;a-service-is-formally-specified-by-a-set-of-primitives-operations-available-to-user-processes-to-access-the-service&quot;&gt;A service is formally specified by a set of primitives (operations) available to user processes to access the service&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;tell the service to perform some action or report on an action taken by a peer entity&lt;/li&gt;
  &lt;li&gt;system calls
    &lt;ul&gt;
      &lt;li&gt;cause a trap to kernel mode&lt;/li&gt;
      &lt;li&gt;send the necessary packets&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;primitives for connection-oriented service
&lt;a href=&quot;todo&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;steps&quot;&gt;steps&lt;/h3&gt;

&lt;h4 id=&quot;six-packets-are-required-to-complete-the-protocol&quot;&gt;six packets are required to complete the protocol&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;server executes LISTEN to indicate that it is prepared to accept incoming connections.
    &lt;ul&gt;
      &lt;li&gt;system call&lt;/li&gt;
      &lt;li&gt;server process blocked until a request for connection appears&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;send packets
    &lt;ul&gt;
      &lt;li&gt;1.client executes CONNECT to establish a connection with the server
        &lt;ul&gt;
          &lt;li&gt;sends a packet to the peer asking it to connect&lt;/li&gt;
          &lt;li&gt;parameter of server’s address&lt;/li&gt;
          &lt;li&gt;client suspended until a response&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;2.server can then establish the connection with the ACCEPT call
        &lt;ul&gt;
          &lt;li&gt;send a response to accept&lt;/li&gt;
          &lt;li&gt;arrival of response release the client
            &lt;ul&gt;
              &lt;li&gt;client &amp;amp;&amp;amp; server now both running and have a connection established&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;server to execute RECEIVE to prepare to accept the first request
    &lt;ul&gt;
      &lt;li&gt;block the server&lt;/li&gt;
      &lt;li&gt;when
        &lt;ul&gt;
          &lt;li&gt;normally immediately being released from the LISTEN&lt;/li&gt;
          &lt;li&gt;before the acknowledgement can get back to the client&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;send packets
    &lt;ul&gt;
      &lt;li&gt;3.client executes SEND to transmit its request
        &lt;ul&gt;
          &lt;li&gt;client: followed by execution of RECEIVE to get the reply&lt;/li&gt;
          &lt;li&gt;server: arrivial of request unblock the server to handle the request&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;4.server: use SEND to return the answer
        &lt;ul&gt;
          &lt;li&gt;client: arrivial of the packet unblock the cient&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;additional requsts can go on(if have)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;send packets
    &lt;ul&gt;
      &lt;li&gt;5.client: when done, executes DISCONNECT to terminate the connection
        &lt;ul&gt;
          &lt;li&gt;an initial DISCONNECT is a blocking call, suspending the client&lt;/li&gt;
          &lt;li&gt;sending a packet to the server saying that the connection is no longer needed&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;6.server: gets the packet
        &lt;ul&gt;
          &lt;li&gt;issues a DISCONNECT of its own&lt;/li&gt;
          &lt;li&gt;acknowledging the client and releasing the connection&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;client receive the packet
        &lt;ul&gt;
          &lt;li&gt;client process is released&lt;/li&gt;
          &lt;li&gt;connection is broken&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;issues&quot;&gt;issues&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;timing can be wrong (e.g., the CONNECT is done before the LISTEN),&lt;/li&gt;
  &lt;li&gt;packets can get lost&lt;/li&gt;
  &lt;li&gt;why not connectionless:
    &lt;ul&gt;
      &lt;li&gt;in perfect world only two packets would be needed
        &lt;ul&gt;
          &lt;li&gt;request&lt;/li&gt;
          &lt;li&gt;reply&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;but
        &lt;ul&gt;
          &lt;li&gt;large messages in either direction (e.g., a megabyte file),&lt;/li&gt;
          &lt;li&gt;transmission errors,&lt;/li&gt;
          &lt;li&gt;lost packets&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;problems-of-connectionless&quot;&gt;problems of connectionless&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;if packets lost, how would the client know if some pieces were missing?&lt;/li&gt;
  &lt;li&gt;How would the client know whether the last packet actually received was really the last packet sent?&lt;/li&gt;
  &lt;li&gt;How could it tell packet 1 from the second file from a lost packet 1 from the first file that suddenly found its way to the client?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;135-services-vs-protocols&quot;&gt;1.3.5 services vs protocols&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;todo&quot;&gt;image&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;service
    &lt;ul&gt;
      &lt;li&gt;like api&lt;/li&gt;
      &lt;li&gt;is a set of primitives that a layer provides to the layer above it&lt;/li&gt;
      &lt;li&gt;relates to an interface between two layers
        &lt;ul&gt;
          &lt;li&gt;lower layer -&amp;gt; service provider&lt;/li&gt;
          &lt;li&gt;upper layer -&amp;gt; service user&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;protocol
    &lt;ul&gt;
      &lt;li&gt;like impl&lt;/li&gt;
      &lt;li&gt;relate to the packtets&lt;/li&gt;
      &lt;li&gt;is a set of rules relate to packets
        &lt;ul&gt;
          &lt;li&gt;governing the format and meaning of
            &lt;ul&gt;
              &lt;li&gt;the packets,&lt;/li&gt;
              &lt;li&gt;or messages that are exchanged by the peer entities within a layer.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Many older protocols did not distinguish the service from the protocol
    &lt;ul&gt;
      &lt;li&gt;a typical layer might have had a service primitive SEND PACKET with the user providing a pointer to a fully assembled packet.&lt;/li&gt;
      &lt;li&gt;all changes to the protocol were immediately visible to the users —– violate the rule/ a serious blunder&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;14-osi-model--tcpip-model&quot;&gt;1.4 OSI Model &amp;amp;&amp;amp; TCP/IP Model&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;osi
    &lt;ul&gt;
      &lt;li&gt;protocols not used any more&lt;/li&gt;
      &lt;li&gt;model itself quite general &amp;amp;&amp;amp; valid&lt;/li&gt;
      &lt;li&gt;features at each layer are still very important&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;TCP/IP
    &lt;ul&gt;
      &lt;li&gt;the model itself is not of much use&lt;/li&gt;
      &lt;li&gt;the protocols are widely used.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;141-osi&quot;&gt;1.4.1 OSI&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;developed by the International Standards Organization (ISO)&lt;/li&gt;
  &lt;li&gt;ISO OSI (Open Systems Interconnection) Reference Model
    &lt;ul&gt;
      &lt;li&gt;means open for communication with other systems&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;OSI model itself is not a network architecture
    &lt;ul&gt;
      &lt;li&gt;it does not specify the exact services and protocols to be used in each layer
        &lt;ul&gt;
          &lt;li&gt;just tell what each layers should do&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;produced standards for all layers
        &lt;ul&gt;
          &lt;li&gt;these are not part of refernce model itself&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;model(in part) widely used, protocols are long forgotten&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;141-osi-model-layers&quot;&gt;1.4.1 OSI model layers&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;&quot;&gt;image&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;physical-layer&quot;&gt;physical layer&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;concerned with transmitting raw bits&lt;/li&gt;
  &lt;li&gt;Typical questions
    &lt;ul&gt;
      &lt;li&gt;what electrical signals should be used to represent a 1 and a 0,&lt;/li&gt;
      &lt;li&gt;how many nanoseconds a bit lasts,&lt;/li&gt;
      &lt;li&gt;whether transmission may proceed simultaneously in both directions,&lt;/li&gt;
      &lt;li&gt;how the initial connection is established,&lt;/li&gt;
      &lt;li&gt;how it is torn down when both sides are finished,&lt;/li&gt;
      &lt;li&gt;how many pins the network connector has, and what each pin is used for.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;data-link-layer&quot;&gt;data link layer&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;transform a raw transmission facility into a line that appears free of undetected transmission errors
    &lt;ul&gt;
      &lt;li&gt;by masking the real errors so the network layer does not see them&lt;/li&gt;
      &lt;li&gt;break up the input data into data frames
        &lt;ul&gt;
          &lt;li&gt;transmit the frames sequentially&lt;/li&gt;
          &lt;li&gt;receiver confirms each frame by sending back an acknowledgement frame.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;issues
    &lt;ul&gt;
      &lt;li&gt;how to keep a fast transmitter from drowning a slow receiver in data.&lt;/li&gt;
      &lt;li&gt;some traffic regulation mechanism want to konw when the receiver can accept more data&lt;/li&gt;
      &lt;li&gt;Broadcast networks : how to control access to the shared channel.
        &lt;ul&gt;
          &lt;li&gt;A special sublayer added: medium access control sublayer&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-network-layer&quot;&gt;the network layer&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;controls the operations of the subnet
    &lt;ul&gt;
      &lt;li&gt;determining how packets are routed from source to destination.&lt;/li&gt;
      &lt;li&gt;handling congestion&lt;/li&gt;
      &lt;li&gt;the quality of service provided (delay, transit time, jitter, etc.&lt;/li&gt;
      &lt;li&gt;allow heterogeneous networks to be interconnected
        &lt;ul&gt;
          &lt;li&gt;different network may be different
            &lt;ul&gt;
              &lt;li&gt;in addressing&lt;/li&gt;
              &lt;li&gt;packet might be too large&lt;/li&gt;
              &lt;li&gt;protocol may differ&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-transport-layer&quot;&gt;the transport layer&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;basic function
    &lt;ul&gt;
      &lt;li&gt;accept data from above it,&lt;/li&gt;
      &lt;li&gt;split it up into smaller units if need be,&lt;/li&gt;
      &lt;li&gt;pass these to the network layer,&lt;/li&gt;
      &lt;li&gt;and ensure that the pieces all arrive correctly at the other end.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;determines what type of service to provide to the session layer, and, ultimately, to the users of the network–determined when connection is established
    &lt;ul&gt;
      &lt;li&gt;most popular: error-free point-to-point channel
        &lt;ul&gt;
          &lt;li&gt;delivers messages or bytes in the order in which they were sent.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;others
        &lt;ul&gt;
          &lt;li&gt;transporting of isolated messages with no guarantee about the order of delivery&lt;/li&gt;
          &lt;li&gt;the broadcasting of messages to multiple destinations.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;true end-to-end layer
    &lt;ul&gt;
      &lt;li&gt;carries data from source to destination
        &lt;ul&gt;
          &lt;li&gt;message headers&lt;/li&gt;
          &lt;li&gt;control message&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;lower layers not end-2-end
        &lt;ul&gt;
          &lt;li&gt;each protocols is between a machine and its immediate neighbors,&lt;/li&gt;
          &lt;li&gt;not between the ultimate source and destination machines,
            &lt;ul&gt;
              &lt;li&gt;separated by many routers&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-session-layer&quot;&gt;the session layer&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;allows users on different machines to establish sessions between them.
    &lt;ul&gt;
      &lt;li&gt;dialog control
        &lt;ul&gt;
          &lt;li&gt;(keeping track of whose turn it is to transmit),&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;token management
        &lt;ul&gt;
          &lt;li&gt;(preventing two parties from attempting the same critical operation simultaneously)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;synchronization
        &lt;ul&gt;
          &lt;li&gt;(checkpointing long transmissions to allow them to pick up from where they left off in the event of a crash and subsequent recovery).&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;presentation-layer&quot;&gt;presentation layer&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;concerned with the syntax and semantics of the information transmitted.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;application-layer&quot;&gt;Application Layer&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;ex. http&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;142-the-tcpip-reference-model&quot;&gt;1.4.2 The TCP/IP Reference Model&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;&quot;&gt;image&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;history&quot;&gt;history&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;ARPANET
    &lt;ul&gt;
      &lt;li&gt;using leased telephone lines&lt;/li&gt;
      &lt;li&gt;connect hundreds of universities and government&lt;/li&gt;
      &lt;li&gt;trouble with interworking with satellite and radio networks&lt;/li&gt;
      &lt;li&gt;a new reference architecture was needed –&amp;gt; tcp/ip
        &lt;ul&gt;
          &lt;li&gt;goals
            &lt;ul&gt;
              &lt;li&gt;connect multiple networks in a seamless way&lt;/li&gt;
              &lt;li&gt;be able to survive loss of subnet hardware(Soviet Union attack)&lt;/li&gt;
              &lt;li&gt;others:
                &lt;ul&gt;
                  &lt;li&gt;transferring files&lt;/li&gt;
                  &lt;li&gt;real-time speech transmission,&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-link-layer&quot;&gt;The Link Layer&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;describes what links such as serial lines and classic Ethernet must do to meet the needs of this connectionless internet layer.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-internet-layer&quot;&gt;The Internet Layer&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;linchpin that holds the whole architecture together&lt;/li&gt;
  &lt;li&gt;deliver IP packets where they are supposed to go
    &lt;ul&gt;
      &lt;li&gt;IP (Internet Protocol): official packet format and protoco&lt;/li&gt;
      &lt;li&gt;ICMP (Internet Control Message Protocol)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;issues
    &lt;ul&gt;
      &lt;li&gt;Packet routing&lt;/li&gt;
      &lt;li&gt;congestion&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-transport-layer-1&quot;&gt;the transport layer&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;allow peer entities on the source and destination hosts to carry on a conversation
    &lt;ul&gt;
      &lt;li&gt;end-to-end transport protocols
        &lt;ul&gt;
          &lt;li&gt;TCP(Transmission Control Protocol)
            &lt;ul&gt;
              &lt;li&gt;reliable connection-oriented protocol&lt;/li&gt;
              &lt;li&gt;handles flow control to make sure a fast sender cannot swamp a slow receiver&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;UDP (User Datagram Protocol)
            &lt;ul&gt;
              &lt;li&gt;unreliable, connectionless protocol&lt;/li&gt;
              &lt;li&gt;for applications that do not want TCP’s sequencing or flow control and wish to provide their own&lt;/li&gt;
              &lt;li&gt;widely used
                &lt;ul&gt;
                  &lt;li&gt;one-shot, client-server-type request-reply queries&lt;/li&gt;
                  &lt;li&gt;applications in which prompt delivery is more important than accurate delivery
                    &lt;ul&gt;
                      &lt;li&gt;such as transmitting speech or video.&lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-application-layer&quot;&gt;The Application Layer&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;virtual terminal (TELNET),&lt;/li&gt;
  &lt;li&gt;file transfer (FTP),&lt;/li&gt;
  &lt;li&gt;and electronic mail (SMTP)&lt;/li&gt;
  &lt;li&gt;Domain Name System (DNS)&lt;/li&gt;
  &lt;li&gt;HTTP, the protocol for fetching pages on the World Wide Web,&lt;/li&gt;
  &lt;li&gt;RTP, the protocol for delivering real-time media such as voice or movies&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;144-osi-vs-tcpip-compare-in-reference-modules-not-the-corresponding-protocol-stacks&quot;&gt;1.4.4 OSI vs TCP/IP [compare in reference modules not the corresponding protocol stacks]&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;layers:
    &lt;ul&gt;
      &lt;li&gt;osi: 4 layers&lt;/li&gt;
      &lt;li&gt;tcp/ip: 7 layers&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;both: layers up through and including the transport layer provide an end-to-end, network-independent transport service to processes wishing to communicate&lt;/li&gt;
  &lt;li&gt;OSI devised before the corresponding protocols&lt;/li&gt;
  &lt;li&gt;tcp/ip:protocols come first,
    &lt;ul&gt;
      &lt;li&gt;model was really just a description of the existing protocols&lt;/li&gt;
      &lt;li&gt;no problems with protocols fitting the model, but model did not fit any other protocol stacks
        &lt;ul&gt;
          &lt;li&gt;it was not especially useful for describing other, non-TCP/IP networks.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;three-concepts-are-central-to-the-osi-model&quot;&gt;Three concepts are central to the OSI model:&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;Services.[methods , operations]
        &lt;ul&gt;
          &lt;li&gt;tells what the layer does,&lt;/li&gt;
          &lt;li&gt;not how entities above it access it or how the layer works.&lt;/li&gt;
          &lt;li&gt;It defines the layer’s semantics.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;Interfaces.[methods’ parameter &amp;amp;&amp;amp; result]
        &lt;ul&gt;
          &lt;li&gt;tells the processes above it how to access it&lt;/li&gt;
          &lt;li&gt;specific parameters&lt;/li&gt;
          &lt;li&gt;not or how the layer works.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;Protocols.[code internal]
        &lt;ul&gt;
          &lt;li&gt;the layer’s own business.&lt;/li&gt;
          &lt;li&gt;can use any protocols to finish its work&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-tcpip-model-did-not-originally-clearly-distinguish-between-services-interfaces-and-protocols&quot;&gt;The TCP/IP model did not originally clearly distinguish between services, interfaces, and protocols&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;ex. the only real services offered by the internet layer are SEND IP PACKET and RECEIVE IP PACKET&lt;/li&gt;
  &lt;li&gt;the protocols in the OSI model compare that in the TCP/IP model
    &lt;ul&gt;
      &lt;li&gt;better hidden&lt;/li&gt;
      &lt;li&gt;replaced relatively easily as the technology changes&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;connectionless-vs-connection-oriented&quot;&gt;connectionless vs connection-oriented&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;osi
    &lt;ul&gt;
      &lt;li&gt;support both in network layer&lt;/li&gt;
      &lt;li&gt;only connection-oriented in transport layer&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;tcp/ip
    &lt;ul&gt;
      &lt;li&gt;connectionless in network layer&lt;/li&gt;
      &lt;li&gt;both in transport layer
        &lt;ul&gt;
          &lt;li&gt;giving the user a choice–important for simple request-response protocols&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;145-critique-of-osi&quot;&gt;1.4.5 critique of osi&lt;/h2&gt;

&lt;h3 id=&quot;bad-timing&quot;&gt;bad timing&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;TCP/IP protocols were already in widespread use by research universities by the time the OSI protocols appeared&lt;/li&gt;
  &lt;li&gt;When OSI came around, they did not want to support a second protocol stack until they were forced to&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bad-technology&quot;&gt;bad technology&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;seven layers was more political than technical, and two of the layers
    &lt;ul&gt;
      &lt;li&gt;(session and presentation) are nearly empty,&lt;/li&gt;
      &lt;li&gt;(data link and network) are overfull.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;extraordinarily complex
    &lt;ul&gt;
      &lt;li&gt;difficult to implement and inefficient in operation&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;functions, such as addressing, flow control, and error control, reappear again and again in each layer.
    &lt;ul&gt;
      &lt;li&gt;unnecessary and inefficient.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bad-implementations&quot;&gt;bad implementations&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;implementations were huge, unwieldy, and slow.&lt;/li&gt;
  &lt;li&gt;In contrast, one of the first implementations of TCP/IP was part of Berkeley UNIX and was quite good &amp;amp;&amp;amp; free&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bad-politics&quot;&gt;bad politics&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;TCP/IP was thought as part of UNIX&lt;/li&gt;
  &lt;li&gt;osi supported by the government but not work&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;146-critique-of-tcpip&quot;&gt;1.4.6 critique of tcp/ip&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;not clearly distinguish the concepts of services, interfaces, and protocols.
    &lt;ul&gt;
      &lt;li&gt;not much of a guide for designing new networks using new technologies&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;the TCP/IP model is not at all general and is poorly suited to describing any protocol stack other than TCP/IP.
    &lt;ul&gt;
      &lt;li&gt;ex: completely impossible to use the TCP/IP model to describe Bluetooth&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;the link layer is not a layer
    &lt;ul&gt;
      &lt;li&gt;it is an interface between the network and data link layer&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;does not distinguish between the physical and data link layers.
    &lt;ul&gt;
      &lt;li&gt;physical layer:
        &lt;ul&gt;
          &lt;li&gt;copper wire, fiber optics, and wireless communication&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;data link layer:
        &lt;ul&gt;
          &lt;li&gt;delimit the start and end of frames and get them from one side to the other with the desired degree of reliability.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;some protocols are ad hoc,
    &lt;ul&gt;
      &lt;li&gt;ex. TELNET–The virtual terminal protocol
        &lt;ul&gt;
          &lt;li&gt;was designed for a ten-character-per-second mechanical Teletype terminal.&lt;/li&gt;
          &lt;li&gt;knows nothing of graphical user interfaces and mice&lt;/li&gt;
          &lt;li&gt;but still in used some 30 years later&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Ad hoc是拉丁文常用短语中的一个短语。这个短语的意思是“特设的、特定目的的（地）、即席的、临时的、将就的、专案的”。这个短语通常用来形容一些特殊的、不能用于其它方面的的，为一个特定的问题、任务而专门设定的解决方案&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;151-the-internet&quot;&gt;1.5.1 the internet&lt;/h2&gt;

&lt;h3 id=&quot;not-really-a-network-at-all&quot;&gt;not really a network at all&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;a vast collection of different networks
    &lt;ul&gt;
      &lt;li&gt;use certain common protocols&lt;/li&gt;
      &lt;li&gt;provide certain common services&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-arpanet&quot;&gt;The ARPANET&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;1950 DoD wants a command-and-control network that could survive a nuclear war.
    &lt;ul&gt;
      &lt;li&gt;telephone network&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;1960s, Baran proposed using digital packet-switching technology. AT&amp;amp;T dismissed&lt;/li&gt;
  &lt;li&gt;1957,  Soviet Union launch of the first artificial satellite, Sputnik–beat US
    &lt;ul&gt;
      &lt;li&gt;President Eisenhower–ARPA, the Advanced Research Projects Agency.
        &lt;ul&gt;
          &lt;li&gt;1967, ARPA – ARPANET (minicomputers + IMPs[Interface Message Processors])
            &lt;ul&gt;
              &lt;li&gt;first electronic storeand-forward packet-switching network&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;NPL system – National Physical Laboratory in England
            &lt;ul&gt;
              &lt;li&gt;demonstrated that packet switching could be made to work&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;an experimental network went online
    &lt;ul&gt;
      &lt;li&gt;1969 with four nodes: at UCLA, UCSB, SRI, and the University of Utah.
        &lt;ul&gt;
          &lt;li&gt;all had a large number of ARPA contracts&lt;/li&gt;
          &lt;li&gt;all had different and completely incompatible host computers (just to make it more fun).&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;ARPA also funded research on the use of satellite networks and mobile packet radio networks&lt;/li&gt;
      &lt;li&gt;demonstrated that the existing ARPANET protocols were not suitable for running over different networks
        &lt;ul&gt;
          &lt;li&gt;1974–TCP/IP was specifically designed to handle communication over internetworks&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ARPA awarded several contracts to implement TCP/IP on different computer platforms,
    &lt;ul&gt;
      &lt;li&gt;IBM, DEC, and HP systems, as well as for Berkeley UNIX.&lt;/li&gt;
      &lt;li&gt;Berkeley UNIX–rewrote TCP/IP with a new programming interface called sockets for the upcoming 4.2BSD release of Berkeley UNIX&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;1980s, additional networks, especially LANs, connected to the ARPANET
    &lt;ul&gt;
      &lt;li&gt;DNS(Domain Name System) was created&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;nsfnet&quot;&gt;NSFNET&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;1970s,  NSF (the U.S. National Science Foundation) saw enormous impact of ARPANET
    &lt;ul&gt;
      &lt;li&gt;fund the Computer Science Network (CSNET) in 1981,
        &lt;ul&gt;
          &lt;li&gt;have to have a research contract with the DoD to get on ARPANET, many have no contract&lt;/li&gt;
          &lt;li&gt;connect to ARPANET via dial-up and leased lines&lt;/li&gt;
          &lt;li&gt;backbone network to connect supercomputer centers
            &lt;ul&gt;
              &lt;li&gt;Each supercomputer given a microcomputer called a fuzzball
                &lt;ul&gt;
                  &lt;li&gt;fuzzball connected with 56kb lines to form subnet
                    &lt;ul&gt;
                      &lt;li&gt;same hardware technology the ARPANET used&lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                  &lt;li&gt;fuzzball use TCP/IP right from the start—first TCP/IP WAN&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;NSFNET: the complete network
        &lt;ul&gt;
          &lt;li&gt;funded some regional networks connected to the backbone&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;NSF encouraged MERIT, MCI, and IBM to form a nonprofit corporation, ANS (Advanced Networks and Services)
        &lt;ul&gt;
          &lt;li&gt;ANS took over NSFNET and upgraded to form ANSNET&lt;/li&gt;
          &lt;li&gt;5 years later sold to America Online&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;NSF awarded contracts to four different network operators to establish a NAP (Network Access Point)
        &lt;ul&gt;
          &lt;li&gt;To ease the transition &amp;amp;&amp;amp; make sure regional networks could communicate with each other&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;1990s,  many other countries and regions also built national research networks,
    &lt;ul&gt;
      &lt;li&gt;often patterned on the ARPANET and NSFNET&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;151-architecture-of-the-internet&quot;&gt;1.5.1 Architecture of the Internet&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;ISP: Internet Service Provider&lt;/li&gt;
  &lt;li&gt;DSL: Digital Subscriber Line
    &lt;ul&gt;
      &lt;li&gt;DSL modem
        &lt;ul&gt;
          &lt;li&gt;modem is short for ‘modulator demodulator’ and refers to any device that converts between digital bits and analog signals.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;DSLAM (Digital Subscriber Line Access Multiplexer)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;DSL + telephone line : dial-up
    &lt;ul&gt;
      &lt;li&gt;limited to 56 kbps&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;DSL + cable : much greater&lt;/li&gt;
  &lt;li&gt;FTTH (Fiber to the Home)
    &lt;ul&gt;
      &lt;li&gt;optical fiber, 光纤&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;POP (Point of Presence)
    &lt;ul&gt;
      &lt;li&gt;the ISP’s POP:   locaiton at which customer packets enter the ISP network for service&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;TV system
    &lt;ul&gt;
      &lt;li&gt;cable modem&lt;/li&gt;
      &lt;li&gt;CMTS (Cable Modem Termination System)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ISP’s POP (Point of Presence).&lt;/li&gt;
  &lt;li&gt;backbone
    &lt;ul&gt;
      &lt;li&gt;long-distance transmission lines that interconnect routers at POPs in the different cities that the ISPs serve&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;IXPs (Internet eXchange Points)
    &lt;ul&gt;
      &lt;li&gt;ISPs connect their networks to exchange traffic at IXPs&lt;/li&gt;
      &lt;li&gt;Basically, an IXP is a room full of routers,
        &lt;ul&gt;
          &lt;li&gt;at least one per ISP&lt;/li&gt;
          &lt;li&gt;A LAN in the room connects all the routers&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;a small ISP might pay a larger ISP for Internet connectivity&lt;/li&gt;
      &lt;li&gt;two large ISPs might decide to exchange traffic&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;packet’s path
    &lt;ul&gt;
      &lt;li&gt;depends on the peering choices of the ISPs
        &lt;ul&gt;
          &lt;li&gt;with destination ISP :directly to its peer&lt;/li&gt;
          &lt;li&gt;or else route the packet to the nearest paid transit provider&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;tier 1 ISPs
    &lt;ul&gt;
      &lt;li&gt;form the backbone of the Internet&lt;/li&gt;
      &lt;li&gt;thousands of routers connected by high-bandwidth fiber optic links&lt;/li&gt;
      &lt;li&gt;AT&amp;amp;T, Sprint…&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;data centers
    &lt;ul&gt;
      &lt;li&gt;Google, Yahoo…&lt;/li&gt;
      &lt;li&gt;server farm: rack upon rack of machines&lt;/li&gt;
      &lt;li&gt;Colocation/hosting (机器托管)
        &lt;ul&gt;
          &lt;li&gt;short, fast connections can be made between the servers and the ISP backbones&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;152-mobile-phone-networks&quot;&gt;1.5.2 Mobile Phone Networks&lt;/h2&gt;

&lt;h3 id=&quot;generation&quot;&gt;generation&lt;/h3&gt;

&lt;h4 id=&quot;amps--advanced-mobile-phone-system--1g&quot;&gt;AMPS : Advanced Mobile Phone System , 1G&lt;/h4&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;- transmitted voice calls as continuously varying(Analog) signals
- each voice call on a specific frequency band
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;gsm--global-system-for-mobile-communications&quot;&gt;GSM : Global System for Mobile communications&lt;/h4&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;- transmitting voice calls in digital form #### UMTS (Universal Mobile Telecommunications System) || WCDMA (Wideband Code Division Multiple Access)
- offer both digital voice and broadband digital data services
- each cell to use all frequencies,
- a tolerable level of interference to the neighboring cells.
- based on Code Division Multiple Access (CDMA)
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;radio-access-network&quot;&gt;radio access network&lt;/h4&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;- cellular base station
- controller node or RNC (Radio Network Controller)
    - controls how the spectrum is used.
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;core-network-carries-the-traffic-for-the-radio-access-network&quot;&gt;core network: carries the traffic for the radio access network&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;UMTS core network evolved from 2G GSM system’s core network
    &lt;ul&gt;
      &lt;li&gt;connectionless subnets–packet networks
        &lt;ul&gt;
          &lt;li&gt;if too many packets, router will choke and lose packets
            &lt;ul&gt;
              &lt;li&gt;sender will resend but service will be jerky&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;connection-oriented subnets–circuit networks
        &lt;ul&gt;
          &lt;li&gt;set up establishes a route
            &lt;ul&gt;
              &lt;li&gt;all words or packets follow the same route&lt;/li&gt;
              &lt;li&gt;if a line or switch on the path goes down, call is aborted&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;support quality of service more easily
            &lt;ul&gt;
              &lt;li&gt;subnet can reserve resources(link bandwidth, switch buffer space, CPU)&lt;/li&gt;
              &lt;li&gt;if resource is insufficient, call will be rejected&lt;/li&gt;
              &lt;li&gt;once a connection is connected, connection would get good service&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;old mobile phone networks–connectionless
    &lt;ul&gt;
      &lt;li&gt;MSC (Mobile Switching Center), GMSC (Gateway Mobile Switching Center)&lt;/li&gt;
      &lt;li&gt;MGW (Media Gateway) elements that set up connections over a circuit-switched core network such as the PSTN (Public Switched Telephone Network).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;GPRS(General Packet Radio Service)
    &lt;ul&gt;
      &lt;li&gt;ran at tens of kbps&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;UMTS core network nodes connect directly to a packet-switched network
    &lt;ul&gt;
      &lt;li&gt;SGSN (Serving GPRS Support Node) and the GGSN (Gateway GPRS Support Node)&lt;/li&gt;
      &lt;li&gt;voice calls over a packet data network&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;issues-1&quot;&gt;issues&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;handover
    &lt;ul&gt;
      &lt;li&gt;soft handover
        &lt;ul&gt;
          &lt;li&gt;connect to the new base station before disconnecting from the old base station&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;hard handover&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;how to find a mobile in the first place when there is an incoming call
    &lt;ul&gt;
      &lt;li&gt;Each mobile phone network has a HSS (Home Subscriber Server)
        &lt;ul&gt;
          &lt;li&gt;the location of each subscriber,&lt;/li&gt;
          &lt;li&gt;profile information that is used for authentication and authorization&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;security
    &lt;ul&gt;
      &lt;li&gt;SIM card, short for Subscriber Identity Module
        &lt;ul&gt;
          &lt;li&gt;authenticate subscribers&lt;/li&gt;
          &lt;li&gt;cryptographic keys on the SIM card are used to encrypt transmissions&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;153-wifi-80211&quot;&gt;1.5.3 wifi, 802.11&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;operate in unlicensed bands such as the ISM (Industrial, Scientific, and Medical) bands
    &lt;ul&gt;
      &lt;li&gt;defined by ITU-R (e.g., 902-928 MHz, 2.4-2.5 GHz, 5.725-5.825 GHz).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;two style
    &lt;ul&gt;
      &lt;li&gt;Wired network with APs(access points)&lt;/li&gt;
      &lt;li&gt;ad hoc network: clients talk directly&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;multipath fading
    &lt;ul&gt;
      &lt;li&gt;radio signals reflected off solid objects
        &lt;ul&gt;
          &lt;li&gt;multiple echoes of a transmission
            &lt;ul&gt;
              &lt;li&gt;cancel&lt;/li&gt;
              &lt;li&gt;reinforce&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;solutions:
        &lt;ul&gt;
          &lt;li&gt;path diersity: sending along multiple, independent paths&lt;/li&gt;
          &lt;li&gt;using different frequencies&lt;/li&gt;
          &lt;li&gt;repeating bits over different periods of time&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;multiple transmissions collide
    &lt;ul&gt;
      &lt;li&gt;CSMA (Carrier Sense Multiple Access)
        &lt;ul&gt;
          &lt;li&gt;Computers wait for a short random interval before transmitting, and defer their transmissions if they hear that someone else is already transmitting&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;security
    &lt;ul&gt;
      &lt;li&gt;WEP (Wired Equivalent Privacy)&lt;/li&gt;
      &lt;li&gt;WiFi Protected Access, initially called WPA but now replaced by WPA2&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;154-rfid-and-sensor-networks&quot;&gt;1.5.4 RFID and Sensor Networks&lt;/h2&gt;

&lt;h3 id=&quot;radio-frequency-identification-rfid&quot;&gt;Radio Frequency IDentification (RFID)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;consists of a small microchip with a unique identifier and an antenna that receives radio transmissions.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;battery&quot;&gt;battery&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;passive RFID
    &lt;ul&gt;
      &lt;li&gt;all of the energy needed to operate them is supplied in the form of radio waves by RFID readers.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;active RFID
    &lt;ul&gt;
      &lt;li&gt;there is a power source on the tag&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;distance&quot;&gt;distance&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;UHF RFID (Ultra-High Frequency RFID).
    &lt;ul&gt;
      &lt;li&gt;shipping pallets and some drivers licenses&lt;/li&gt;
      &lt;li&gt;backscatter：Tags communicate at distances of several meters by changing the way they reflect the reader signals&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;HF RFID (High Frequency RFID)
    &lt;ul&gt;
      &lt;li&gt;passport, credit cards, books, and noncontact payment systems&lt;/li&gt;
      &lt;li&gt;based on induction&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;LFRFID (Low Frequency RFID)
    &lt;ul&gt;
      &lt;li&gt;for animal tracking&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;problem&quot;&gt;problem&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;multiple tags
    &lt;ul&gt;
      &lt;li&gt;tags wait for a short random interval before responding with their identification&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;security
    &lt;ul&gt;
      &lt;li&gt;weak measures: like passwords&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;sensor-network&quot;&gt;sensor network&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Sensor nodes are small computers&lt;/li&gt;
  &lt;li&gt;self-organize to relay messages for each other&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;17-metric-units&quot;&gt;1.7 METRIC UNITS&lt;/h2&gt;

&lt;p&gt;https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fslideplayer.com%2F5675735%2F18%2Fimages%2F4%2FMetric%2BConversion%2BChart.jpg&amp;amp;refer=http%3A%2F%2Fslideplayer.com&amp;amp;app=2002&amp;amp;size=f9999,10000&amp;amp;q=a80&amp;amp;n=0&amp;amp;g=0n&amp;amp;fmt=jpeg?sec=1622127822&amp;amp;t=f468c0add4a2c6f3b629c2b95844ce87&lt;/p&gt;

&lt;h2 id=&quot;31-data-link-layer&quot;&gt;3.1 data link layer&lt;/h2&gt;

&lt;p&gt;uses the services of the physical layer to send and receive bits over communication channels&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Providing a well-defined service interface to the network layer.&lt;/li&gt;
  &lt;li&gt;Dealing with transmission errors.&lt;/li&gt;
  &lt;li&gt;Regulating the flow of data&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;311-services-provided-to-the-natwork-layer&quot;&gt;3.1.1 services provided to the natwork layer&lt;/h2&gt;

&lt;h3 id=&quot;unacknowledged-connectionless-service&quot;&gt;Unacknowledged connectionless service.&lt;/h3&gt;
&lt;p&gt;having the source machine send independent frames to the destination machine without having the destination machine acknowledge them&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;ex. Ethernet,&lt;/li&gt;
  &lt;li&gt;no logical connection&lt;/li&gt;
  &lt;li&gt;if a frame is lost, no attempt to detect the loss or recover&lt;/li&gt;
  &lt;li&gt;appropriate when the error rate is very low,  appropriate for real-time traffic, such as voice&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;acknowledged-connectionless-service&quot;&gt;Acknowledged connectionless service.&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;no logical connections&lt;/li&gt;
  &lt;li&gt;each frame sent is individually acknowledged&lt;/li&gt;
  &lt;li&gt;is useful over unreliable channels, such as wireless systems. ex.  802.11 (WiFi)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;acknowledged-connection-oriented-service&quot;&gt;Acknowledged connection-oriented service&lt;/h3&gt;

&lt;h4 id=&quot;providing-acknowledgements-in-the-data-link-layer-is-just-an-optimization-never-a-requirement&quot;&gt;providing acknowledgements in the data link layer is just an optimization, never a requirement&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;can send packets and wait for ack, resend when expired
    &lt;ul&gt;
      &lt;li&gt;inefficient,&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;network layer does not know hardware parameters, and send a big packet(ex.10 frames, 2 lost):
    &lt;ul&gt;
      &lt;li&gt;links have a strict maximum frame length imposed by hardware&lt;/li&gt;
      &lt;li&gt;known propagation delays.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;On reliable channels, such as fiber, the overhead of a heavyweight data link protocol may be unnecessary,&lt;/li&gt;
  &lt;li&gt;but on (inherently unreliable) wireless channels it is well worth the cost&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;connection-oriented-1&quot;&gt;connection-oriented&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Each frame sent over the connection is numbered,&lt;/li&gt;
  &lt;li&gt;guarantees that each frame sent is indeed received.&lt;/li&gt;
  &lt;li&gt;guarantees that each frame is received exactly once and that all frames are received in the right order.&lt;/li&gt;
  &lt;li&gt;appropriate over long, unreliable links such as a satellite channel or a long-distance telephone circuit.
    &lt;ul&gt;
      &lt;li&gt;if connectionless, cause a frame to be sent and received several times, wasting bandwidth.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;312-framing&quot;&gt;3.1.2 framing&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;channel is noisy&lt;/li&gt;
  &lt;li&gt;Breaking up the bit stream into frames
    &lt;ul&gt;
      &lt;li&gt;Byte count.
        &lt;ul&gt;
          &lt;li&gt;无法解决乱序问题&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Flag bytes with byte stuffing.
        &lt;ul&gt;
          &lt;li&gt;two consecutive flag bytes indicate the end of one frame and the start of the next&lt;/li&gt;
          &lt;li&gt;insert special escape byte(ESC) to avoid interfering&lt;/li&gt;
          &lt;li&gt;flaw: tied to the use of 8-bit bytes&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Flag bits with bit stuffing.
        &lt;ul&gt;
          &lt;li&gt;framing done at the bit level&lt;/li&gt;
          &lt;li&gt;Each frame begins and ends with a special bit pattern, 01111110 or 0x7E in hexadecimal.
            &lt;ul&gt;
              &lt;li&gt;to avoid conflict in the body
                &lt;ul&gt;
                  &lt;li&gt;sender: stuffs 0, when encounters five consecutive 1s&lt;/li&gt;
                  &lt;li&gt;receiver: automatically destuffs the 0 bits when sees&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Physical layer coding violations.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/Users/thomasliao/Documents/github/liao123abc.github.io/images/bit_stuffing_mechanism.jpeg&quot; alt=&quot;bit stuffing&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A common pattern used for Ethernet and 802.11 is to have a frame begin with a well-defined pattern called a preamble.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;313-error-control&quot;&gt;3.1.3 Error Control&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;ensure that each frame is ultimately passed to the network layer at the destination exactly once, no more and no less&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;provide the sender with some feedback
    &lt;ul&gt;
      &lt;li&gt;positive ack: arrived&lt;/li&gt;
      &lt;li&gt;negative ack: something go wrong&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;if a frame vanish?
    &lt;ul&gt;
      &lt;li&gt;introducing timers
        &lt;ul&gt;
          &lt;li&gt;expire after an interval&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;if either the frame or the ack is lost?
    &lt;ul&gt;
      &lt;li&gt;just transmit the frame again&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;if sender transmit the same frame multiple times, receiver accept the same frame two or more time
    &lt;ul&gt;
      &lt;li&gt;assign sequence numbers to outgoing frames&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;314-flow-control&quot;&gt;3.1.4 flow control&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;a sender that systematically wants to transmit frames faster than the receiver can accept them.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;issues-2&quot;&gt;issues&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;sender: a fast, powerful computer and the receiver: a slow, low-end machine.
    &lt;ul&gt;
      &lt;li&gt;phone request a web page from powerful server&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;commonly-used-approaches&quot;&gt;commonly used approaches&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;feedback-based flow control
    &lt;ul&gt;
      &lt;li&gt;receivers send back information to the sender to send more data&lt;/li&gt;
      &lt;li&gt;or at least telling the sender how the receiver is doing&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;rate-based flow control
    &lt;ul&gt;
      &lt;li&gt;the protocol has a built-in mechanism that limits the rate at which senders may transmit data,&lt;/li&gt;
      &lt;li&gt;without using feedback from the receiver.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;feedback-vs-rate&quot;&gt;feedback vs rate&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Feedback-based schemes are seen at both the link layer and higher layers
    &lt;ul&gt;
      &lt;li&gt;more common:
        &lt;ul&gt;
          &lt;li&gt;the link layer hardware is designed to run fast enough that it does not cause loss.&lt;/li&gt;
          &lt;li&gt;hardware implementations of the link layer as NICs (Network Interface Cards) can handle frames as fast as they can arrive on the link
            &lt;ul&gt;
              &lt;li&gt;so handled by higher layers&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;various feedback-based flow control schemes: the same basic principle
        &lt;ul&gt;
          &lt;li&gt;well-defined rules about when a sender may transmit the next frame.&lt;/li&gt;
          &lt;li&gt;These rules often prohibit frames from being sent until the receiver has granted permission,&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;rate-based schemes are only seen as part of the transport layer&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;32-error-detection-and-correction&quot;&gt;3.2 ERROR DETECTION AND CORRECTION&lt;/h2&gt;

&lt;h3 id=&quot;strategies-dealing-with-errors&quot;&gt;strategies dealing with errors&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;error-correcting codes&lt;/td&gt;
          &lt;td&gt; &lt;/td&gt;
          &lt;td&gt;FEC (Forward Error Correction).&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
    &lt;ul&gt;
      &lt;li&gt;include enough redundant information to enable the receiver to deduce what the transmitted data must have been.&lt;/li&gt;
      &lt;li&gt;used On channels that are highly reliable, such as fiber
        &lt;ul&gt;
          &lt;li&gt;it is cheaper to use an error-detecting code and just retransmit the occasional block found to be faulty&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;seen in the physical layer, particularly for noisy channels&lt;/li&gt;
      &lt;li&gt;in higher layers, particularly for real-time media and content distribution&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;error-detecting codes
    &lt;ul&gt;
      &lt;li&gt;include only enough redundancy to allow the receiver to deduce that an error has occurred (but not which error)
        &lt;ul&gt;
          &lt;li&gt;have it request a retransmission.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;FEC is used on noisy channels because retransmissions are just as likely to be in error as the first transmission
        &lt;ul&gt;
          &lt;li&gt;wireless links: make many errors&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;commonly used in link, network, and transport layers&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Neither error-correcting codes nor error-detecting codes can handle all possible errors&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;321-error-correcting-codestodo&quot;&gt;3.2.1 Error-correcting codes–todo&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Hamming codes.&lt;/li&gt;
  &lt;li&gt;Binary convolutional codes.&lt;/li&gt;
  &lt;li&gt;Reed-Solomon codes.&lt;/li&gt;
  &lt;li&gt;Low-Density Parity Check codes.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;322-error-detecting-codestodo&quot;&gt;3.2.2 Error-Detecting Codes–todo&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Parity.&lt;/li&gt;
  &lt;li&gt;Checksums.&lt;/li&gt;
  &lt;li&gt;Cyclic Redundancy Checks (CRCs).&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;34-sliding-window&quot;&gt;3.4 sliding window&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;The network layer, in contrast, is always fed data in the proper order, regardless of the data link layer’s window size&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;each outbound frame contains a sequence number,ranging from 0 up to some maximum.&lt;/li&gt;
  &lt;li&gt;sender maintains a set of sequence numbers corresponding to frames it is permitted to send.
    &lt;ul&gt;
      &lt;li&gt;These frames are said to fall within the sending window&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;receiver also maintains a receiving window corresponding to the set of frames it is permitted to accept.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;sequence-number-in-sender&quot;&gt;sequence number in sender&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The sequence numbers within the sender’s window represent
    &lt;ul&gt;
      &lt;li&gt;frames that have been sent&lt;/li&gt;
      &lt;li&gt;or can be sent but are as yet not acknowledged.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;maintains a list of unacknowledged frames
    &lt;ul&gt;
      &lt;li&gt;when a new packet arrives
        &lt;ul&gt;
          &lt;li&gt;it is given the next highest sequence number,&lt;/li&gt;
          &lt;li&gt;the upper edge of the window is advanced by one&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;sequence-number-in-receiver&quot;&gt;sequence number in receiver&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;frame receive,
    &lt;ul&gt;
      &lt;li&gt;if (frame.sq == window.lowerEdge)
        &lt;ul&gt;
          &lt;li&gt;it is passed to network layer&lt;/li&gt;
          &lt;li&gt;window is rotated by one&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;any frame falling outside the window is discarded&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ack
    &lt;ul&gt;
      &lt;li&gt;a window size of 1 means that the data link layer only accepts frames in order,
        &lt;ul&gt;
          &lt;li&gt;but for larger windows this is not so&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;341-sliding-window-protocol&quot;&gt;3.4.1 Sliding Window Protocol&lt;/h2&gt;

&lt;h3 id=&quot;go-back-n&quot;&gt;go-back-n&lt;/h3&gt;
&lt;p&gt;is for the receiver simply to discard all subsequent frames, sending no acknowledgements for the discarded frames.&lt;/p&gt;

&lt;h3 id=&quot;selective-repeat&quot;&gt;selective repeat&lt;/h3&gt;
&lt;p&gt;a bad frame that is received is discarded, but any good frames received after it are accepted and buffered.&lt;/p&gt;

&lt;h3 id=&quot;flow-control&quot;&gt;flow control&lt;/h3&gt;

&lt;h3 id=&quot;error-control&quot;&gt;error control&lt;/h3&gt;

&lt;h2 id=&quot;4-the-medium-access-control-sublayer&quot;&gt;4 the medium access control sublayer&lt;/h2&gt;

&lt;h2 id=&quot;512-services-provided-to-the-transport-layer&quot;&gt;5.1.2 Services Provided to the Transport Layer&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;provides services to the transport layer&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;rules&quot;&gt;rules:&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The services should be independent of the router technology&lt;/li&gt;
  &lt;li&gt;transport layer should be shielded from the number, type, and topology of the routers present&lt;/li&gt;
  &lt;li&gt;network addresses should use a uniform numbering plan, even across LANs and WANs&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;two-camps&quot;&gt;two camps&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;connectionoriented service
    &lt;ul&gt;
      &lt;li&gt;routers’job is moving packets around and nothing else&lt;/li&gt;
      &lt;li&gt;host: error control(error detection and correction) &amp;amp;&amp;amp; flow control&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;connectionless service
    &lt;ul&gt;
      &lt;li&gt;represented by telephone companies&lt;/li&gt;
      &lt;li&gt;ATM vs IP&lt;/li&gt;
      &lt;li&gt;connection-oriented technologies
        &lt;ul&gt;
          &lt;li&gt;MPLS (MultiProtocol Label Switching)&lt;/li&gt;
          &lt;li&gt;VLANs&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;521-the-optimality-principle&quot;&gt;5.2.1 the optimality principle&lt;/h2&gt;

&lt;h2 id=&quot;611-services-provided-to-the-upper-layers&quot;&gt;6.1.1 Services Provided to the Upper Layers&lt;/h2&gt;

&lt;h3 id=&quot;different-kinds-similar-with-network-service&quot;&gt;different kinds similar with network service&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;connection-oriented&lt;/li&gt;
  &lt;li&gt;connectionless,&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;why-need-transport-layer&quot;&gt;why need transport layer&lt;/h3&gt;

&lt;h4 id=&quot;make-the-transport-service-to-be-more-reliable&quot;&gt;make the transport service to be more reliable&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;The transport code runs entirely on the users’ machines, but the network layer mostly runs on the routers
    &lt;ul&gt;
      &lt;li&gt;routers operated by the carrier&lt;/li&gt;
      &lt;li&gt;users have no real control over network layer
        &lt;ul&gt;
          &lt;li&gt;cannot solve the problem of poor service by using better routers&lt;/li&gt;
          &lt;li&gt;cannot putting more error handling in the data link layer&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;solution: put on top of the network layer another layer–transport layer
        &lt;ul&gt;
          &lt;li&gt;packets are lost or mangled in connectionless
            &lt;ul&gt;
              &lt;li&gt;transport layer detect the problem and compensate for it by retransmit&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;in connnection-oriented network, connection is abrutly terminated
            &lt;ul&gt;
              &lt;li&gt;set up new network connection&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;hiding-the-network-service-behind-a-set-of-transport-service-primitives&quot;&gt;hiding the network service behind a set of transport service primitives&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;transport primitives can be implemented as call to library procedures
    &lt;ul&gt;
      &lt;li&gt;independent of the network primimitives&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;application programmers can write code according to a standard set of primitives
    &lt;ul&gt;
      &lt;li&gt;without having to worry about different network interfaces and reliability&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;transport-layerkey-position&quot;&gt;transport layer–key position&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;the bottom four layers–transport service provider&lt;/li&gt;
  &lt;li&gt;the upper layers –transport service user&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;612&quot;&gt;6.1.2&lt;/h2&gt;

&lt;h2 id=&quot;613-berkeley-sockets&quot;&gt;6.1.3 Berkeley Sockets&lt;/h2&gt;

&lt;h3 id=&quot;what&quot;&gt;what&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;A common transport layer interface&lt;/li&gt;
  &lt;li&gt;another set of transport primitives,&lt;/li&gt;
  &lt;li&gt;Sockets the de facto standard for abstracting transport services to applications.
    &lt;ul&gt;
      &lt;li&gt;often used with the TCP protocol to provide a connection-oriented service called a reliable byte stream
        &lt;ul&gt;
          &lt;li&gt;other protocols work as well&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;used with a connectionless transport service&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;parameters-of-the-call-specify&quot;&gt;parameters of the call specify&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;the addressing format to be used,&lt;/li&gt;
  &lt;li&gt;the type of service desired (e.g., reliable byte stream),&lt;/li&gt;
  &lt;li&gt;and the protocol&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-socket-primitives-for-tcp&quot;&gt;The socket primitives for TCP&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;SOCKET Create a new communication endpoint&lt;/li&gt;
  &lt;li&gt;BIND Associate a local address with a socket&lt;/li&gt;
  &lt;li&gt;LISTEN Announce willingness to accept connections; give queue size&lt;/li&gt;
  &lt;li&gt;ACCEPT Passively establish an incoming connection&lt;/li&gt;
  &lt;li&gt;CONNECT Actively attempt to establish a connection&lt;/li&gt;
  &lt;li&gt;SEND Send some data over the connection&lt;/li&gt;
  &lt;li&gt;RECEIVE Receive some data from the connection&lt;/li&gt;
  &lt;li&gt;CLOSE Release the connection&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;62-transport-protocol-vs-data-link-protocol&quot;&gt;6.2 transport protocol vs data link protocol&lt;/h2&gt;

&lt;h3 id=&quot;major-difference-operating-environment&quot;&gt;major difference: operating environment&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;table&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td&gt;data link layer – communicate directly via a physical channel(wired&lt;/td&gt;
        &lt;td&gt; &lt;/td&gt;
        &lt;td&gt;wireless)&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;transport layer – communicate via the entire network&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;addressing&quot;&gt;addressing&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;data link layer:
    &lt;ul&gt;
      &lt;li&gt;not necessary for a router to specify which router it wants to talk to&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;transport layer:
    &lt;ul&gt;
      &lt;li&gt;addressing of destinations is required&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;establishing-a-connection&quot;&gt;establishing a connection&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;data link layer : simple
    &lt;ul&gt;
      &lt;li&gt;the other end is always there&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;transport layer: complicated&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;the-potential-existence-of-storage-capacity-in-the-network&quot;&gt;the potential existence of storage capacity in the network&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;data link layer:
    &lt;ul&gt;
      &lt;li&gt;a packet may arrive or be lost&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;transport layer:
    &lt;ul&gt;
      &lt;li&gt;delay and duplicate packets
        &lt;ul&gt;
          &lt;li&gt;take scenic route&lt;/li&gt;
          &lt;li&gt;arrive late&lt;/li&gt;
          &lt;li&gt;out of expected order&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;degree-buffering-and-flow-control&quot;&gt;degree: buffering and flow control&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;data link layer:
    &lt;ul&gt;
      &lt;li&gt;a large and varying number of connections with bandwith that fluctuates&lt;/li&gt;
      &lt;li&gt;not buffers to each line&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;transport layer:
    &lt;ul&gt;
      &lt;li&gt;buffers to each line&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;622-connection-establishment&quot;&gt;6.2.2 connection establishment&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;network can lose, delay, corrupt, duplicate packets&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;issues-eg&quot;&gt;issues e.g.&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;delayed in the network and pop out much later, when the sender thought that they had been lost&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;prevent-packets-from-being-duplicated-and-delayed&quot;&gt;prevent packets from being duplicated and delayed&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;…
    &lt;ul&gt;
      &lt;li&gt;throwaway transport addresses
        &lt;ul&gt;
          &lt;li&gt;more difficult to connect with a process in the first place&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;give each connection a unique identifier
        &lt;ul&gt;
          &lt;li&gt;requires each transport entity to maitain a certain amount of history infomation indefinitely&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;kill off aged packets that hobbling about
    &lt;ul&gt;
      &lt;li&gt;restricted network design – prevents packets from looping&lt;/li&gt;
      &lt;li&gt;hop counter&lt;/li&gt;
      &lt;li&gt;timestamping&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 11 Apr 2021 00:00:00 +0800</pubDate>
        <link>https://thomasliao.cn/2021/04/11/computer-network/</link>
        <guid isPermaLink="true">https://thomasliao.cn/2021/04/11/computer-network/</guid>
        
        <category>computer network</category>
        
        <category>note</category>
        
        <category>Anki</category>
        
        
      </item>
    
      <item>
        <title>Encoding</title>
        <description>&lt;h2 id=&quot;ascii&quot;&gt;ASCII&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;http://www.robelle.com/library/smugbook/ascii.html&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;character encoding&lt;/li&gt;
  &lt;li&gt;short for: American Standard Code for Information Interchange&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ASCII 码一共规定了128个字符的编码&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Wordstar&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/en/e/e3/Wordstar_Screenshot.png&quot; alt=&quot;dominated the market in the early and mid-1980s&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;MS-DOS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://pic4.zhimg.com/80/fd6d090f634b0afbe69b8d33cf5e58a4_720w.jpg?source=1940ef5c&quot; alt=&quot;MS-DOS时代的MS Office&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;question&quot;&gt;question&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;“plain text == ascii == characters are 8 bits”?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;only-for-english&quot;&gt;only for english&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/1/1b/ASCII-Table-wide.svg/875px-ASCII-Table-wide.svg.png&quot; alt=&quot;table&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In ASCII, every letter, digits, and symbols that mattered were represented as a number between 32 and 127.&lt;/li&gt;
  &lt;li&gt;1 byte
    &lt;ul&gt;
      &lt;li&gt;只占用了一个字节的后面7位，最前面的一位统一规定为0
  	- 7位来编码，8位来传输&lt;/li&gt;
      &lt;li&gt;有些软件会使用第一位。
        &lt;ul&gt;
          &lt;li&gt;wordstar-indicate the last letter in a word&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;[0, 31] called unprintable
    &lt;ul&gt;
      &lt;li&gt;大部分已经废弃
        &lt;ul&gt;
          &lt;li&gt;but remain some :such as the carriage return, line feed and tab codes.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;used for control characters， 如
        &lt;ul&gt;
          &lt;li&gt;7 which made your computer beep&lt;/li&gt;
          &lt;li&gt;12 which caused the current page of paper to go flying out of the printer and a new one to be fed in&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;[32, 127] are printable–Ninety-five of the encoded characters
    &lt;ul&gt;
      &lt;li&gt;表示可打印的字符(a-z, A-Z, 0–9, +, -, /, “, ! etc.)&lt;/li&gt;
      &lt;li&gt;32-space&lt;/li&gt;
      &lt;li&gt;65-“A”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;不支持其他字符
    &lt;ul&gt;
      &lt;li&gt;没有带变音符的拉丁字母（如 é 和 ä ），也不支持像希腊字母（如 α、β、γ）、西里尔字母（如 Пушкин）这样的其他欧洲文字&lt;/li&gt;
      &lt;li&gt;更加不要说中文了&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;//make a bel
echo ^G
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;del-为什么删除键作为控制字符-编码为-127&quot;&gt;del 为什么删除键作为控制字符, 编码为 127&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;打孔机的纸带中，对应位为 0 就不打孔，对应位为 1 就打孔。&lt;/li&gt;
  &lt;li&gt;一卷全新空纸带上完全没有孔，自然表示全 0，也就对应于 ASCII 的控制字符 Null。&lt;/li&gt;
  &lt;li&gt;那在打孔机上打错字符时怎么办
    &lt;ul&gt;
      &lt;li&gt;纸带中不能将已打的孔填上，于是当打错字干脆将其全部打孔，表示这一个字符被省略或者删除。&lt;/li&gt;
      &lt;li&gt;全部打孔就是二进制的 7 个 1，对应十进制编码 127&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/0/0b/Creed_model_6S-2_paper_tape_reader.jpg/1920px-Creed_model_6S-2_paper_tape_reader.jpg&quot; alt=&quot;holes&quot; width=&quot;400&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;line-feed--carriage-reture&quot;&gt;Line Feed &amp;amp;&amp;amp; Carriage Reture&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/e4xm6.jpg&quot; alt=&quot;LFCR&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Line Feed
    &lt;ul&gt;
      &lt;li&gt;Classic Mac OS, OS-9, FLEX (and variants).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;CR+LF
    &lt;ul&gt;
      &lt;li&gt;DOS and Windows, and by Application Layer protocols such as FTP, SMTP, and HTTP&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;history
    &lt;ul&gt;
      &lt;li&gt;打字机要求”Carriage Return” + “Line Feed”
        &lt;ul&gt;
          &lt;li&gt;“Carriage Return”–把打印机头移到最前面&lt;/li&gt;
          &lt;li&gt;“Line Feed”移到新一行&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=n-eFFd5BmpU&quot;&gt;video&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;eof&quot;&gt;EOF&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;end of file的缩写，表示”文字流”（stream）的结尾。这里的”文字流”，可以是文件（file），也可以是标准输入（stdin）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;EOF不是特殊字符，而是一个定义在头文件stdio.h的常量，一般等于-1&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;err&quot;&gt;　#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EOF&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;　&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;　&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;　&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fgetc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;　　　　&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//do something&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;from-ascii-to-unicode&quot;&gt;from ascii to unicode&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;不同的国家有不同的字母，因此，哪怕它们都使用256个符号的编码方式，代表的字母却不一样&lt;/li&gt;
  &lt;li&gt;亚洲国家的文字，使用的符号就更多了，汉字就多达10万左右&lt;/li&gt;
  &lt;li&gt;世界上存在着多种编码方式，同一个二进制数字可以被解释成不同的符号&lt;/li&gt;
  &lt;li&gt;Unicode 当然是一个很大的集合，现在的规模可以容纳100多万个符号。
    &lt;ul&gt;
      &lt;li&gt;每个符号的编码都不一样&lt;/li&gt;
      &lt;li&gt;只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;question-1&quot;&gt;question&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Unicode 是16位编码？&lt;/li&gt;
  &lt;li&gt;每个字符占用16位？可以表示65,536个字符？&lt;/li&gt;
  &lt;li&gt;如何才能区别 Unicode 和 ASCII ?&lt;/li&gt;
  &lt;li&gt;计算机怎么知道三个字节表示一个符号，而不是分别表示三个符号呢？&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;unicode&quot;&gt;unicode&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;windows 通过charmap查询&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;character encodings&lt;/li&gt;
    &lt;li&gt;providing a unique code point—a number, not a glyph—for each character&lt;/li&gt;
    &lt;li&gt;leaves the visual rendering (size, shape, font, or style) to other software&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;utf-16&quot;&gt;utf-16&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;起源于UCS-2 (for 2-byte Universal Character Set)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;languages:
    &lt;ul&gt;
      &lt;li&gt;java&lt;/li&gt;
      &lt;li&gt;JavaScript/ECMAScript&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;system:
    &lt;ul&gt;
      &lt;li&gt;windows use it often
        &lt;ul&gt;
          &lt;li&gt;近两年向UTF-8靠近&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Unix-like systems not like it&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;encoding using 65,536 (216) values&lt;/li&gt;
  &lt;li&gt;2 bytes (16 bits) per character&lt;/li&gt;
  &lt;li&gt;不兼容ASCII&lt;/li&gt;
  &lt;li&gt;on web:
    &lt;ul&gt;
      &lt;li&gt;0.005% (less than 1 hundredth of 1 percent) of web pages&lt;/li&gt;
      &lt;li&gt;UTF-8, by comparison, is used by 97% of all web pages&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;high-endian UCS-2 or low-endian UCS-2&lt;/p&gt;

&lt;h2 id=&quot;utf-8-演进史&quot;&gt;UTF-8 演进史&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200609160034671.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x5ZkdlZWs=,size_16,color_FFFFFF,t_70&quot; alt=&quot;evolution&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;[ITA 2, FIELDATA]   ---&amp;gt;   ASCII  ----&amp;gt;  GB2313   ----&amp;gt;    Unicode[US-2, UTF-16]  -----&amp;gt;  Unicode[UTF-8]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;utf-8&quot;&gt;UTF-8&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;memory：1-4字节&lt;/li&gt;
  &lt;li&gt;最流行的编码方式
    &lt;ul&gt;
      &lt;li&gt;97% of all web pages&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;兼容ASCII
    &lt;ul&gt;
      &lt;li&gt;对于单字节的符号和ASCII一样&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i1.wp.com/convertcodes.com/wp-content/uploads/2018/11/code-point-bit.png?resize=504%2C126&amp;amp;ssl=1&quot; alt=&quot;code point conversion&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;解读&quot;&gt;解读&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;字节
    &lt;ul&gt;
      &lt;li&gt;如果一个字节的第一位是0，则这个字节单独就是一个字符；&lt;/li&gt;
      &lt;li&gt;如果第一位是1，则连续有多少个1，就表示当前字符占用多少个字节&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;对于单字节的符号，字节的第一位设为0&lt;/li&gt;
  &lt;li&gt;对于n字节的符号（n &amp;gt; 1），
    &lt;ul&gt;
      &lt;li&gt;第一个字节的前n位都设为1，&lt;/li&gt;
      &lt;li&gt;第n + 1位设为0，&lt;/li&gt;
      &lt;li&gt;后面字节的前两位一律设为10。&lt;/li&gt;
      &lt;li&gt;剩下的没有提及的二进制位，全部为这个符号的 Unicode 码&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;sample&quot;&gt;sample&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;windows打开charmap，搜索一个汉字&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200609161126959.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x5ZkdlZWs=,size_16,color_FFFFFF,t_70&quot; alt=&quot;convert&quot; width=&quot;1000&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;endianness-of-an-encoding&quot;&gt;endianness of an encoding&lt;/h2&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;//对于一个32位整数1，不同的CPU架构会有不同的存储方式：
00000000 00000000 00000000 00000001
//或者
00000001 00000000 00000000 00000000
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images.squarespace-cdn.com/content/v1/549dcda5e4b0a47d0ae1db1e/1490746414666-EM74IA60AFM16OEH9G22/ke17ZwdGBToddI8pDm48kOMlUb6YZjvz-j7uj5wTIAtZw-zPPgdn4jUwVcJE1ZvWQUxwkmyExglNqGp0IvTJZamWLI2zvYWH8K3-s_4yszcp2ryTI0HqTOaaUohrI8PICROjhJFkM8GI5jSypQ9qrB6ZUKEpH8g8X8GW3p0wQZI/image-asset.png&quot; alt=&quot;endianness&quot; width=&quot;400&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;大端&quot;&gt;大端&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;高位在前&lt;/li&gt;
  &lt;li&gt;最低位放在最后一个位置&lt;/li&gt;
  &lt;li&gt;TCP/IP 协议栈是按照 Big Endian 来设计的，而 X86 机器多按照 Little Endian 来设计的，因而发出去的时候需要做一个转换&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;小端&quot;&gt;小端&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;低位在前&lt;/li&gt;
  &lt;li&gt;最低位放在第一个位置&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;//UTF-8编码是变长的，用8~32位(1~4字节)表示，有固定的位置来表示是几个字节：
0xxxxxxx
110xxxxx 10xxxxxx
1110xxxx 10xxxxxx 10xxxxxx
11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
//字节头部识别就是前面的0，110，1110，11110表示字节数
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;bom&quot;&gt;BOM&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;BOM也是Unicode标准的一部分，有它特定的适用范围。&lt;/li&gt;
  &lt;li&gt;通常BOM是用来标示Unicode纯文本字节流的，用来提供一种方便的方法让文本处理程序识别读入的.txt文件是哪个Unicode编码（UTF-8，UTF-16BE，UTF-16LE）&lt;/li&gt;
  &lt;li&gt;Windows相对对BOM处理比较好，是因为Windows把Unicode识别代码集成进了API里，主要是CreateFile()。打开文本文件时它会自动识别并剔除BOM。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bombyte-order-mark&quot;&gt;bom(byte order mark)&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Unicode 不使用 U+FFFE，在文件开头加一个 BOM 即可区分各种不同编码&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;UTF-8 with bom
https://stackoverflow.com/questions/2223882/whats-the-difference-between-utf-8-and-utf-8-without-bom&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/proxy/_7X9TG6ddYuq-rDKdAb6Tfoo1lyrcJ2PvJhbWnoSqn_J31FFrr_RswtufICuRAk_1L40VFH8mseead1jhnNre4S0JBiIN5lmHyo&quot; alt=&quot;bom&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;UTF-32 编码
    &lt;ul&gt;
      &lt;li&gt;0x00 00 FE FF, 大端&lt;/li&gt;
      &lt;li&gt;0xFF FE 00 00, 小端&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;UTF-16
    &lt;ul&gt;
      &lt;li&gt;0xFE FF, 大端&lt;/li&gt;
      &lt;li&gt;0xFF FE, 小端&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;UTF-8
    &lt;ul&gt;
      &lt;li&gt;0xEF BB BF –《其实我无所谓》 &lt;img src=&quot;https://language.chinadaily.com.cn/images/attachement/jpg/site1/20150317/a41f726749f61671fee14c.jpg&quot; alt=&quot;convert&quot; width=&quot;100&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;辅助作用?
        &lt;ul&gt;
          &lt;li&gt;UTF-8 对BOM无要求
            &lt;ul&gt;
              &lt;li&gt;UTF-8没有大小端的困扰&lt;/li&gt;
              &lt;li&gt;bom可以标识输入流/文本以UTF-8编写，方便推测&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;jni&quot;&gt;JNI&lt;/h2&gt;

&lt;h3 id=&quot;在jni调用中我们经常用到getstringutfchars&quot;&gt;在jni调用中我们经常用到GetStringUTFChars&lt;/h3&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;JNIEXPORT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jobjectArray&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JNICALL&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;Java_com_xxx_symbolkit_symbol_jni_ELFJni_getSymsBySoFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JNIEnv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jclass&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jstring&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;so_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetStringUTFChars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//转码UTF-8&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//do something~~~~~~&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReleaseStringUTFChars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;字符串操作函数&quot;&gt;字符串操作函数&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;GetStringUTFChars
    &lt;ul&gt;
      &lt;li&gt;const char * GetStringUTFChars(JNIEnv *env, jstring string,jboolean *isCopy);&lt;/li&gt;
      &lt;li&gt;Returns a pointer to an array of bytes representing the string in modified UTF-8 encoding&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;GetStringChars
    &lt;ul&gt;
      &lt;li&gt;const char * GetStringChars(JNIEnv *env, jstring string,jboolean *isCopy);&lt;/li&gt;
      &lt;li&gt;Returns a pointer to the array of Unicode characters of the string
        &lt;ul&gt;
          &lt;li&gt;actually UTF-16&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;iscopy参数&quot;&gt;isCopy参数&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;JNI_FALSE
    &lt;ul&gt;
      &lt;li&gt;指向的是JVM中的同一份数据&lt;/li&gt;
      &lt;li&gt;不一定会拷贝&lt;/li&gt;
      &lt;li&gt;本地代码决不能修改字符串的内容，
  	- 否则JVM中的原始字符串也会被修改，
  	- 这会打破JAVA语言中字符串不可变的规则&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;JNI_TRUE
    &lt;ul&gt;
      &lt;li&gt;一定会拷贝&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;一定要调用release
    &lt;ul&gt;
      &lt;li&gt;void ReleaseStringUTFChars(JNIEnv *env, jstring string,const char *utf);&lt;/li&gt;
      &lt;li&gt;void ReleaseStringChars(JNIEnv *env, jstring string, const jchar *chars);&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;不要对jnienv做任何假设&quot;&gt;不要对JNIEnv做任何假设&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.programmersought.com/article/8728233532/&quot;&gt;Java layer objects as opaque references&lt;strong&gt;(pointer&lt;/strong&gt;) passed to the JNI layer&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;jnienv-is-just-interface&quot;&gt;JNIEnv is just interface&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://taoste.github.io/dirtysalt/html/images/jnienv-interface-pointer.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;there-are-some-many-vms&quot;&gt;there are some many vms&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;虚拟机始祖：SunClassic/ExactVM&lt;/li&gt;
  &lt;li&gt;武林盟主：HotSpotVM&lt;/li&gt;
  &lt;li&gt;小家碧玉：Mobile/EmbeddedVM&lt;/li&gt;
  &lt;li&gt;天下第二：BEAJRockit/IBMJ9VM&lt;/li&gt;
  &lt;li&gt;软硬合璧：BEALiquidVM/AzulVM&lt;/li&gt;
  &lt;li&gt;挑战者：ApacheHarmony/GoogleAndroidDalvikVM&lt;/li&gt;
  &lt;li&gt;没有成功，但并非失败：MicrosoftJVM及其他&lt;/li&gt;
  &lt;li&gt;百家争鸣
    &lt;ul&gt;
      &lt;li&gt;JamVM：http://jamvm.sourceforge.net/·&lt;/li&gt;
      &lt;li&gt;CacaoVM：http://www.cacaovm.org/·&lt;/li&gt;
      &lt;li&gt;SableVM：http://www.sablevm.org/·&lt;/li&gt;
      &lt;li&gt;Kaffe：http://www.kaffe.org/·&lt;/li&gt;
      &lt;li&gt;JelatineJVM：http://jelatine.sourceforge.net/·&lt;/li&gt;
      &lt;li&gt;NanoVM：http://www.harbaum.org/till/nanovm/index.shtml·&lt;/li&gt;
      &lt;li&gt;MRP：https://github.com/codehaus/mrp·&lt;/li&gt;
      &lt;li&gt;MoxieJVM：http://moxie.sourceforge.net/&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;周志明. 深入理解Java虚拟机：JVM高级特性与最佳实践（第3版） (华章原创精品) (Chinese Edition)&lt;/p&gt;

&lt;h2 id=&quot;java-string--c-string-object&quot;&gt;java string &amp;amp;&amp;amp; c++ string object&lt;/h2&gt;

&lt;h3 id=&quot;stirng-literal&quot;&gt;stirng literal&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;actually calling intern() method on String
    &lt;ul&gt;
      &lt;li&gt;references internal pool of string objects
        &lt;ul&gt;
          &lt;li&gt;运行时常量池，在runtime期间亦可以动态添加&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;if same value exist, no new object could be created&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;“&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;GeeksForGeeks&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;”&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://img.javatt.com/6e/6e7d96afc9b175222aa43e3f7ef8eee5.png&quot; alt=&quot;endianness&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;string-object&quot;&gt;String object&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;JVM is forced to create a new string reference, even if “GeeksForGeeks” is in the reference pool.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;“&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;GeeksForGeeks&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;”&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;c-c&quot;&gt;c, c++&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;C++98 中有 char 和 wchar_t 两种不同的字符类型，
    &lt;ul&gt;
      &lt;li&gt;其中 char 的长度是单字节，&lt;/li&gt;
      &lt;li&gt;而 wchar_t 的长度不确定。
        &lt;ul&gt;
          &lt;li&gt;在 Windows 上它是双字节，只能代表 UTF-16，&lt;/li&gt;
          &lt;li&gt;而在 Unix 上一般是四字节，可以代表 UTF-32&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;C++11 引入了 char16_t 和 char32_t 两个独立的字符类型（不是类型别名），分别代表 UTF-16 和 UTF-32&lt;/li&gt;
  &lt;li&gt;C++20 将引入 char8_t 类型，进一步区分了可能使用传统编码的窄字符类型和 UTF-8 字符类型&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;java-string-char-to-byte&quot;&gt;java String char to byte&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;为了节约String占用的内存&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;jdk9新特性&lt;/li&gt;
  &lt;li&gt;在大多数Java程序的堆里，String占用的空间最大，并且绝大多数String只有Latin-1字符，这些Latin-1字符只需要1个字节就够了&lt;/li&gt;
  &lt;li&gt;before
    &lt;ul&gt;
      &lt;li&gt;JDK9之前，JVM因为String使用char数组存储，每个char占2个字节，所以即使字符串只需要1字节/字符，它也要按照2字节/字符进行分配，浪费了一半的内存空间&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;after
    &lt;ul&gt;
      &lt;li&gt;JDK9:一个字符串出来的时候判断，它是不是只有Latin-1字符，如果是，就按照1字节/字符的规格进行分配内存，如果不是，就按照2字节/字符的规格进行分配（UTF-16编码），提高了内存使用率&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;gbk-半角全角&quot;&gt;GBK, 半角&amp;amp;&amp;amp;全角&lt;/h2&gt;

&lt;h3 id=&quot;gbk&quot;&gt;GBK&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;最早的中文字符集标准是 1980 年的国标 GB2312，
    &lt;ul&gt;
      &lt;li&gt;其中收录了 6763 个常用汉字和 682 个其他符号&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;与 ASCII 兼容
    &lt;ul&gt;
      &lt;li&gt;由于 GB2312 中本身也含有 ASCII 中包含的字符，在使用中逐渐就形成了“半角”和“全角”的区别&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;国标字符集后面又有扩展，这个扩展后的字符集就是 GBK
    &lt;ul&gt;
      &lt;li&gt;中文版 Windows 使用的标准编码方式&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;原因&quot;&gt;原因&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;历史原因&lt;/li&gt;
  &lt;li&gt;排版&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;//全角
ｖａｌ　ｔｅｓｔｉｎｇ　＝　ｔｒｕｅ

//半角
val testing = true
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;全角与半角两个术语应该都是从日本来的&quot;&gt;「全角」与「半角」两个术语应该都是从日本来的&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;JIS X 4051《日本語文書の組版方法》里面，将全角定义为「汉字一文字的外框」，半角定义为「字宽为全角二分之一的文字之外框」&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;at-last-three-button-is-enough&quot;&gt;at last: three button is enough&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/8/89/WACsOperateTeletype.jpg&quot; alt=&quot;teleprinter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://5.imimg.com/data5/SI/LI/FK/SELLER-8118327/gaming-desktop-pc-custom-built-cpu--500x500.jpg&quot; alt=&quot;now&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://deliverassignment.com/wp-content/uploads/2020/06/compute-programmer.jpg&quot; alt=&quot;mac&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;人类社会不断发展，技术日新月异，三个按键足够了&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://149351115.v2.pressablecdn.com/wp-content/uploads/2021/03/the_key_angle-1536x1152.jpeg&quot; alt=&quot;holes&quot; width=&quot;400&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;references&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/12747722/what-is-the-difference-between-a-line-feed-and-a-carriage-return#:~:text=A%20line%20feed%20means%20moving,r%5Cn%20in%20text%20files.&quot;&gt;“line feed” and a “carriage return”?&lt;/a&gt;
&lt;a href=&quot;https://stackoverflow.com/questions/12747722/what-is-the-difference-between-a-line-feed-and-a-carriage-return#:~:text=A%20line%20feed%20means%20moving,r%5Cn%20in%20text%20files.&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://medium.com/@apiltamang/unicode-utf-8-and-ascii-encodings-made-easy-5bfbe3a1c45a&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;http://www.ruanyifeng.com/blog/2011/11/eof.html&quot;&gt;&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 10 Apr 2021 00:00:00 +0800</pubDate>
        <link>https://thomasliao.cn/2021/04/10/encoding/</link>
        <guid isPermaLink="true">https://thomasliao.cn/2021/04/10/encoding/</guid>
        
        
      </item>
    
      <item>
        <title>c++ notes</title>
        <description>&lt;h1 id=&quot;c-notes&quot;&gt;c++ Notes&lt;/h1&gt;

&lt;h2 id=&quot;100-编译器&quot;&gt;1.0.0 编译器&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;msvc
    &lt;ul&gt;
      &lt;li&gt;windows&lt;/li&gt;
      &lt;li&gt;最历史悠久、最成熟，但也是最有历史包袱的编译器，微软&lt;/li&gt;
      &lt;li&gt;模板的支持则是它的软肋&lt;/li&gt;
      &lt;li&gt;2018 年宣布已全面支持 C++17 标准&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;gcc
    &lt;ul&gt;
      &lt;li&gt;跨平台&lt;/li&gt;
      &lt;li&gt;GCC 的第一个版本发布于 1987 年，是由自由软件运动的发起人 Richard Stallman（常常被缩写为 RMS）亲自写的&lt;/li&gt;
      &lt;li&gt;由于 GCC 是用 GPL 发布的，任何对 GCC 的修改都必须以 GPL 协议发布&lt;/li&gt;
      &lt;li&gt;应用最广的自由软件之一&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;clang
    &lt;ul&gt;
      &lt;li&gt;跨平台&lt;/li&gt;
      &lt;li&gt;错误信息的友好性是它的最大亮点&lt;/li&gt;
      &lt;li&gt;最新， LLVM项目的一部分&lt;/li&gt;
      &lt;li&gt;Clang 目前在 macOS 下是默认的 C/C++ 编译器&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;101-内联函数&quot;&gt;1.0.1 内联函数&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;如果一些函数被频繁调用，不断地有函数入栈，即函数栈，会造成栈空间或栈内存的大量消耗&lt;/li&gt;
  &lt;li&gt;关键字inline 必须与函数定义体放在一起才能使函数成为内联，仅将inline 放在函数声明前面不起任何作用&lt;/li&gt;
  &lt;li&gt;inline只适合涵数体内代码简单的函数数使用，不能包含复杂的结构控制语句例如while、switch，并且内联函数本身不能是直接递归函数(自己内部还调用自己的函数)。&lt;/li&gt;
  &lt;li&gt;内联是以代码膨胀（复制）为代价，仅仅省去了函数调用的开销，从而提高函数的执行效率&lt;/li&gt;
  &lt;li&gt;最好将内联函数定义放在头文件中&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;102-macro&quot;&gt;1.0.2 macro&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;#define 预处理指令用于创建符号常量：#define PI 3.14159
    &lt;ul&gt;
      &lt;li&gt;#define 来定义一个带有参数的宏，注意要多加括号：MIN(a,b) (a&amp;lt;b ? a : b)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;条件编译：#ifdef #define #endif&lt;/li&gt;
  &lt;li&gt;“#”置于identifier面前表示将identifier变成字符串字面值，“##”连接&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;103-array&quot;&gt;1.0.3 array&lt;/h2&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;constexpr&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//if you don't know how many elements you want, use a vector&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ia1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hi&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;bye&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// remember #include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Animals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Elephant&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Fox&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Lion&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Tiger&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// remember #include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//char array is special&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'C'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'+'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'+'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//list initialization, no null;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CHECK_V&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'C'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'+'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'+'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//list initialization, explicit null&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CHECK_V&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a33&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;C++&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//null terminator added automatically&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CHECK_V&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a33&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a44&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Daniel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;无法通过变量来声明数组大小&quot;&gt;无法通过变量来声明数组大小&lt;/h3&gt;
&lt;p&gt;ex:&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;You can declare an array only with constant size, which can be deduced at compile time. 
variables’ values can be known only at runtime.&lt;/li&gt;
  &lt;li&gt;To elaborate, when you allocate memory on the stack, the size must be known at compile time. 
Since the arrays are local to the method, they will be placed on the stack.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;solution1&quot;&gt;solution1:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;You can either use constant value, or allocate memory in the heap using new,
 and deallocate when done using delete, like&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zod1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zo1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//.... other code&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zod1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;solution2&quot;&gt;solution2:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;use vector instead of array here also, and vector will take care of allocation on the heap.&lt;/li&gt;
  &lt;li&gt;As a side note, you should not pass vector by value, as the whole vector will be copied 
and passed as argument, and no change will be visible at the caller side.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Use vector&lt;char&gt;&amp;amp; zodis1 instead&lt;/char&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;104-casting&quot;&gt;1.0.4 casting&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;static_cast
    &lt;ul&gt;
      &lt;li&gt;any well-defined type conversion, other than those involving low-level const&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;dynamic_cast
    &lt;ul&gt;
      &lt;li&gt;supports the run-time type identification&lt;/li&gt;
      &lt;li&gt;继承&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;const_cast
    &lt;ul&gt;
      &lt;li&gt;changes only a low-level const in its operand&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;reinterpret_cast
    &lt;ul&gt;
      &lt;li&gt;performs a low-level reinterpretation of the bit pattern of its operands&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;105c--size-of-int-long-short&quot;&gt;1.0.5.C++ , size of int, long, short&lt;/h2&gt;

&lt;h3 id=&quot;decided-by-compiler&quot;&gt;decided by compiler&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;depends on the compiler and only on the compiler.&lt;/li&gt;
  &lt;li&gt;Hardware/OS is of no importance at all&lt;/li&gt;
  &lt;li&gt;The compiler is free to implement a hardware abstraction layer of any thickness and emulate absolutely anything&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;char--byte-octet&quot;&gt;char , byte, octet&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;char is always a byte , but it’s not always an octet
    &lt;ul&gt;
      &lt;li&gt;byte
        &lt;ul&gt;
          &lt;li&gt;A byte is the smallest addressable unit of memory (in most definitions),&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;octet
        &lt;ul&gt;
          &lt;li&gt;an octet is 8-bit unit of memory&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;sizeof(char) is always 1 for all implementations&lt;/li&gt;
  &lt;li&gt;CHAR_BIT macro in limits.h
    &lt;ul&gt;
      &lt;li&gt;defines the size of a byte for a platform&lt;/li&gt;
      &lt;li&gt;it is not always 8 bit.
        &lt;ul&gt;
          &lt;li&gt;16-bit, 32-bit bytes&lt;/li&gt;
          &lt;li&gt;others[ex. 7], have to deal with aligned and padding&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;size&quot;&gt;size&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;range
    &lt;ul&gt;
      &lt;li&gt;signed char: -127 to 127 (note, not -128 to 127; this accommodates 1’s-complement and sign-and-magnitude platforms)&lt;/li&gt;
      &lt;li&gt;unsigned char: 0 to 255&lt;/li&gt;
      &lt;li&gt;“plain” char: same range as signed char or unsigned char, implementation-defined&lt;/li&gt;
      &lt;li&gt;signed short: -32767 to 32767&lt;/li&gt;
      &lt;li&gt;unsigned short: 0 to 65535&lt;/li&gt;
      &lt;li&gt;signed int: -32767 to 32767&lt;/li&gt;
      &lt;li&gt;unsigned int: 0 to 65535&lt;/li&gt;
      &lt;li&gt;signed long: -2147483647 to 2147483647&lt;/li&gt;
      &lt;li&gt;unsigned long: 0 to 4294967295&lt;/li&gt;
      &lt;li&gt;signed long long: -9223372036854775807 to 9223372036854775807&lt;/li&gt;
      &lt;li&gt;unsigned long long: 0 to 18446744073709551615&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;rules
    &lt;ul&gt;
      &lt;li&gt;char, signed char, and unsigned char are at least 8 bits&lt;/li&gt;
      &lt;li&gt;signed short, unsigned short, signed int, and unsigned int are at least 16 bits&lt;/li&gt;
      &lt;li&gt;signed long and unsigned long are at least 32 bits&lt;/li&gt;
      &lt;li&gt;signed long long and unsigned long long are at least 64 bits&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ref&quot;&gt;ref&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/437470/type-to-use-to-represent-a-byte-in-ansi-c89-90-c/437640#437640&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://stackoverflow.com/questions/589575/what-does-the-c-standard-state-the-size-of-int-long-type-to-be&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;https://stackoverflow.com/questions/437470/type-to-use-to-represent-a-byte-in-ansi-c89-90-c/437640#437640&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;3constuse-const-whenever-possible&quot;&gt;3.const–use const whenever possible&lt;/h2&gt;

&lt;h3 id=&quot;type-declaration-before-or-after-const-are-the-same&quot;&gt;type declaration before or after const are the same&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;tips: read from right to left&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;//type declaration before or after const are the same&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//tips: read from right to left&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//ptr is a pointer to constant int&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//prt1 is a pointer to an int who is constant&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ptr3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//ptr3 is a const pointer to an int&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//both ptr4 and ptr5 are constant pointer to a constant int&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ptr4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ptr5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;stl-iterators-are-modeled-on-pointers&quot;&gt;stl iterators are modeled on pointers&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;tips: read from left to right&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;    &lt;span class=&quot;c1&quot;&gt;//const pointer&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//ok&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//++iter; //error&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//pointer to const data&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;const_iterator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//     *clter = 10; //error&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;//ok&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;declaring-something-const-helps-compilers-detect-usage-errors&quot;&gt;Declaring something const helps compilers detect usage errors.&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;const can be applied to objects at any scope,
    &lt;ul&gt;
      &lt;li&gt;function parameters&lt;/li&gt;
      &lt;li&gt;return types,&lt;/li&gt;
      &lt;li&gt;member functions as a whole.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;4make-sure-that-objects-are-initialized-before-used&quot;&gt;4.make sure that objects are initialized before used&lt;/h2&gt;

&lt;h3 id=&quot;initialized-is-not-guaranteed&quot;&gt;initialized is not guaranteed&lt;/h3&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//guaranteed to be initialized to zero&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// p's data members are sometimes guaranteed sometimes are not&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;rules are complicated(not worth)
    &lt;ul&gt;
      &lt;li&gt;in the c part of c++ , initialization would incur a runtime cost, not guaranteed
        &lt;ul&gt;
          &lt;li&gt;array isn’t guaranteed to be initialized&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;non-c parts of c++, might be guaranteed
        &lt;ul&gt;
          &lt;li&gt;a std::vector is guaranteed to be initialized&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;not-confuse-assignment-with-initialization&quot;&gt;not confuse assignment with initialization&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;assignment : inside the body of constructor&lt;/li&gt;
  &lt;li&gt;initializatio took place earlier
    &lt;ul&gt;
      &lt;li&gt;default constructors were automatically called prior to entering the body&lt;/li&gt;
      &lt;li&gt;but built-in type
        &lt;ul&gt;
          &lt;li&gt;no constuctor/destructor&lt;/li&gt;
          &lt;li&gt;no guarantee it was initialized prior to its assignment&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The rules of C++ stipulate that data members of an object are initialized before the body of a constructor is entered&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;use the member initialization list instead of assignments&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;//ex.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ABEntry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ABEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PhoneNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phones&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//these are now all initializations&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;theName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// copy-constructed&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;theAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//  copy-constructed&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;thePhones&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;phones&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//  copy-constructed&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;numTimesConsulted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// the ctor body is now empty&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// use the member initialization list even when you want to default-construct a data member&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ABEntry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ABEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;theName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// call theName’s default ctor;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;theAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// do the same for theAddress;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;thePhones&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// and for thePhones;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;numTimesConsulted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// but explicitly initialize&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// numTimesConsulted to zero&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;more efficient
    &lt;ul&gt;
      &lt;li&gt;assigiment first called default constructors then assigned new value
        &lt;ul&gt;
          &lt;li&gt;all the deafult constructors’ work are wasted&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;member initialization list avoids it
        &lt;ul&gt;
          &lt;li&gt;arguments in the initialization list are used as constructor arguments for the various data members
            &lt;ul&gt;
              &lt;li&gt;For most types, a single call to a copy constructor is more efficient — sometimes much more efficient — than a call to the default constructor followed by a call to the copy assignment operator&lt;/li&gt;
              &lt;li&gt;for  built-it types, no different between initialization and assignment
                &lt;ul&gt;
                  &lt;li&gt;for consistency, use member initialization too.&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;Sometimes the initialization list must be used,, even for built-in types.
                &lt;ul&gt;
                  &lt;li&gt;For example, data members that are const or are references must be initialized; they can’t be assigned&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;if too much data members
        &lt;ul&gt;
          &lt;li&gt;multiple initialization lists introduces undesirable repetition (in the lists) and boredom&lt;/li&gt;
          &lt;li&gt;moving the assignments to a single (typically private) function that all the constructors call&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;order-of-data-initialization&quot;&gt;order of data initialization&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;base classes are initialized before derived classes&lt;/li&gt;
  &lt;li&gt;and within a class,data members are initialized in the order in which they are declared
    &lt;ul&gt;
      &lt;li&gt;even if they are listed in a different order on the member initialization list&lt;/li&gt;
      &lt;li&gt;to avoid confusion: list members in the initialization list in the same order as they’re declared in the class&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;staitc-object&quot;&gt;staitc object&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;A static object is one that exists from the time it’s constructed until the end of the program.
    &lt;ul&gt;
      &lt;li&gt;excluded:Stack and heap-based objects&lt;/li&gt;
      &lt;li&gt;Included are
        &lt;ul&gt;
          &lt;li&gt;global objects,&lt;/li&gt;
          &lt;li&gt;objects defined at namespace scope,&lt;/li&gt;
          &lt;li&gt;objects declared static inside classes,&lt;/li&gt;
          &lt;li&gt;objects declared static inside functions,&lt;/li&gt;
          &lt;li&gt;objects declared static at file scope&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;problem&quot;&gt;problem&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;the relative order of initialization of nonlocal static objects defined in different translation units is undefined&lt;/li&gt;
  &lt;li&gt;it’s not only impossible to determine the right order of initialization,&lt;/li&gt;
  &lt;li&gt;it’s typically not even worth looking for special cases where it is possible to determine the right order.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;solution-replaced-non-local-static-objects-with-local-static-objects&quot;&gt;solution: replaced non-local static objects with local static objects.&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;move each non-local static object into its own function, where it’s declared static
    &lt;ul&gt;
      &lt;li&gt;Singleton pattern&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;This approach is founded on C++’s guarantee that local static objects are initialized when the object’s definition is first encountered during a call to that function.&lt;/li&gt;
  &lt;li&gt;As a bonus, if you never call a function emulating a non-local static object, you never incur the cost of constructing and destructing the object,
    &lt;ul&gt;
      &lt;li&gt;something that can’t be said for true non-local static objects&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;might cause multi-theads problem
    &lt;ul&gt;
      &lt;li&gt;one solution is to manually invoke all the reference-returning functions during the single-threaded startup portion of the program.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;5funcitons-c-silently-writes-and-calls&quot;&gt;5.funcitons c++ silently writes and calls&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;default constructor,  copy constructor, destructor,  copy assignment operator(=)
    &lt;ul&gt;
      &lt;li&gt;copy constructor,  =
        &lt;ul&gt;
          &lt;li&gt;simply copy each non-static data member
            &lt;ul&gt;
              &lt;li&gt;class for its own copy construtor&lt;/li&gt;
              &lt;li&gt;primitive just copy bits&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;compiler won’t generate constructor if written constructors manually
            &lt;ul&gt;
              &lt;li&gt;neither for others&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;generated only if they are needed&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;6explicitly-disallow-the-use-of-compiler-generated-functions-you-do-not-want&quot;&gt;6.Explicitly disallow the use of compiler generated functions you do not want&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;ex. avoid to copy&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;the copy constructor and the copy assignment operator are declared private and are not defined&lt;/li&gt;
  &lt;li&gt;change to compile error
    &lt;ul&gt;
      &lt;li&gt;use a base class:  Uncopyable&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Uncopyable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;protected:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// allow construction&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Uncopyable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// and destruction of&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Uncopyable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// derived objects...&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;private:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Uncopyable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Uncopyable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ...but prevent copying&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Uncopyable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Uncopyable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;7virtual-destructor&quot;&gt;7.virtual destructor&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;problem: when a derived class object is deleted through a pointer to a base class with a non-virtual destructor, results are undefined.
    &lt;ul&gt;
      &lt;li&gt;tipicially, the derived part is never destroyed&lt;/li&gt;
      &lt;li&gt;leading to partialy destroyed object&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;but
    &lt;ul&gt;
      &lt;li&gt;gratuitously[无偿的, 免费的] declaring all destructors virtual is wrong
        &lt;ul&gt;
          &lt;li&gt;increase the size&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;should not inherent from any class lacking a virtual destructor–&lt;strong&gt;not designed to be used polymorphically&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;std::string&lt;/li&gt;
          &lt;li&gt;stl containers: vector, list, set, tr1::unordered_map&lt;/li&gt;
          &lt;li&gt;C++ offers no derivation-prevention mechanism
            &lt;ul&gt;
              &lt;li&gt;java final&lt;/li&gt;
              &lt;li&gt;c# sealed class&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;solution:  give the base class a virtual destructor.
    &lt;ul&gt;
      &lt;li&gt;destroy the entire object&lt;/li&gt;
      &lt;li&gt;should  provide a body for the destructor&lt;/li&gt;
      &lt;li&gt;how it work:
        &lt;ul&gt;
          &lt;li&gt;the most derived classes’s destructor is called first&lt;/li&gt;
          &lt;li&gt;then the destructor of eache base class is called&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;class AWOV { // AWOV = “Abstract w/o Virtuals”
public:
virtual ~AWOV() = 0; // declare pure virtual destructor
};

AWOV::~AWOV() {} // definition of pure virtual dtor
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;8prevent-exceptions-from-leaving-destructors&quot;&gt;8.Prevent exceptions from leaving destructors.&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Destructors should never emit exceptions.
    &lt;ul&gt;
      &lt;li&gt;swallow it&lt;/li&gt;
      &lt;li&gt;terminate the program: std::abort()&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;If class clients need to be able to react to exceptions thrown during
an operation,
    &lt;ul&gt;
      &lt;li&gt;server swallow the exception, and mark the exception with var&lt;/li&gt;
      &lt;li&gt;client check the var, and continue to solve it&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 10 Apr 2021 00:00:00 +0800</pubDate>
        <link>https://thomasliao.cn/2021/04/10/c++-notes/</link>
        <guid isPermaLink="true">https://thomasliao.cn/2021/04/10/c++-notes/</guid>
        
        <category>c++</category>
        
        <category>note</category>
        
        <category>Anki</category>
        
        
      </item>
    
      <item>
        <title>Thread</title>
        <description>&lt;p&gt;“When you bow deeply to the universe, it bows back; when you call out the name of God, it echoes inside you.”
―Morihei Ueshiba&lt;/p&gt;

&lt;h1 id=&quot;thread&quot;&gt;Thread&lt;/h1&gt;

&lt;h2 id=&quot;java-thread定义&quot;&gt;Java thread定义∏&lt;/h2&gt;

&lt;h3 id=&quot;what&quot;&gt;what?&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;比进程更加轻量级的调度执行单位&lt;/li&gt;
  &lt;li&gt;线程是cpu调度的基本单位&lt;/li&gt;
  &lt;li&gt;各个线程可以共享进程资源又可以独立调度&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;操作系统线程实现&quot;&gt;操作系统线程实现&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;使用内核线程实现，由内核管理，对外接口是LWP(Light Weight Process)轻量级进程
    &lt;ul&gt;
      &lt;li&gt;由内核通过scheduler对线程进行调度&lt;/li&gt;
      &lt;li&gt;程序不直接使用内核线程，而是使用内核线程的高级接口轻量级进程(LWP)&lt;/li&gt;
      &lt;li&gt;每个Light Weight Process都由一个内核线程支持&lt;/li&gt;
      &lt;li&gt;需要系统调用，调用代价相对较高&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;使用用户线程实现(Java, Ruby曾经使用过，最终放弃)， 
    &lt;ul&gt;
      &lt;li&gt;完全建立在用户空间，不需要内核帮助&lt;/li&gt;
      &lt;li&gt;所有线程操作用户程序自己管理（复杂）：
        &lt;ul&gt;
          &lt;li&gt;线程切换、创建、调度&lt;/li&gt;
          &lt;li&gt;阻塞如何处理&lt;/li&gt;
          &lt;li&gt;多处理器系统如何将线程映射到其他处理器上&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;使用用户线程和轻量级进程混合实现
    &lt;ul&gt;
      &lt;li&gt;用户线程完全建立在用户空间，用户线程的创建、切换、析构等操作依然廉价&lt;/li&gt;
      &lt;li&gt;用户线程的调度使用轻量级进程来完成&lt;/li&gt;
      &lt;li&gt;用户线程和轻量级进程是多对多关系，N:M&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;java线程实现&quot;&gt;Java线程实现&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&amp;lt; JDK1.2 基于”绿色线程”的用户线程实现&lt;/li&gt;
  &lt;li&gt;JDK1.2开始, 基于操作系统原生线程模型
    &lt;ul&gt;
      &lt;li&gt;Windows版和Linux版都是使用一对一的线程模型实现， 一条java线程映射到一条轻量级进程中&lt;/li&gt;
      &lt;li&gt;Solaris平台同时支持一对一和多对多&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;mainthread-vs-child-thread&quot;&gt;MainThread vs child thread&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;no relationship of parent and child&lt;/li&gt;
  &lt;li&gt;inherit from ‘parent thread’
    &lt;ul&gt;
      &lt;li&gt;thread daemon property&lt;/li&gt;
      &lt;li&gt;thread priority&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;how-many-ways-create-thread&quot;&gt;how many ways create thread&lt;/h2&gt;

&lt;p&gt;one way create thread: new Thread() , but three way to assign task:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;java.lang.Runnable &lt;/li&gt;
  &lt;li&gt;java.lang.Thread class itself.&lt;/li&gt;
  &lt;li&gt;java.util.concurrent.Callable Interface.
    &lt;ul&gt;
      &lt;li&gt;A callable returns a &lt;V&gt;, which will become a Future&lt;V&gt; when submitted via an ExecutorService&lt;/V&gt;&lt;/V&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;//extends thread&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyThread&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Thread assign task of new Thread&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//by Runnable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ThreadTask&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Runnable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//Code present here will be executed in separate independent path.&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Thread assign task of Runnable interface&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//Lets create Task first to assign it to the Thread&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;ThreadTask&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threadTask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ThreadTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//Lets create a Thread and assign task to it.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//Way to assign task to a Thread is by passing task object(Runnable) to Thread's constructor.&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;threadTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//Start a thread&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;thread1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;start-vs-run&quot;&gt;start() vs run()&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;直接跑run() , 则在本线程跑&lt;/li&gt;
  &lt;li&gt;调用start， 会在新的线程跑&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;java常用线程类&quot;&gt;Java常用线程类&lt;/h2&gt;

&lt;h2 id=&quot;start-thread-twice&quot;&gt;start thread twice&lt;/h2&gt;
&lt;p&gt;illegalThreadStateException will be thrown&lt;/p&gt;

&lt;h2 id=&quot;调用子线程的join方法&quot;&gt;调用子线程的join()方法&lt;/h2&gt;
&lt;p&gt;主线程会等待子线程执行完才会结束&lt;/p&gt;

&lt;h2 id=&quot;threadyield&quot;&gt;Thread.&lt;em&gt;yield&lt;/em&gt;()&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;yield() &lt;/strong&gt;basically means that the thread is not doing anything particularly important and if any other threads or processes need to be run, they should run. Otherwise, the current thread will continue to run.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;gives hint to the thread scheduler that it is ready to pause its execution&lt;/li&gt;
  &lt;li&gt;thread scheduler checks if there is any thread with same or high priority than this thread, then move the current thread to Ready/Runnable state and give processor to other thread&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;一般比较少用该方法，一般是debug或者测试的时候使用&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;join&quot;&gt;join()&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;waits for this thread to die&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;detail:
&lt;a href=&quot;https://stackoverflow.com/questions/15956231/what-does-this-thread-join-code-mean&quot;&gt;https://stackoverflow.com/questions/15956231/what-does-this-thread-join-code-mean&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EventThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;e1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EventThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;e2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//这个while是为了保证出异常的时候t2继续运行&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;When join method is invoked, current thread would release its resources and goes in waiting state&lt;/li&gt;
  &lt;li&gt;thread1 thread2 run in parallel–of course, 他们先调用了start()&lt;/li&gt;
  &lt;li&gt;After run() method of thread is completed, it doesn’t mean thread task is completed,  It has to do many other tasks like 
    &lt;ul&gt;
      &lt;li&gt;Destroying the associated stack, &lt;/li&gt;
      &lt;li&gt;Setting the necessary threadStatus etc.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One of the task is notifying the waiting threads, So that Thread waiting on join() method will be notified that thread has completed its task and joined threads can resume.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Above task are executed inside native thread call, so it wont be visible in java thread API.&lt;/li&gt;
  &lt;li&gt;原理
    &lt;ul&gt;
      &lt;li&gt;检查join线程是否存活，如果存活则让当前线程wait&lt;/li&gt;
      &lt;li&gt;join线程中止后，该线程的this.notifyAll()会被调用&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/15956231/what-does-this-thread-join-code-mean/15956265&quot;&gt;what join mean&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;            &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isAlive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//这个while是为了保证lock.notifyAll的时候判断线程是否还存活&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//target thread's lock&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;can-thread-be-created-without-any-threadgroup&quot;&gt;Can Thread be created without any ThreadGroup&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;No&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/threadgroup.png&quot; alt=&quot;java-thread-group-hierarchy.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;子线程抛异常主线程是否会继续运行&quot;&gt;子线程抛异常，主线程是否会继续运行&lt;/h2&gt;
&lt;p&gt;yes， In general, Exception thrown by one thread will not affect another thread, as all threads are independent and have different stack.&lt;/p&gt;

&lt;h2 id=&quot;线程状态&quot;&gt;线程状态&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/images/threadstates.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;BLOCKED 是指线程正在等待获取锁&lt;/li&gt;
  &lt;li&gt;WAITING 是指线程正在等待其他线程的“唤醒动作”&lt;/li&gt;
  &lt;li&gt;Thread.sleep
    &lt;ul&gt;
      &lt;li&gt;告诉操作系统“在未来的多少毫秒内我不参与CPU竞争”&lt;/li&gt;
      &lt;li&gt;Thread.Sleep(0)的作用，就是“触发操作系统立刻重新进行一次CPU竞争”&lt;/li&gt;
      &lt;li&gt;不会释放锁&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;object.wait会释放锁
    &lt;ul&gt;
      &lt;li&gt;Waiting only releases the lock for the object you call wait() on. It doesn’t release any other locks&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;//You don't actually need to call sleep from within a lock - &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//locks and wait/notify go hand in hand but locks and sleep are unrelated&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;LOCK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// LOCK is held&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;LOCK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;LOCK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// LOCK is not held&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;线程状态转换&quot;&gt;线程状态转换&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/thread_state_change.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;WAITING &lt;a href=&quot;https://stackoverflow.com/a/13664082/791406&quot;&gt;never&lt;/a&gt; goes directly to RUNNABLE&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;The thread is WAITING until it is notified…Then it &lt;a href=&quot;https://stackoverflow.com/a/2534158/791406&quot;&gt;becomes&lt;/a&gt; BLOCKED…&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Once this thread is notified, it &lt;a href=&quot;https://stackoverflow.com/a/15680579/791406&quot;&gt;will not be runnable&lt;/a&gt;…This is..Blocked State.&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;操作系统隐藏 Java虚拟机（JVM）中的 RUNNABLE 和 RUNNING 状态，它只能看到 RUNNABLE 状态&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;wait-notify&quot;&gt;wait-notify&lt;/h2&gt;

&lt;p&gt;when we call wait() – this forces the current thread to wait until some other thread invokes notify() or notifyAll() on the same object.&lt;/p&gt;

&lt;p&gt;current thread must own the object’s monitor, 3 ways–synchronized方法&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;executed synchronized instance method for the given object&lt;/li&gt;
  &lt;li&gt;executed the body of a synchronized block on the given object&lt;/li&gt;
  &lt;li&gt;by executing &lt;em&gt;synchronized static _methods for objects of type _Class&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;only one active thread can own an object’s monitor at a time.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;synchronized&quot;&gt;synchronized&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;方法声明时使用,放在范围操作符(public等)之后,返回类型声明(void等)之前.即一次只能有一个线程进入该方法,其他线程要想在此时调用该方法,只能排队等候,当前线程(就是在synchronized方法内部的线程)执行完该方法后,别的线程才能进入.&lt;/li&gt;
  &lt;li&gt;对某一代码块使用,synchronized后跟括号,括号里是变量,这样,一次只有一个线程进入该代码块&lt;/li&gt;
  &lt;li&gt;synchronized后面括号里是一对象,此时,线程获得的是对象锁.如果线程进入,则得到对象锁,那么别的线程在该类所有对象上的任何操作都不能进行.在对象级使用锁通常是一种比较粗糙的方法&lt;/li&gt;
  &lt;li&gt;synchronized后面括号里是类, 如，synchronized(ArrayWithLockOrder.class)。 如果线程进入,则线程在该类中所有操作不能进行,包括静态变量和静态方法。&lt;/li&gt;
  &lt;li&gt;锁是和对象相关联的，每个对象有一把锁，为了执行synchronized语句，线程必须能够获得synchronized语句中表达式指定的对象的锁，一个对象只有一把锁，被一个线程获得之后它就不再拥有这把锁，线程在执行完synchronized语句后，将获得锁交还给对象。&lt;/li&gt;
  &lt;li&gt;在方法前面加上synchronized修饰符即可以将一个方法声明为同步化方法。&lt;/li&gt;
  &lt;li&gt;同步化方法在执行之前获得一个锁。如果这是一个类方法，那么获得的锁是和声明方法的类相关的Class类对象的锁。如果这是一个实例方法，那么此锁是this对象的锁。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;notify-notifyall&quot;&gt;notify, notifyAll&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;wait()、notify()和notifyAll()方法是本地方法，并且为final方法，无法被重写。&lt;/li&gt;
  &lt;li&gt;调用某个对象的wait()方法能让当前线程阻塞，并且当前线程必须拥有此对象的monitor（即锁）&lt;/li&gt;
  &lt;li&gt;调用某个对象的notify()方法能够唤醒一个正在等待这个对象的monitor的线程，如果有多个线程都在等待这个对象的monitor，则只能唤醒其中一个线程；&lt;/li&gt;
  &lt;li&gt;调用notifyAll()方法能够唤醒所有正在等待这个对象的monitor的线程；
    &lt;ul&gt;
      &lt;li&gt;o.notifyAll() wakes all of the threads that are blocked in o.wait() calls.&lt;/li&gt;
      &lt;li&gt;The threads are only allowed to return from o.wait() one-by-one, but they each will get their turn.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;一个线程被唤醒不代表立即获取了对象的monitor，只有等调用完notify()或者notifyAll()并退出synchronized块，释放对象锁后，其余线程才可获得锁执行。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;为何这三个不是Thread类声明中的方法，而是Object类中声明的方法（当然由于Thread类继承了Object类，所以Thread也可以调用者三个方法）？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;由于每个对象都拥有monitor（即锁），所以让当前线程等待某个对象的锁，当然应该通过这个对象来操作了。 而不是用当前线程来操作，因为当前线程可能会等待多个线程的锁，如果通过线程来操作，就非常复杂了。&lt;/li&gt;
  &lt;li&gt;调用某个对象的wait()方法，当前线程必须拥有这个对象的monitor（即锁），因此调用wait()方法必须在同步块或者同步方法中进行（synchronized块或者synchronized方法）。&lt;/li&gt;
  &lt;li&gt;调用某个对象的wait()方法，相当于让当前线程交出此对象的monitor，然后进入等待状态，等待后续再次获得此对象的锁（Thread类中的sleep方法使当前线程暂停执行一段时间，从而让其他线程有机会继续执行，但它并不释放对象锁）；&lt;/li&gt;
  &lt;li&gt;notify()方法能够唤醒一个正在等待该对象的monitor的线程，当有多个线程都在等待该对象的monitor的话，则只能唤醒其中一个线程，具体唤醒哪个线程则不得而知。&lt;/li&gt;
  &lt;li&gt;同样地，调用某个对象的notify()方法，当前线程也必须拥有这个对象的monitor，因此调用notify()方法必须在同步块或者同步方法中进行（synchronized块或者synchronized方法）。&lt;/li&gt;
  &lt;li&gt;nofityAll()方法能够唤醒所有正在等待该对象的monitor的线程，这一点与notify()方法是不同的。 这里要注意一点：notify()和notifyAll()方法只是唤醒等待该对象的monitor的线程，并不决定哪个线程能够获取到monitor。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;multithreading-exceptions&quot;&gt;Multithreading Exceptions&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/exceptions_handle.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Current Thread -&amp;gt; ThreadGroup -&amp;gt; Jvm Level(Global Thread level)
如果都没有，则调用Threadgroup class (“main” threadgroup to which main thread is part of) provide default implementation&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;System.err.print(&quot;Exception in thread \&quot;&quot; + t.getName() + &quot;\&quot; &quot;);
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;At Thread Level&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;Thread t1 = new Thread(new WorkerThread());
t1.setName(&quot;T4&quot;);
 
t1.setUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler(){
        @Override
 public void uncaughtException(Thread t, Throwable e){
    System.out.println(&quot;Thread Exception Handler :Thread Name :&quot;+t.getName() + &quot; Message :&quot;+e.getMessage());
        }
});
t1.start();
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;At ThreadGroup Level&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;ThreadGroup tr = new ThreadGroup(&quot;MyGroup&quot;){
 @Override
 public void uncaughtException(Thread t, Throwable e) {
  System.out.println(&quot;ThreadGroup Exception Handler :Thread Name :&quot;+t.getName() + &quot; Message :&quot;+e.getMessage());
 }
};
 
Thread t1 = new Thread(tr, new WorkerThread());
t1.setName(&quot;T1&quot;);
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;At Global Thread Level&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;Thread.setDefaultUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler(){     
 @Override
 public void uncaughtException(Thread t, Throwable e){
  System.out.println(&quot;Default Exception Handler :Thread Name :&quot;+t.getName() + &quot; Message :&quot;+e.getMessage());
 }
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;线程发生异常是会释放锁的–monitorexit&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;to-kill-a-thread&quot;&gt;To kill a thread&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Thread.stop() is Deprecated
    &lt;ul&gt;
      &lt;li&gt;不安全，unlock所有锁&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;使用标志位&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyThread&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;finished&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stopMe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;finished&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;finished&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;//do dirty work&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;threadinterrupt&quot;&gt;Thread.interrupt()&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/41048032&quot;&gt;参考&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;一个线程不应该由其他线程来强制中断或停止，而是应该由线程自己自行停止。而 Thread.interrupt 的作用其实也不是中断线程，而是「通知线程应该中断了」。调用interrupt()时&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果线程处于被阻塞状态（例如处于sleep, wait, join 等状态），那么线程将立即退出被阻塞状态，并抛出一个InterruptedException&lt;/li&gt;
  &lt;li&gt;线程处于正常活动状态，将会将终端标志设置为true&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;中断是协作机制，需要程序猿自己实现。&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Runnable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 若未发生中断，就正常执行任务&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isInterrupted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()){&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// 正常任务代码……&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// 中断的处理代码……&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;触发中断&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;interrupt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;线程调度&quot;&gt;线程调度&lt;/h2&gt;
&lt;p&gt;主流的调度各不相同，&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;优先级调度–priority schedule
    &lt;ul&gt;
      &lt;li&gt;高优先级先执行&lt;/li&gt;
      &lt;li&gt;线程优先级改变的三种方式
        &lt;ul&gt;
          &lt;li&gt;用户指定优先级&lt;/li&gt;
          &lt;li&gt;系统根据进入等待状态的频繁程度提升或者降低优先级&lt;/li&gt;
          &lt;li&gt;长时间得不到执行而被提升优先级&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;轮转法 – Round Robin
    &lt;ul&gt;
      &lt;li&gt;让各个线程轮流执行一小段时间&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;io-bound-thread-vs-cpu-bound-thread&quot;&gt;IO Bound Thread vs CPU bound Thread&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;IO Bound
    &lt;ul&gt;
      &lt;li&gt;频繁等待的线程–频繁进入等待状态&lt;/li&gt;
      &lt;li&gt;容易得到系统的优先级的提升&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;CPU Bound
    &lt;ul&gt;
      &lt;li&gt;很少等待的线程&lt;/li&gt;
      &lt;li&gt;频繁进行大量计算&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;time-slice&quot;&gt;Time Slice&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;approximately 20 milliseconds&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;The period of time for which a process is allowed to run in a preemptive multitasking system is generally called the &lt;em&gt;time slice&lt;/em&gt; or &lt;em&gt;quantum&lt;/em&gt;. &lt;/li&gt;
  &lt;li&gt;The length of each time slice can be critical to balancing system performance vs process responsiveness
    &lt;ul&gt;
      &lt;li&gt;too long
        &lt;ul&gt;
          &lt;li&gt;processes will take longer to respond to input&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;too short
        &lt;ul&gt;
          &lt;li&gt;the scheduler will consume too much processing time&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;An &lt;a href=&quot;https://en.wikipedia.org/wiki/Interrupt&quot;&gt;interrupt&lt;/a&gt; is scheduled to allow the &lt;a href=&quot;https://en.wikipedia.org/wiki/Operating_system&quot;&gt;operating system&lt;/a&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Kernel_(computer_science)&quot;&gt;kernel&lt;/a&gt; to switch between processes when their time slices expire&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;semaphore&quot;&gt;Semaphore&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Semaphore 是一个计数信号量，必须由获取它的线程释放。&lt;/li&gt;
  &lt;li&gt;常用于限制可以访问某些资源的线程数量，例如通过 Semaphore 限流。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;countdownlatch-vs-cyclicbarrier&quot;&gt;CountDownLatch vs CyclicBarrier&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Latches are for waiting for events;
    &lt;ul&gt;
      &lt;li&gt;不能重复利用，只能用一次&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;barriers are for waiting for other threads.
    &lt;ul&gt;
      &lt;li&gt;cyclicBarrier.await() goes into a blocking state&lt;/li&gt;
      &lt;li&gt;CyclicBarrier的计数器更像一个阀门，需要所有线程都到达，然后继续执行，计数器递增，提供reset功能，可以多次使用&lt;/li&gt;
      &lt;li&gt;执行完之后会自动reset，可以重复利用，所以叫做CyclicBarrier&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sun, 10 Sep 2017 22:18:38 +0800</pubDate>
        <link>https://thomasliao.cn/2017/09/10/Java-Thread/</link>
        <guid isPermaLink="true">https://thomasliao.cn/2017/09/10/Java-Thread/</guid>
        
        <category>Java</category>
        
        <category>Thread</category>
        
        
      </item>
    
      <item>
        <title>Rxjava Guide By Jake Wharton</title>
        <description>&lt;p&gt;“When you bow deeply to the universe, it bows back; when you call out the name of God, it echoes inside you.”
―Morihei Ueshiba&lt;/p&gt;

&lt;h1 id=&quot;from-jake-wharton&quot;&gt;from Jake Wharton&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;usually do work when you start or stop listening.&lt;/li&gt;
  &lt;li&gt;Sysnchronous or asynchronous.&lt;/li&gt;
  &lt;li&gt;Single item, many items, or empty
    &lt;ul&gt;
      &lt;li&gt;single - network request&lt;/li&gt;
      &lt;li&gt;many - button click&lt;/li&gt;
      &lt;li&gt;empty - save file or database&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;terminates with an error or succeeds to completion&lt;/li&gt;
  &lt;li&gt;may never terminate&lt;/li&gt;
  &lt;li&gt;just an implementation of the Observer pattern&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;rxjava&quot;&gt;Rxjava&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;a set of classes for representing sources of data&lt;/li&gt;
  &lt;li&gt;a set of classes for listening to data sources&lt;/li&gt;
  &lt;li&gt;A set of methods for modifying and composing the data&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;source&quot;&gt;Source&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Usually do work when you start or stop listening.&lt;/li&gt;
  &lt;li&gt;Synchronous or asynchronous.&lt;/li&gt;
  &lt;li&gt;Single item, many items, or empty.&lt;/li&gt;
  &lt;li&gt;Terminates with an error or succeeds to completion.&lt;/li&gt;
  &lt;li&gt;May never terminate!&lt;/li&gt;
  &lt;li&gt;just an implementation of the Observer pattern&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;sources&quot;&gt;sources&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Observable&lt;T&gt;
&lt;/T&gt;    &lt;ul&gt;
      &lt;li&gt;Emits 0 to n items&lt;/li&gt;
      &lt;li&gt;Terminates with complete or error.&lt;/li&gt;
      &lt;li&gt;Does not have backpressure.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Flowable&lt;T&gt;
&lt;/T&gt;    &lt;ul&gt;
      &lt;li&gt;Emits 0 to n items&lt;/li&gt;
      &lt;li&gt;Terminates with complete or error.&lt;/li&gt;
      &lt;li&gt;Has backpressure&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;flowable-vs-observable&quot;&gt;Flowable vs Observable&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;backpressure allows you to control how fast a source emits items.&lt;/li&gt;
  &lt;li&gt;Rxjava 1.x added backpressure late in the design process&lt;/li&gt;
  &lt;li&gt;All types exposed backupressure but not all sources respected it&lt;/li&gt;
  &lt;li&gt;Backpressure, like interitance, must be designed for.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;single&quot;&gt;Single&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Either succeeds with an item or errors.&lt;/li&gt;
  &lt;li&gt;No backpressure support.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;completable&quot;&gt;Completable&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Either completes or errors. Has no items!&lt;/li&gt;
  &lt;li&gt;No backpressure support.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;maybe&quot;&gt;Maybe&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Either succeeds with an item, completes with no items, or errors. - No backpressure support.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;flowable-vs-observable-1&quot;&gt;Flowable vs Observable&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;—&lt;/th&gt;
      &lt;th&gt;Backpressure&lt;/th&gt;
      &lt;th&gt;No Backpressure&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;0…n items, complete / error&lt;/td&gt;
      &lt;td&gt;Flowable&lt;/td&gt;
      &lt;td&gt;Observable&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;item / complete/error&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;Maybe&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;item / error&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;Single&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;complete / error&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;Completable&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;source-specializations&quot;&gt;Source Specializations&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Encoding subsets of Observable into the type system
    &lt;ul&gt;
      &lt;li&gt;Single -item or error. think “scalar”&lt;/li&gt;
      &lt;li&gt;Completable - Complete or error, think “runnable”.&lt;/li&gt;
      &lt;li&gt;Maybe - Item, complete, or error. think “optional”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;points-&quot;&gt;points ?&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;create&lt;/li&gt;
  &lt;li&gt;dispose&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;operators&quot;&gt;Operators&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Manipulate or combine data in some way&lt;/li&gt;
  &lt;li&gt;Manipulate threading in some way.&lt;/li&gt;
  &lt;li&gt;Manipulate emissions in some way.&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Fri, 01 Sep 2017 12:47:08 +0800</pubDate>
        <link>https://thomasliao.cn/rxjava/2017/09/01/Rxjava-guide-by-Jake-Wharton/</link>
        <guid isPermaLink="true">https://thomasliao.cn/rxjava/2017/09/01/Rxjava-guide-by-Jake-Wharton/</guid>
        
        <category>Rxjava</category>
        
        
        <category>Rxjava</category>
        
      </item>
    
      <item>
        <title>Git Commands</title>
        <description>&lt;p&gt;“When you bow deeply to the universe, it bows back; when you call out the name of God, it echoes inside you.”
―Morihei Ueshiba&lt;/p&gt;

&lt;h1 id=&quot;git-usage&quot;&gt;git usage&lt;/h1&gt;

&lt;h2 id=&quot;git-terms&quot;&gt;git terms&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;state&lt;/th&gt;
      &lt;th&gt;description&lt;/th&gt;
      &lt;th&gt;section&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;committed&lt;/td&gt;
      &lt;td&gt;data is safely stored in your local database&lt;/td&gt;
      &lt;td&gt;Git directory-stores the metadata and object database for your project.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;modified&lt;/td&gt;
      &lt;td&gt;have changed the file but have not committed it to your database yet&lt;/td&gt;
      &lt;td&gt;working directory-a single checkout of one version of the project.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Staged&lt;/td&gt;
      &lt;td&gt;have marked a modified file in its current version to go into your next commit snapshot.&lt;/td&gt;
      &lt;td&gt;staging area&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;git-commands&quot;&gt;git commands&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;command&lt;/th&gt;
      &lt;th&gt;des&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;git checkout -b [name_of_your_new_branch]&lt;/td&gt;
      &lt;td&gt;Create the branch on your local machine and switch in this branch&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;git push -u origin [name_of_your_new_branch]&lt;/td&gt;
      &lt;td&gt;push new branch to remote origin&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;(on branch development)$git merge master, git checkout master, git merge development&lt;/td&gt;
      &lt;td&gt;Merge development branch with master&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;git branch -d the_local_branch&lt;/td&gt;
      &lt;td&gt;delete local branch&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;新建代码库&quot;&gt;新建代码库&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;在当前目录新建一个Git代码库
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git init
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;新建一个目录，将其初始化为Git代码库
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git init [project-name]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;下载一个项目和它的整个代码历史
$ git clone [url]&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;配置&quot;&gt;配置&lt;/h3&gt;

&lt;p&gt;Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;显示当前的Git配置
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git config --list
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;编辑Git配置文件
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git config -e [--global]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;设置提交代码时的用户信息
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git config [--global] user.name &quot;[name]&quot;
$ git config [--global] user.email &quot;[email address]&quot;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;h3 id=&quot;增加删除文件&quot;&gt;增加/删除文件&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;添加指定文件到暂存区
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git add [file1] [file2] ...
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;添加指定目录到暂存区，包括子目录
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git add [dir]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;添加当前目录的所有文件到暂存区
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git add .
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;删除工作区文件，并且将这次删除放入暂存区
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git rm [file1] [file2] ...
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;停止追踪指定文件，但该文件会保留在工作区
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git rm --cached [file]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;改名文件，并且将这个改名放入暂存区
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git mv [file-original] [file-renamed]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;h3 id=&quot;代码提交&quot;&gt;代码提交&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;提交暂存区到仓库区
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git commit -m [message]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;提交暂存区的指定文件到仓库区
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git commit [file1] [file2] ... -m [message]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;提交工作区自上次commit之后的变化，直接到仓库区
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git commit -a
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;提交时显示所有diff信息
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git commit -v
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;使用一次新的commit，替代上一次提交&lt;/li&gt;
  &lt;li&gt;如果代码没有任何新变化，则用来改写上一次commit的提交信息
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git commit --amend -m [message]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;重做上一次commit，并包括指定文件的新变化
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git commit --amend [file1] [file2] ...
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;h3 id=&quot;分支&quot;&gt;分支&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;列出所有本地分支
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git branch
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;列出所有远程分支
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git branch -r
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;列出所有本地分支和远程分支
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git branch -a
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;新建一个分支，但依然停留在当前分支
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git branch [branch-name]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;新建一个分支，并切换到该分支
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git checkout -b [branch]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;新建一个分支，指向指定commit
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git branch [branch] [commit]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;新建一个分支，与指定的远程分支建立追踪关系
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git branch --track [branch] [remote-branch]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;切换到指定分支，并更新工作区
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git checkout [branch-name]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;建立追踪关系，在现有分支与指定的远程分支之间
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git branch --set-upstream [branch] [remote-branch]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;合并指定分支到当前分支
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git merge [branch]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;选择一个commit，合并进当前分支
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git cherry-pick [commit]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;删除分支
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git branch -d [branch-name]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;删除远程分支
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git push origin --delete [branch-name]
$ git branch -dr [remote/branch]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;h3 id=&quot;标签&quot;&gt;标签&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;列出所有tag
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git tag
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;新建一个tag在当前commit
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git tag [tag]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;新建一个tag在指定commit
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git tag [tag] [commit]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;查看tag信息
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git show [tag]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;提交指定tag
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git push [remote] [tag]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;提交所有tag
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git push [remote] --tags
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;新建一个分支，指向某个tag
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git checkout -b [branch] [tag]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;h3 id=&quot;查看信息&quot;&gt;查看信息&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;显示有变更的文件
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git status
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;显示当前分支的版本历史
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git log
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;显示commit历史，以及每次commit发生变更的文件
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git log --stat
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;显示某个文件的版本历史，包括文件改名
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git log --follow [file]
$ git whatchanged [file]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;显示指定文件相关的每一次diff
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git log -p [file]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;显示指定文件是什么人在什么时间修改过
$ git blame [file]
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;# 显示暂存区和工作区的差异
$ git diff
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;显示暂存区和上一个commit的差异
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git diff --cached [file]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;显示工作区与当前分支最新commit之间的差异
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git diff HEAD
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;显示两次提交之间的差异
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git diff [first-branch]...[second-branch]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;显示某次提交的元数据和内容变化
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git show [commit]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;显示某次提交发生变化的文件
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git show --name-only [commit]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;显示某次提交时，某个文件的内容
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git show [commit]:[filename]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;显示当前分支的最近几次提交
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git reflog
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;h3 id=&quot;远程同步&quot;&gt;远程同步&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;下载远程仓库的所有变动
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git fetch [remote]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;显示所有远程仓库
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git remote -v
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;显示某个远程仓库的信息
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git remote show [remote]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;增加一个新的远程仓库，并命名
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git remote add [shortname] [url]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;取回远程仓库的变化，并与本地分支合并
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git pull [remote] [branch]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;上传本地指定分支到远程仓库
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git push [remote] [branch]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;强行推送当前分支到远程仓库，即使有冲突
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git push [remote] --force
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;推送所有分支到远程仓库
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git push [remote] --all
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;h3 id=&quot;撤销&quot;&gt;撤销&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;恢复暂存区的指定文件到工作区
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git checkout [file]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;恢复某个commit的指定文件到工作区
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git checkout [commit] [file]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;恢复上一个commit的所有文件到工作区
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git checkout .
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;重置暂存区的指定文件，与上一次commit保持一致，但工作区不变
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git reset [file]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;重置暂存区与工作区，与上一次commit保持一致
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git reset --hard
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git reset [commit]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git reset --hard [commit]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;重置当前HEAD为指定commit，但保持暂存区和工作区不变
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git reset --keep [commit]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;新建一个commit，用来撤销指定commit&lt;/li&gt;
  &lt;li&gt;后者的所有变化都将被前者抵消，并且应用到当前分支
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git revert [commit]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;h3 id=&quot;其他&quot;&gt;其他&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;生成一个可供发布的压缩包
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;$ git archive
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Thu, 31 Aug 2017 12:53:34 +0800</pubDate>
        <link>https://thomasliao.cn/linux/2017/08/31/git-commands/</link>
        <guid isPermaLink="true">https://thomasliao.cn/linux/2017/08/31/git-commands/</guid>
        
        <category>Linux</category>
        
        
        <category>Linux</category>
        
      </item>
    
      <item>
        <title>Understanding the linux kernel!</title>
        <description>&lt;p&gt;“When you bow deeply to the universe, it bows back; when you call out the name of God, it echoes inside you.”
―Morihei Ueshiba&lt;/p&gt;

&lt;h2 id=&quot;description&quot;&gt;Description&lt;/h2&gt;
&lt;p&gt;这个是对«Understanding the linux kernel»的读书笔记,记录下了要点.持续更新&lt;/p&gt;

&lt;h2 id=&quot;chapter-1&quot;&gt;Chapter 1&lt;/h2&gt;
&lt;h3 id=&quot;terms&quot;&gt;terms&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;symmetric multiprocessing (SMP)&lt;/li&gt;
  &lt;li&gt;Journaling file system 日志型文件系统&lt;/li&gt;
  &lt;li&gt;General Public License (GPL)&lt;/li&gt;
  &lt;li&gt;Fiber Distributed Data Interface (FDDI)光纤分布式数据接口&lt;/li&gt;
  &lt;li&gt;High Performance Parallel Interface (HIPPI)高性能并行接口&lt;/li&gt;
  &lt;li&gt;cpu nonprivileged mode:User Mode&lt;/li&gt;
  &lt;li&gt;cpu privileged mode:Kernel Mode&lt;/li&gt;
  &lt;li&gt;TSS:Task State Segment&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;区分module和microkernel-operating-systems&quot;&gt;区分module和microkernel operating systems&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;module [monolithic operating Systems]:&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;does not run as a specific process.Instead it is executed in Kernel Mode on behalf of the current process ,like any other statically linked kernel function&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;microkernel operating Systems:&lt;/li&gt;
  &lt;li&gt;demand a very small set of functions from the kernel, generally including a few synchronization primitives, a simple scheduler, and an interprocess communication mechanism. Several system processes that run on top of the microkernel implement other operating system-layer functions, like memory allocators, device drivers, system call handlers, and so on.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;file&quot;&gt;File&lt;/h3&gt;
&lt;p&gt;A Unix file is an information container structured as a sequence of bytes; the kernel does not interpret the contents of a file.&lt;/p&gt;

&lt;h4 id=&quot;files-types&quot;&gt;Files Types&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Regular file&lt;/li&gt;
  &lt;li&gt;Directory&lt;/li&gt;
  &lt;li&gt;Symbolic link&lt;/li&gt;
  &lt;li&gt;Device file&lt;/li&gt;
  &lt;li&gt;Block-oriented device file&lt;/li&gt;
  &lt;li&gt;Character-oriented device file&lt;/li&gt;
  &lt;li&gt;Device files are related to I/O devices and device drivers integrated into the kernel&lt;/li&gt;
  &lt;li&gt;Pipe and named pipe (also called FIFO)&lt;/li&gt;
  &lt;li&gt;Pipes and sockets are special files used for interprocess communication&lt;/li&gt;
  &lt;li&gt;Socket&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;inode-consist-the-information&quot;&gt;Inode, consist the information:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;File type (see previous section)&lt;/li&gt;
  &lt;li&gt;Number of hard links associated with the file&lt;/li&gt;
  &lt;li&gt;File length in bytes&lt;/li&gt;
  &lt;li&gt;Device ID (i.e., an identifier of the device containing the file)&lt;/li&gt;
  &lt;li&gt;Inode number that identifies the file within the filesystem&lt;/li&gt;
  &lt;li&gt;User ID of the file owner&lt;/li&gt;
  &lt;li&gt;Group ID of the file&lt;/li&gt;
  &lt;li&gt;Several timestamps that specify the inode status change time, the last access time, and
the last modify time&lt;/li&gt;
  &lt;li&gt;Access rights and file mode (see next section)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;file-descriptor-and-inode&quot;&gt;File Descriptor and Inode&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;each file consists of a sequence of characters&lt;/li&gt;
  &lt;li&gt;Information needed included in a data structure-inode&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;161-the-processkernel-model&quot;&gt;1.6.1 The Process/Kernel Model&lt;/h3&gt;

&lt;p&gt;he kernel itself is not a process but a process manager.&lt;/p&gt;

&lt;p&gt;Besides user processes, Unix systems include a few privileged processes called kernel threads:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;They run in Kernel Mode in the kernel address space.&lt;/li&gt;
  &lt;li&gt;They do not interact with users, and thus do not require terminal devices.&lt;/li&gt;
  &lt;li&gt;They are usually created during system startup and remain alive until the system is
shut down.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Kernel routine invoded:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;process itself invokes a system call&lt;/li&gt;
  &lt;li&gt;process sinals an exception, cause the kernel invoke to handle  the exception&lt;/li&gt;
  &lt;li&gt;device issues an interrupt signal&lt;/li&gt;
  &lt;li&gt;kernel thread is executed&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;162-process-implementation&quot;&gt;1.6.2 Process Implementation&lt;/h3&gt;
&lt;h4 id=&quot;process-descriptor&quot;&gt;Process Descriptor&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;program counter and stack pointer&lt;/li&gt;
  &lt;li&gt;general-purpose registers&lt;/li&gt;
  &lt;li&gt;floating point registers&lt;/li&gt;
  &lt;li&gt;processor control registers(Process Status Word-cpu state)&lt;/li&gt;
  &lt;li&gt;memory manager registers keep track of RAM&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;163-reentrant-kernels&quot;&gt;1.6.3 Reentrant Kernels&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;All Unix Kernels are reentrant&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;chapter-2memory-addressing&quot;&gt;Chapter 2.Memory Addressing&lt;/h2&gt;
&lt;h3 id=&quot;21-memory-address&quot;&gt;2.1 Memory address&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Logical address:&lt;/li&gt;
  &lt;li&gt;Included in the machine language instructions to specify the address of an operand or of an instruction.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;segment + offset&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Linear addrss:&lt;/li&gt;
  &lt;li&gt;A single 32-bit unsigned integer that can be used to address up to 4 GB&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;range from 0x00000000 to 0xffffffff.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Physical address:&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Used to address memory cells included in memory chips.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;sample:
我们写个最简单的hello world程序，用gccs编译，再反编译后会看到以下指令：&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;···
mov    0x80495b0, %eax
···&lt;/p&gt;

&lt;p&gt;这里的内存地址0x80495b0 就是一个逻辑地址，必须加上隐含的DS 数据段的基地址，才能构成线性地址。也就是说 0x80495b0 是当前任务的DS数据段内的偏移。&lt;/p&gt;

&lt;h3 id=&quot;22-segmentation-in-hardware&quot;&gt;2.2 Segmentation in Hardware&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;logical address = a segment identifier[16-bit field called Segment Selector]  + an offset[32-bit field]&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;processor provides segmentation registers to hold Segment Selectors&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;CS:code segment register, points to a segment containing program instructions&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;SS:stack segment register, points to a segment containing the current program stack&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;DS:data segment register, points to a segment containing static and external data&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;ES,FS,GS:-&amp;gt;three segmentation registers are general purpose and may refer to arbitrary segments.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;25-paging-in-linux&quot;&gt;2.5 paging in Linux&lt;/h3&gt;
&lt;p&gt;Linux handling of processes relyis heavily on paging.&lt;/p&gt;

&lt;h4 id=&quot;signals-and-interprocess-communication&quot;&gt;Signals and Interprocess Communication&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Asynchronous notifications&lt;/li&gt;
  &lt;li&gt;Synchronous errors or exceptions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The kernel implements these constructs as IPC resources: a process acquires a resource by
invoking a shmget( ), semget( ), or msgget( ) system call. Just like files, IPC resources
are persistent: they must be explicitly deallocated by the creator process, by the current
owner, or by a superuser process.&lt;/p&gt;

&lt;p&gt;Shared memory provides the fastest way for processes to exchange and share data.&lt;/p&gt;

&lt;p&gt;1.6.7.1 Zombie processes
a process
remains in that state until its parent process executes a wait( ) system call on it.&lt;/p&gt;

&lt;h3 id=&quot;memory-management&quot;&gt;Memory Management&lt;/h3&gt;
&lt;h4 id=&quot;virtual-memory&quot;&gt;virtual memory&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Several processes can be executed concurrently.&lt;/li&gt;
  &lt;li&gt;It is possible to run applications whose memory needs are larger than the available
physical memory.&lt;/li&gt;
  &lt;li&gt;Processes can execute a program whose code is only partially loaded in memory.&lt;/li&gt;
  &lt;li&gt;Each process is allowed to access a subset of the available physical memory.&lt;/li&gt;
  &lt;li&gt;Processes can share a single memory image of a library or program.&lt;/li&gt;
  &lt;li&gt;Programs can be relocatable, that is, they can be placed anywhere in physical memory.&lt;/li&gt;
  &lt;li&gt;Programmers can write machine-independent code, since they do not need to be
concerned about physical memory organization.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;random-access-memory-usage&quot;&gt;Random access memory usage&lt;/h4&gt;
&lt;p&gt;two portions of the random access memory(RAM).&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;A few megabytes are dedicated to storing the kernel image (i.e., the kernel code and
the kernel static data structures).&lt;/li&gt;
  &lt;li&gt;The remaining portion of RAM is used in three possible ways:
• To satisfy kernel requests for buffers, descriptors, and other dynamic kernel data
structures
• To satisfy process requests for generic memory areas and for memory mapping of files
• To get better performance from disks and other buffered devices by means of caches&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sun, 23 Apr 2017 20:41:22 +0800</pubDate>
        <link>https://thomasliao.cn/linux/2017/04/23/Understanding-The-Linux-Kernel/</link>
        <guid isPermaLink="true">https://thomasliao.cn/linux/2017/04/23/Understanding-The-Linux-Kernel/</guid>
        
        <category>Linux</category>
        
        
        <category>Linux</category>
        
      </item>
    
      <item>
        <title>Java polymorphism and class modifier!</title>
        <description>&lt;p&gt;“When you bow deeply to the universe, it bows back; when you call out the name of God, it echoes inside you.”
―Morihei Ueshiba&lt;/p&gt;

&lt;h3 id=&quot;description&quot;&gt;Description&lt;/h3&gt;
&lt;p&gt;介绍Java Basic的多态性：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;override是重写，指的是子类集成父类重新写父类已有的方法，方法名称、参数个数，类型，顺序，返回值类型都是必须和父类方法一致的。&lt;/li&gt;
  &lt;li&gt;overload是重载，值得是在同一个类中写多一个和另外一个方法名一毛一样的方法，不过是不同的方法参数或者返回值调用–因为方法就是一个功能的实现，但是参数可能有多种类型&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;sample-点击看代码&quot;&gt;sample 点击看代码&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/liao123abc/AndroidSnacks/tree/master/app/src/main/java/liao/thomas/androidsnacks/javabasic/overload&quot;&gt;overload&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/liao123abc/AndroidSnacks/tree/master/app/src/main/java/liao/thomas/androidsnacks/javabasic/override&quot;&gt;override&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;public-protected-default-private&quot;&gt;public protected default private&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;modifier&lt;/th&gt;
      &lt;th&gt;类内部&lt;/th&gt;
      &lt;th&gt;本包&lt;/th&gt;
      &lt;th&gt;子类&lt;/th&gt;
      &lt;th&gt;外部包&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;public&lt;/td&gt;
      &lt;td&gt;√&lt;/td&gt;
      &lt;td&gt;√&lt;/td&gt;
      &lt;td&gt;√&lt;/td&gt;
      &lt;td&gt;√&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;protected&lt;/td&gt;
      &lt;td&gt;√&lt;/td&gt;
      &lt;td&gt;√&lt;/td&gt;
      &lt;td&gt;√&lt;/td&gt;
      &lt;td&gt;×&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;default&lt;/td&gt;
      &lt;td&gt;√&lt;/td&gt;
      &lt;td&gt;√&lt;/td&gt;
      &lt;td&gt;×&lt;/td&gt;
      &lt;td&gt;×&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;private&lt;/td&gt;
      &lt;td&gt;√&lt;/td&gt;
      &lt;td&gt;×&lt;/td&gt;
      &lt;td&gt;×&lt;/td&gt;
      &lt;td&gt;×&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;public 
对于public修饰符，它具有最大的访问权限，可以访问任何一个在CLASSPATH下的类、接口、异常等。它往往用于对外的情况，也就是对象或类对外的一种接口的形式。(其实就是什么都可以访问)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;protected
对于protected修饰符，对于protected的方法或者变量就只有本包和本类或者子类可以维护（其实就是对外不公开的意思），但是你可以在外部包写一个子类override protected
方法&lt;/p&gt;

    &lt;p&gt;包accessing有个方法test1&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;package liao.thomas.androidsnacks.javabasic.accessing;

/**
 * Created by Administrator on 2016/12/24.
 */

public class Foo {

    /**
     * default
     */
    void test1() {
        //do something
    }

    /**
     * protected
     */
    protected void test2() {

    }
}

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;另外一个包有个方法&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;    Foo2 foo2 = new Foo2();
    //嘿嘿，调用继承后的test2方法,如果Foo2没有override test2方法，这里会报错，你可以试一下注释掉Foo2的test2方法
    foo2.test2();
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;default，针对本包访问设计，就是在同一个包内的都可以访问，其他的就不可以了，一般用于某些方法我们只在本包内被修改，对于包外，呵呵，不好意思，你没权限看到，更加不要说修改了。&lt;/p&gt;

    &lt;p&gt;包accessing有个方法test1&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;package liao.thomas.androidsnacks.javabasic.accessing;

/**
 * Created by Administrator on 2016/12/24.
 */

public class Foo {

    /**
     * default
     */
    void test1() {
        //do something
    }

    /**
     * protected
     */
    protected void test2() {

    }
}

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;另外一个包有个方法&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;    Foo foo = new Foo();
    //foo.test1(); //会报错，因为test1是default方法，无法在别的包访问
        
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;private 啥也不要说了，private修饰的方法或者变量只有本类才能够访问和修改，子类也不行&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 24 Dec 2016 11:41:22 +0800</pubDate>
        <link>https://thomasliao.cn/java/2016/12/24/Java-polymorphism-and-class-modifier/</link>
        <guid isPermaLink="true">https://thomasliao.cn/java/2016/12/24/Java-polymorphism-and-class-modifier/</guid>
        
        <category>java</category>
        
        
        <category>java</category>
        
      </item>
    
  </channel>
</rss>
