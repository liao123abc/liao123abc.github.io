I"{^<h2 id="ascii">ASCII</h2>
<blockquote>
  <p>http://www.robelle.com/library/smugbook/ascii.html</p>
</blockquote>

<ul>
  <li>character encoding</li>
  <li>short for: American Standard Code for Information Interchange</li>
  <li>
    <p>ASCII 码一共规定了128个字符的编码</p>
  </li>
  <li>Wordstar</li>
</ul>

<p><img src="https://upload.wikimedia.org/wikipedia/en/e/e3/Wordstar_Screenshot.png" alt="dominated the market in the early and mid-1980s" /></p>

<ul>
  <li>MS-DOS</li>
</ul>

<p><img src="https://pic4.zhimg.com/80/fd6d090f634b0afbe69b8d33cf5e58a4_720w.jpg?source=1940ef5c" alt="MS-DOS时代的MS Office" /></p>

<h3 id="question">question</h3>
<blockquote>
  <p>“plain text == ascii == characters are 8 bits”?</p>
</blockquote>

<h3 id="only-for-english">only for english</h3>

<p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/1/1b/ASCII-Table-wide.svg/875px-ASCII-Table-wide.svg.png" alt="table" /></p>

<ul>
  <li>In ASCII, every letter, digits, and symbols that mattered were represented as a number between 32 and 127.</li>
  <li>1 byte
    <ul>
      <li>只占用了一个字节的后面7位，最前面的一位统一规定为0
  	- 7位来编码，8位来传输</li>
      <li>有些软件会使用第一位。
        <ul>
          <li>wordstar-indicate the last letter in a word</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>[0, 31] called unprintable
    <ul>
      <li>大部分已经废弃
        <ul>
          <li>but remain some :such as the carriage return, line feed and tab codes.</li>
        </ul>
      </li>
      <li>used for control characters， 如
        <ul>
          <li>7 which made your computer beep</li>
          <li>12 which caused the current page of paper to go flying out of the printer and a new one to be fed in</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>[32, 127] are printable–Ninety-five of the encoded characters
    <ul>
      <li>表示可打印的字符(a-z, A-Z, 0–9, +, -, /, “, ! etc.)</li>
      <li>32-space</li>
      <li>65-“A”</li>
    </ul>
  </li>
  <li>不支持其他字符
    <ul>
      <li>没有带变音符的拉丁字母（如 é 和 ä ），也不支持像希腊字母（如 α、β、γ）、西里尔字母（如 Пушкин）这样的其他欧洲文字</li>
      <li>更加不要说中文了</li>
    </ul>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>//make a bel
echo ^G
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="del-为什么删除键作为控制字符-编码为-127">del 为什么删除键作为控制字符, 编码为 127</h3>
<ul>
  <li>打孔机的纸带中，对应位为 0 就不打孔，对应位为 1 就打孔。</li>
  <li>一卷全新空纸带上完全没有孔，自然表示全 0，也就对应于 ASCII 的控制字符 Null。</li>
  <li>那在打孔机上打错字符时怎么办
    <ul>
      <li>纸带中不能将已打的孔填上，于是当打错字干脆将其全部打孔，表示这一个字符被省略或者删除。</li>
      <li>全部打孔就是二进制的 7 个 1，对应十进制编码 127</li>
    </ul>
  </li>
</ul>

<p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/0/0b/Creed_model_6S-2_paper_tape_reader.jpg/1920px-Creed_model_6S-2_paper_tape_reader.jpg" alt="holes" width="400" /></p>

<h3 id="line-feed--carriage-reture">Line Feed &amp;&amp; Carriage Reture</h3>
<p><img src="https://i.stack.imgur.com/e4xm6.jpg" alt="LFCR" /></p>

<ul>
  <li>Line Feed
    <ul>
      <li>Classic Mac OS, OS-9, FLEX (and variants).</li>
    </ul>
  </li>
  <li>CR+LF
    <ul>
      <li>DOS and Windows, and by Application Layer protocols such as FTP, SMTP, and HTTP</li>
    </ul>
  </li>
  <li>history
    <ul>
      <li>打字机要求”Carriage Return” + “Line Feed”
        <ul>
          <li>“Carriage Return”–把打印机头移到最前面</li>
          <li>“Line Feed”移到新一行</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p><a href="https://www.youtube.com/watch?v=n-eFFd5BmpU">video</a></p>

<h2 id="eof">EOF</h2>

<blockquote>
  <p>end of file的缩写，表示”文字流”（stream）的结尾。这里的”文字流”，可以是文件（file），也可以是标准输入（stdin）</p>
</blockquote>

<ul>
  <li>EOF不是特殊字符，而是一个定义在头文件stdio.h的常量，一般等于-1</li>
</ul>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="err">　#</span><span class="n">define</span> <span class="n">EOF</span> <span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
<span class="err">　</span>
<span class="err">　</span><span class="kt">int</span> <span class="n">c</span><span class="p">;</span>
<span class="err">　</span><span class="k">while</span> <span class="p">((</span><span class="n">c</span> <span class="o">=</span> <span class="n">fgetc</span><span class="p">(</span><span class="n">fp</span><span class="p">))</span> <span class="o">!=</span> <span class="n">EOF</span><span class="p">)</span> <span class="p">{</span>
<span class="err">　　　　</span><span class="c1">//do something</span>
  <span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="from-ascii-to-unicode">from ascii to unicode</h2>
<ul>
  <li>不同的国家有不同的字母，因此，哪怕它们都使用256个符号的编码方式，代表的字母却不一样</li>
  <li>亚洲国家的文字，使用的符号就更多了，汉字就多达10万左右</li>
  <li>世界上存在着多种编码方式，同一个二进制数字可以被解释成不同的符号</li>
  <li>Unicode 当然是一个很大的集合，现在的规模可以容纳100多万个符号。
    <ul>
      <li>每个符号的编码都不一样</li>
      <li>只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储</li>
    </ul>
  </li>
</ul>

<h3 id="question-1">question</h3>
<ul>
  <li>Unicode 是16位编码？</li>
  <li>每个字符占用16位？可以表示65,536个字符？</li>
  <li>如何才能区别 Unicode 和 ASCII ?</li>
  <li>计算机怎么知道三个字节表示一个符号，而不是分别表示三个符号呢？</li>
</ul>

<h2 id="unicode">unicode</h2>
<blockquote>
  <p>windows 通过charmap查询</p>
  <ul>
    <li>character encodings</li>
    <li>providing a unique code point—a number, not a glyph—for each character</li>
    <li>leaves the visual rendering (size, shape, font, or style) to other software</li>
  </ul>
</blockquote>

<h2 id="utf-16">utf-16</h2>
<blockquote>
  <p>起源于UCS-2 (for 2-byte Universal Character Set)</p>
</blockquote>

<ul>
  <li>languages:
    <ul>
      <li>java</li>
      <li>JavaScript/ECMAScript</li>
    </ul>
  </li>
  <li>system:
    <ul>
      <li>windows use it often
        <ul>
          <li>近两年向UTF-8靠近</li>
        </ul>
      </li>
      <li>Unix-like systems not like it</li>
    </ul>
  </li>
  <li>encoding using 65,536 (216) values</li>
  <li>2 bytes (16 bits) per character</li>
  <li>不兼容ASCII</li>
  <li>on web:
    <ul>
      <li>0.005% (less than 1 hundredth of 1 percent) of web pages</li>
      <li>UTF-8, by comparison, is used by 97% of all web pages</li>
    </ul>
  </li>
</ul>

<p>high-endian UCS-2 or low-endian UCS-2</p>

<h2 id="utf-8-演进史">UTF-8 演进史</h2>

<p><img src="https://img-blog.csdnimg.cn/20200609160034671.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x5ZkdlZWs=,size_16,color_FFFFFF,t_70" alt="evolution" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>[ITA 2, FIELDATA]   ---&gt;   ASCII  ----&gt;  GB2313   ----&gt;    Unicode[US-2, UTF-16]  -----&gt;  Unicode[UTF-8]
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="utf-8">UTF-8</h2>
<ul>
  <li>memory：1-4字节</li>
  <li>最流行的编码方式
    <ul>
      <li>97% of all web pages</li>
    </ul>
  </li>
  <li>兼容ASCII
    <ul>
      <li>对于单字节的符号和ASCII一样</li>
    </ul>
  </li>
</ul>

<p><img src="https://i1.wp.com/convertcodes.com/wp-content/uploads/2018/11/code-point-bit.png?resize=504%2C126&amp;ssl=1" alt="code point conversion" /></p>

<h3 id="解读">解读</h3>
<ul>
  <li>字节
    <ul>
      <li>如果一个字节的第一位是0，则这个字节单独就是一个字符；</li>
      <li>如果第一位是1，则连续有多少个1，就表示当前字符占用多少个字节</li>
    </ul>
  </li>
  <li>对于单字节的符号，字节的第一位设为0</li>
  <li>对于n字节的符号（n &gt; 1），
    <ul>
      <li>第一个字节的前n位都设为1，</li>
      <li>第n + 1位设为0，</li>
      <li>后面字节的前两位一律设为10。</li>
      <li>剩下的没有提及的二进制位，全部为这个符号的 Unicode 码</li>
    </ul>
  </li>
</ul>

<h3 id="sample">sample</h3>
<ul>
  <li>windows打开charmap，搜索一个汉字</li>
</ul>

<p><img src="https://img-blog.csdnimg.cn/20200609161126959.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x5ZkdlZWs=,size_16,color_FFFFFF,t_70" alt="convert" width="1000" /></p>

<h2 id="endianness-of-an-encoding">endianness of an encoding</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>//对于一个32位整数1，不同的CPU架构会有不同的存储方式：
00000000 00000000 00000000 00000001
//或者
00000001 00000000 00000000 00000000
</pre></td></tr></tbody></table></code></pre></div></div>
<p><img src="https://images.squarespace-cdn.com/content/v1/549dcda5e4b0a47d0ae1db1e/1490746414666-EM74IA60AFM16OEH9G22/ke17ZwdGBToddI8pDm48kOMlUb6YZjvz-j7uj5wTIAtZw-zPPgdn4jUwVcJE1ZvWQUxwkmyExglNqGp0IvTJZamWLI2zvYWH8K3-s_4yszcp2ryTI0HqTOaaUohrI8PICROjhJFkM8GI5jSypQ9qrB6ZUKEpH8g8X8GW3p0wQZI/image-asset.png" alt="endianness" width="400" /></p>

<h3 id="大端">大端</h3>
<ul>
  <li>高位在前</li>
  <li>最低位放在最后一个位置</li>
  <li>TCP/IP 协议栈是按照 Big Endian 来设计的，而 X86 机器多按照 Little Endian 来设计的，因而发出去的时候需要做一个转换</li>
</ul>

<h3 id="小端">小端</h3>
<ul>
  <li>低位在前</li>
  <li>最低位放在第一个位置</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre>//UTF-8编码是变长的，用8~32位(1~4字节)表示，有固定的位置来表示是几个字节：
0xxxxxxx
110xxxxx 10xxxxxx
1110xxxx 10xxxxxx 10xxxxxx
11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
//字节头部识别就是前面的0，110，1110，11110表示字节数
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="bom">BOM</h2>
<ul>
  <li>BOM也是Unicode标准的一部分，有它特定的适用范围。</li>
  <li>通常BOM是用来标示Unicode纯文本字节流的，用来提供一种方便的方法让文本处理程序识别读入的.txt文件是哪个Unicode编码（UTF-8，UTF-16BE，UTF-16LE）</li>
  <li>Windows相对对BOM处理比较好，是因为Windows把Unicode识别代码集成进了API里，主要是CreateFile()。打开文本文件时它会自动识别并剔除BOM。</li>
</ul>

<h3 id="bombyte-order-mark">bom(byte order mark)</h3>

<blockquote>
  <p>Unicode 不使用 U+FFFE，在文件开头加一个 BOM 即可区分各种不同编码</p>
</blockquote>

<p>UTF-8 with bom
https://stackoverflow.com/questions/2223882/whats-the-difference-between-utf-8-and-utf-8-without-bom</p>

<p><img src="https://lh3.googleusercontent.com/proxy/_7X9TG6ddYuq-rDKdAb6Tfoo1lyrcJ2PvJhbWnoSqn_J31FFrr_RswtufICuRAk_1L40VFH8mseead1jhnNre4S0JBiIN5lmHyo" alt="bom" /></p>

<ul>
  <li>UTF-32 编码
    <ul>
      <li>0x00 00 FE FF, 大端</li>
      <li>0xFF FE 00 00, 小端</li>
    </ul>
  </li>
  <li>UTF-16
    <ul>
      <li>0xFE FF, 大端</li>
      <li>0xFF FE, 小端</li>
    </ul>
  </li>
  <li>UTF-8
    <ul>
      <li>0xEF BB BF –《其实我无所谓》 <img src="https://language.chinadaily.com.cn/images/attachement/jpg/site1/20150317/a41f726749f61671fee14c.jpg" alt="convert" width="100" /></li>
      <li>辅助作用?
        <ul>
          <li>UTF-8 对BOM无要求
            <ul>
              <li>UTF-8没有大小端的困扰</li>
              <li>bom可以标识输入流/文本以UTF-8编写，方便推测</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="jni">JNI</h2>

<h3 id="在jni调用中我们经常用到getstringutfchars">在jni调用中我们经常用到GetStringUTFChars</h3>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="n">JNIEXPORT</span> <span class="n">jobjectArray</span> <span class="n">JNICALL</span>
<span class="nf">Java_com_xxx_symbolkit_symbol_jni_ELFJni_getSymsBySoFile</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jclass</span> <span class="n">clazz</span><span class="p">,</span> <span class="n">jstring</span> <span class="n">so_path</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">path</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">GetStringUTFChars</span><span class="p">(</span><span class="n">so_path</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span><span class="c1">//转码UTF-8</span>
    <span class="c1">//do something~~~~~~</span>
    <span class="n">env</span><span class="o">-&gt;</span><span class="n">ReleaseStringUTFChars</span><span class="p">(</span><span class="n">so_path</span><span class="p">,</span> <span class="n">path</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">array</span><span class="p">;</span>
<span class="p">}</span>

</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="字符串操作函数">字符串操作函数</h3>
<ul>
  <li>GetStringUTFChars
    <ul>
      <li>const char * GetStringUTFChars(JNIEnv *env, jstring string,jboolean *isCopy);</li>
      <li>Returns a pointer to an array of bytes representing the string in modified UTF-8 encoding</li>
    </ul>
  </li>
  <li>GetStringChars
    <ul>
      <li>const char * GetStringChars(JNIEnv *env, jstring string,jboolean *isCopy);</li>
      <li>Returns a pointer to the array of Unicode characters of the string
        <ul>
          <li>actually UTF-16</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="iscopy参数">isCopy参数</h3>
<ul>
  <li>JNI_FALSE
    <ul>
      <li>指向的是JVM中的同一份数据</li>
      <li>不一定会拷贝</li>
      <li>本地代码决不能修改字符串的内容，
  	- 否则JVM中的原始字符串也会被修改，
  	- 这会打破JAVA语言中字符串不可变的规则</li>
    </ul>
  </li>
  <li>JNI_TRUE
    <ul>
      <li>一定会拷贝</li>
    </ul>
  </li>
  <li>一定要调用release
    <ul>
      <li>void ReleaseStringUTFChars(JNIEnv *env, jstring string,const char *utf);</li>
      <li>void ReleaseStringChars(JNIEnv *env, jstring string, const jchar *chars);</li>
    </ul>
  </li>
</ul>

<h3 id="不要对jnienv做任何假设">不要对JNIEnv做任何假设</h3>

<p><a href="https://www.programmersought.com/article/8728233532/">Java layer objects as opaque references<strong>(pointer</strong>) passed to the JNI layer</a></p>

<h4 id="jnienv-is-just-interface">JNIEnv is just interface</h4>
<p><img src="https://taoste.github.io/dirtysalt/html/images/jnienv-interface-pointer.png" alt="" /></p>

<h4 id="there-are-some-many-vms">there are some many vms</h4>
<ul>
  <li>虚拟机始祖：SunClassic/ExactVM</li>
  <li>武林盟主：HotSpotVM</li>
  <li>小家碧玉：Mobile/EmbeddedVM</li>
  <li>天下第二：BEAJRockit/IBMJ9VM</li>
  <li>软硬合璧：BEALiquidVM/AzulVM</li>
  <li>挑战者：ApacheHarmony/GoogleAndroidDalvikVM</li>
  <li>没有成功，但并非失败：MicrosoftJVM及其他</li>
  <li>百家争鸣
    <ul>
      <li>JamVM：http://jamvm.sourceforge.net/·</li>
      <li>CacaoVM：http://www.cacaovm.org/·</li>
      <li>SableVM：http://www.sablevm.org/·</li>
      <li>Kaffe：http://www.kaffe.org/·</li>
      <li>JelatineJVM：http://jelatine.sourceforge.net/·</li>
      <li>NanoVM：http://www.harbaum.org/till/nanovm/index.shtml·</li>
      <li>MRP：https://github.com/codehaus/mrp·</li>
      <li>MoxieJVM：http://moxie.sourceforge.net/</li>
    </ul>
  </li>
</ul>

<p>周志明. 深入理解Java虚拟机：JVM高级特性与最佳实践（第3版） (华章原创精品) (Chinese Edition)</p>

<h2 id="java-string--c-string-object">java string &amp;&amp; c++ string object</h2>

<h3 id="stirng-literal">stirng literal</h3>

<ul>
  <li>actually calling intern() method on String
    <ul>
      <li>references internal pool of string objects
        <ul>
          <li>运行时常量池，在runtime期间亦可以动态添加</li>
        </ul>
      </li>
      <li>if same value exist, no new object could be created</li>
    </ul>
  </li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nc">String</span> <span class="n">str</span> <span class="o">=</span> <span class="err">“</span><span class="nc">GeeksForGeeks</span><span class="err">”</span><span class="o">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><img src="https://img.javatt.com/6e/6e7d96afc9b175222aa43e3f7ef8eee5.png" alt="endianness" width="600" /></p>

<h3 id="string-object">String object</h3>
<ul>
  <li>JVM is forced to create a new string reference, even if “GeeksForGeeks” is in the reference pool.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nc">String</span> <span class="n">str</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="err">“</span><span class="nc">GeeksForGeeks</span><span class="err">”</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="c-c">c, c++</h3>

<ul>
  <li>C++98 中有 char 和 wchar_t 两种不同的字符类型，
    <ul>
      <li>其中 char 的长度是单字节，</li>
      <li>而 wchar_t 的长度不确定。
        <ul>
          <li>在 Windows 上它是双字节，只能代表 UTF-16，</li>
          <li>而在 Unix 上一般是四字节，可以代表 UTF-32</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>C++11 引入了 char16_t 和 char32_t 两个独立的字符类型（不是类型别名），分别代表 UTF-16 和 UTF-32</li>
  <li>C++20 将引入 char8_t 类型，进一步区分了可能使用传统编码的窄字符类型和 UTF-8 字符类型</li>
</ul>

<h2 id="java-string-char-to-byte">java String char to byte</h2>
<blockquote>
  <p>为了节约String占用的内存</p>
</blockquote>

<ul>
  <li>jdk9新特性</li>
  <li>在大多数Java程序的堆里，String占用的空间最大，并且绝大多数String只有Latin-1字符，这些Latin-1字符只需要1个字节就够了</li>
  <li>before
    <ul>
      <li>JDK9之前，JVM因为String使用char数组存储，每个char占2个字节，所以即使字符串只需要1字节/字符，它也要按照2字节/字符进行分配，浪费了一半的内存空间</li>
    </ul>
  </li>
  <li>after
    <ul>
      <li>JDK9:一个字符串出来的时候判断，它是不是只有Latin-1字符，如果是，就按照1字节/字符的规格进行分配内存，如果不是，就按照2字节/字符的规格进行分配（UTF-16编码），提高了内存使用率</li>
    </ul>
  </li>
</ul>

<h2 id="gbk-半角全角">GBK, 半角&amp;&amp;全角</h2>

<h3 id="gbk">GBK</h3>
<ul>
  <li>最早的中文字符集标准是 1980 年的国标 GB2312，
    <ul>
      <li>其中收录了 6763 个常用汉字和 682 个其他符号</li>
    </ul>
  </li>
  <li>与 ASCII 兼容
    <ul>
      <li>由于 GB2312 中本身也含有 ASCII 中包含的字符，在使用中逐渐就形成了“半角”和“全角”的区别</li>
    </ul>
  </li>
  <li>国标字符集后面又有扩展，这个扩展后的字符集就是 GBK
    <ul>
      <li>中文版 Windows 使用的标准编码方式</li>
    </ul>
  </li>
</ul>

<h3 id="原因">原因</h3>
<ul>
  <li>历史原因</li>
  <li>排版</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre>//全角
ｖａｌ　ｔｅｓｔｉｎｇ　＝　ｔｒｕｅ

//半角
val testing = true
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="全角与半角两个术语应该都是从日本来的">「全角」与「半角」两个术语应该都是从日本来的</h3>
<ul>
  <li>JIS X 4051《日本語文書の組版方法》里面，将全角定义为「汉字一文字的外框」，半角定义为「字宽为全角二分之一的文字之外框」</li>
</ul>

<h2 id="at-last-three-button-is-enough">at last: three button is enough</h2>

<p><img src="https://upload.wikimedia.org/wikipedia/commons/8/89/WACsOperateTeletype.jpg" alt="teleprinter" /></p>

<p><img src="https://5.imimg.com/data5/SI/LI/FK/SELLER-8118327/gaming-desktop-pc-custom-built-cpu--500x500.jpg" alt="now" /></p>

<p><img src="https://deliverassignment.com/wp-content/uploads/2020/06/compute-programmer.jpg" alt="mac" /></p>

<blockquote>
  <p>人类社会不断发展，技术日新月异，三个按键足够了</p>
</blockquote>

<p><img src="https://149351115.v2.pressablecdn.com/wp-content/uploads/2021/03/the_key_angle-1536x1152.jpeg" alt="holes" width="400" /></p>

<h2 id="references">references</h2>

<p><a href="https://stackoverflow.com/questions/12747722/what-is-the-difference-between-a-line-feed-and-a-carriage-return#:~:text=A%20line%20feed%20means%20moving,r%5Cn%20in%20text%20files.">“line feed” and a “carriage return”?</a>
<a href="https://stackoverflow.com/questions/12747722/what-is-the-difference-between-a-line-feed-and-a-carriage-return#:~:text=A%20line%20feed%20means%20moving,r%5Cn%20in%20text%20files."></a></p>

<p><a href="https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/"></a>
<a href="https://medium.com/@apiltamang/unicode-utf-8-and-ascii-encodings-made-easy-5bfbe3a1c45a"></a>
<a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html"></a>
<a href="http://www.ruanyifeng.com/blog/2011/11/eof.html"></a></p>
:ET